{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v5.json", "dbt_version": "1.1.1", "generated_at": "2022-07-26T11:15:01.424166Z", "invocation_id": "09a135bf-ea54-47d9-8e53-9a2be895fd68", "env": {}, "project_id": "48fb1ee707c9926559649fd1c4fcf290", "user_id": "f2962d00-4f65-4d5c-b5fb-3b32eae9bb8e", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.dbt_datanl_prod.d_business_unit": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_business_unit') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_business_unit"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_business_unit"], "unique_id": "model.dbt_datanl_prod.d_business_unit", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_business_unit.sql", "original_file_path": "models\\int_redshift\\d_business_unit.sql", "name": "d_business_unit", "alias": "d_business_unit", "checksum": {"name": "sha256", "checksum": "43deea6372232d626966078a601b0472da910a1168337017923bec1bf5aeab20"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_business_unit"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_business_unit.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_business_unit.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.3695724, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_business_unit`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_business_unit`"}, "model.dbt_datanl_prod.d_customer_channel_type": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_customer_channel_type') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_customer_channel_type"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_customer_channel_type"], "unique_id": "model.dbt_datanl_prod.d_customer_channel_type", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_customer_channel_type.sql", "original_file_path": "models\\int_redshift\\d_customer_channel_type.sql", "name": "d_customer_channel_type", "alias": "d_customer_channel_type", "checksum": {"name": "sha256", "checksum": "60f48418871c0cec384ee0baef317cef35dccc500f36c511901754a1a94f9edc"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_customer_channel_type"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_customer_channel_type.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_customer_channel_type.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.3795862, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_customer_channel_type`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_customer_channel_type`"}, "model.dbt_datanl_prod.d_customers": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_customers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_customers"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_customers"], "unique_id": "model.dbt_datanl_prod.d_customers", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_customers.sql", "original_file_path": "models\\int_redshift\\d_customers.sql", "name": "d_customers", "alias": "d_customers", "checksum": {"name": "sha256", "checksum": "61f34cb8aa2b2765aed89dcf0f80c8896357f0957dfef412bba55297bb54b165"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_customers"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_customers.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_customers.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.382587, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_customers`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_customers`"}, "model.dbt_datanl_prod.d_day": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_day') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_day"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_day"], "unique_id": "model.dbt_datanl_prod.d_day", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_day.sql", "original_file_path": "models\\int_redshift\\d_day.sql", "name": "d_day", "alias": "d_day", "checksum": {"name": "sha256", "checksum": "a41a2c248a553de9849398992b86189126d2c888212620af9f0b8747e84ca2e4"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_day"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_day.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_day.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.385369, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_day`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_day`"}, "model.dbt_datanl_prod.d_delivery_type": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_delivery_type') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_delivery_type"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_delivery_type"], "unique_id": "model.dbt_datanl_prod.d_delivery_type", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_delivery_type.sql", "original_file_path": "models\\int_redshift\\d_delivery_type.sql", "name": "d_delivery_type", "alias": "d_delivery_type", "checksum": {"name": "sha256", "checksum": "6f14a01b1363e88c6a1ff060c0677e9837f63c7928863bad92c6ab60fae3cb65"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_delivery_type"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_delivery_type.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_delivery_type.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.3873696, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_delivery_type`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_delivery_type`"}, "model.dbt_datanl_prod.d_department": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_department') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_department"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_department"], "unique_id": "model.dbt_datanl_prod.d_department", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_department.sql", "original_file_path": "models\\int_redshift\\d_department.sql", "name": "d_department", "alias": "d_department", "checksum": {"name": "sha256", "checksum": "33e42a8728ca85672821bc6b661f661ff66b88f33be1c8e87c26b96c0dcfa7e4"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_department"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_department.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_department.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.3903704, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_department`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_department`"}, "model.dbt_datanl_prod.d_family": {"raw_sql": "select *\r\n\r\n\r\nfrom {{ source('stg_redshift', 'd_family') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_family"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_family"], "unique_id": "model.dbt_datanl_prod.d_family", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_family.sql", "original_file_path": "models\\int_redshift\\d_family.sql", "name": "d_family", "alias": "d_family", "checksum": {"name": "sha256", "checksum": "282d8f6ee920399d93c81c9c55395cf2a97f4281961e513efef82dfb4b76b681"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_family"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_family.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_family.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.3923705, "compiled_sql": "select *\n\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_family`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_family`"}, "model.dbt_datanl_prod.d_freight_method": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_freight_method') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_freight_method"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_freight_method"], "unique_id": "model.dbt_datanl_prod.d_freight_method", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_freight_method.sql", "original_file_path": "models\\int_redshift\\d_freight_method.sql", "name": "d_freight_method", "alias": "d_freight_method", "checksum": {"name": "sha256", "checksum": "a872d22ba539e08900f10aacab202a90756abf5a9035e6a49f51bcb0ed147922"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_freight_method"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_freight_method.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_freight_method.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.3943713, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_freight_method`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_freight_method`"}, "model.dbt_datanl_prod.d_label": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_label') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_label"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_label"], "unique_id": "model.dbt_datanl_prod.d_label", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_label.sql", "original_file_path": "models\\int_redshift\\d_label.sql", "name": "d_label", "alias": "d_label", "checksum": {"name": "sha256", "checksum": "23a3a1787f7aa164bb140626ac599ccef92db9b1aaf9f85d194e0956c77bebd3"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_label"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_label.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_label.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.3963716, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_label`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_label`"}, "model.dbt_datanl_prod.d_merchandise_hierarchy": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_merchandise_hierarchy') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_merchandise_hierarchy"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_merchandise_hierarchy"], "unique_id": "model.dbt_datanl_prod.d_merchandise_hierarchy", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_merchandise_hierarchy.sql", "original_file_path": "models\\int_redshift\\d_merchandise_hierarchy.sql", "name": "d_merchandise_hierarchy", "alias": "d_merchandise_hierarchy", "checksum": {"name": "sha256", "checksum": "aad65982da32a6df932b3d111af2197e2587b554c73803c6ed2555000af171c5"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_merchandise_hierarchy"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_merchandise_hierarchy.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_merchandise_hierarchy.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.3993723, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_merchandise_hierarchy`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_merchandise_hierarchy`"}, "model.dbt_datanl_prod.d_mkp_product": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_mkp_product') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_mkp_product"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_mkp_product"], "unique_id": "model.dbt_datanl_prod.d_mkp_product", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_mkp_product.sql", "original_file_path": "models\\int_redshift\\d_mkp_product.sql", "name": "d_mkp_product", "alias": "d_mkp_product", "checksum": {"name": "sha256", "checksum": "0228211e3f79db02fab8e74579b86572755b3d6bb6b1c43ce1a98d0a2757d0f8"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_mkp_product"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_mkp_product.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_mkp_product.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4013724, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_mkp_product`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_mkp_product`"}, "model.dbt_datanl_prod.d_model": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_model') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_model"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_model"], "unique_id": "model.dbt_datanl_prod.d_model", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_model.sql", "original_file_path": "models\\int_redshift\\d_model.sql", "name": "d_model", "alias": "d_model", "checksum": {"name": "sha256", "checksum": "f5bdb7ec434dd3451aab5273481f651b5b11bdd257c13510d6b14f6dbfeafa1e"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_model"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_model.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_model.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.403373, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_model`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_model`"}, "model.dbt_datanl_prod.d_product_nature": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_product_nature') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_product_nature"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_product_nature"], "unique_id": "model.dbt_datanl_prod.d_product_nature", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_product_nature.sql", "original_file_path": "models\\int_redshift\\d_product_nature.sql", "name": "d_product_nature", "alias": "d_product_nature", "checksum": {"name": "sha256", "checksum": "b49ce9a291a374ad78212e853ac400b3bc584ad61317b0d4e5e671d741c22a3c"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_product_nature"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_product_nature.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_product_nature.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.405374, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_product_nature`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_product_nature`"}, "model.dbt_datanl_prod.d_reallocated_digital_type": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_reallocated_digital_type') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_reallocated_digital_type"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_reallocated_digital_type"], "unique_id": "model.dbt_datanl_prod.d_reallocated_digital_type", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_reallocated_digital_type.sql", "original_file_path": "models\\int_redshift\\d_reallocated_digital_type.sql", "name": "d_reallocated_digital_type", "alias": "d_reallocated_digital_type", "checksum": {"name": "sha256", "checksum": "67f3f5ff1b4748d0df7748bf41de8496065bcf8c1d0d38db7981fba4919460c7"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_reallocated_digital_type"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_reallocated_digital_type.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_reallocated_digital_type.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4073744, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_reallocated_digital_type`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_reallocated_digital_type`"}, "model.dbt_datanl_prod.d_return_reason": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_return_reason') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_return_reason"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_return_reason"], "unique_id": "model.dbt_datanl_prod.d_return_reason", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_return_reason.sql", "original_file_path": "models\\int_redshift\\d_return_reason.sql", "name": "d_return_reason", "alias": "d_return_reason", "checksum": {"name": "sha256", "checksum": "6b122025c777e012ddcf61e2d5dbbb31e91d5a0a4c2df399b8ac423322c94a27"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_return_reason"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_return_reason.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_return_reason.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4103746, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_return_reason`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_return_reason`"}, "model.dbt_datanl_prod.d_return_type": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_return_type') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_return_type"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_return_type"], "unique_id": "model.dbt_datanl_prod.d_return_type", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_return_type.sql", "original_file_path": "models\\int_redshift\\d_return_type.sql", "name": "d_return_type", "alias": "d_return_type", "checksum": {"name": "sha256", "checksum": "c13a098e37acaac874c0dc37a53355dbfa97a426d3eb2fdedb7c3f0c61e7c9fc"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_return_type"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_return_type.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_return_type.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.412375, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_return_type`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_return_type`"}, "model.dbt_datanl_prod.d_shipping_type": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_shipping_type') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_shipping_type"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_shipping_type"], "unique_id": "model.dbt_datanl_prod.d_shipping_type", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_shipping_type.sql", "original_file_path": "models\\int_redshift\\d_shipping_type.sql", "name": "d_shipping_type", "alias": "d_shipping_type", "checksum": {"name": "sha256", "checksum": "1abb5a97ab40a3f4d76da6e0ef77ccd99d0f3daf9aaedac02a8918e22b98ea10"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_shipping_type"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_shipping_type.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_shipping_type.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4148784, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_shipping_type`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_shipping_type`"}, "model.dbt_datanl_prod.d_sku": {"raw_sql": "{{\r\n  config(\r\n    materialized = 'table',\r\n    )\r\n}}\r\n\r\nselect *\r\n\r\nfrom {{ source('stg_redshift', 'd_sku') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_sku"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_sku"], "unique_id": "model.dbt_datanl_prod.d_sku", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_sku.sql", "original_file_path": "models\\int_redshift\\d_sku.sql", "name": "d_sku", "alias": "d_sku", "checksum": {"name": "sha256", "checksum": "5119183bb87cb98c180f177c7fe5ab066989c9880d8eaae0633aad4b05991b9e"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_sku"]], "description": "A test dbt model", "columns": {"sku_idr_sku": {"name": "sku_idr_sku", "description": "The primary key for this table", "meta": {"project_name": "Promise", "maturity": "dev", "version": 0.2}, "data_type": null, "quote": null, "tags": ["dbt 1", "Internal db1", "External db2"]}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_datanl_prod://models\\int_redshift\\d_sku.yml", "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_sku.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_sku.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.6135101, "compiled_sql": "\n\nselect *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_sku`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_sku`"}, "model.dbt_datanl_prod.d_sport_dpt": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_sport_dpt') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_sport_dpt"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_sport_dpt"], "unique_id": "model.dbt_datanl_prod.d_sport_dpt", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_sport_dpt.sql", "original_file_path": "models\\int_redshift\\d_sport_dpt.sql", "name": "d_sport_dpt", "alias": "d_sport_dpt", "checksum": {"name": "sha256", "checksum": "09e6927773edafd673889a781d50607b3fd1bf3c0bdffbba989432ae8817c3d8"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_sport_dpt"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_sport_dpt.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_sport_dpt.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4188795, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_sport_dpt`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_sport_dpt`"}, "model.dbt_datanl_prod.d_touchpoint_channel_type": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_touchpoint_channel_type') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_touchpoint_channel_type"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_touchpoint_channel_type"], "unique_id": "model.dbt_datanl_prod.d_touchpoint_channel_type", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_touchpoint_channel_type.sql", "original_file_path": "models\\int_redshift\\d_touchpoint_channel_type.sql", "name": "d_touchpoint_channel_type", "alias": "d_touchpoint_channel_type", "checksum": {"name": "sha256", "checksum": "6f6887e9ce68c4e52f3fe30ee1d2dfe047d5055011f1b1db727048ac488c82e0"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_touchpoint_channel_type"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_touchpoint_channel_type.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_touchpoint_channel_type.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.42088, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_touchpoint_channel_type`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_touchpoint_channel_type`"}, "model.dbt_datanl_prod.d_week": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'd_week') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.d_week"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "d_week"], "unique_id": "model.dbt_datanl_prod.d_week", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\d_week.sql", "original_file_path": "models\\int_redshift\\d_week.sql", "name": "d_week", "alias": "d_week", "checksum": {"name": "sha256", "checksum": "44a80a211d5ee3eab4eb05d1ca49d17e884d2c69aa83a1f117099fc56bc5fe11"}, "tags": [], "refs": [], "sources": [["stg_redshift", "d_week"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\d_week.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\d_week.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4238803, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`d_week`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`d_week`"}, "model.dbt_datanl_prod.f_delivery_detail_2019": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_delivery_detail_2019') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2019"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_delivery_detail_2019"], "unique_id": "model.dbt_datanl_prod.f_delivery_detail_2019", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_delivery_detail_2019.sql", "original_file_path": "models\\int_redshift\\f_delivery_detail_2019.sql", "name": "f_delivery_detail_2019", "alias": "f_delivery_detail_2019", "checksum": {"name": "sha256", "checksum": "b376bece6b7158e28f329aef931f1ac59b868d7f98d059f8c65744ee5a48ac83"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_delivery_detail_2019"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_detail_2019.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_detail_2019.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4255798, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_delivery_detail_2019`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_delivery_detail_2019`"}, "model.dbt_datanl_prod.f_delivery_detail_2020": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_delivery_detail_2020') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2020"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_delivery_detail_2020"], "unique_id": "model.dbt_datanl_prod.f_delivery_detail_2020", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_delivery_detail_2020.sql", "original_file_path": "models\\int_redshift\\f_delivery_detail_2020.sql", "name": "f_delivery_detail_2020", "alias": "f_delivery_detail_2020", "checksum": {"name": "sha256", "checksum": "c2ae6fc02917c0e82429b7e5d3ad6cb61259d5737c0f33de8793420f2d69cdd2"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_delivery_detail_2020"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_detail_2020.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_detail_2020.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4275804, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_delivery_detail_2020`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_delivery_detail_2020`"}, "model.dbt_datanl_prod.f_delivery_detail_2021": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_delivery_detail_2021') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2021"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_delivery_detail_2021"], "unique_id": "model.dbt_datanl_prod.f_delivery_detail_2021", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_delivery_detail_2021.sql", "original_file_path": "models\\int_redshift\\f_delivery_detail_2021.sql", "name": "f_delivery_detail_2021", "alias": "f_delivery_detail_2021", "checksum": {"name": "sha256", "checksum": "4f6c8266c7623dd6f9451ffcb7459693f69c86bb93b8a0a8abd341cf3904fd90"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_delivery_detail_2021"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_detail_2021.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_detail_2021.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4295812, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_delivery_detail_2021`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_delivery_detail_2021`"}, "model.dbt_datanl_prod.f_delivery_detail_current": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_delivery_detail_current') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_delivery_detail_current"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_delivery_detail_current"], "unique_id": "model.dbt_datanl_prod.f_delivery_detail_current", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_delivery_detail_current.sql", "original_file_path": "models\\int_redshift\\f_delivery_detail_current.sql", "name": "f_delivery_detail_current", "alias": "f_delivery_detail_current", "checksum": {"name": "sha256", "checksum": "09f60f7bee83ca2a39d3fa5dc08853fdc14ea532c4d37dc0b1913e54e82acf13"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_delivery_detail_current"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_detail_current.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_detail_current.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.432582, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_delivery_detail_current`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_delivery_detail_current`"}, "model.dbt_datanl_prod.f_delivery_header_2019": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_delivery_header_2019') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_delivery_header_2019"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_delivery_header_2019"], "unique_id": "model.dbt_datanl_prod.f_delivery_header_2019", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_delivery_header_2019.sql", "original_file_path": "models\\int_redshift\\f_delivery_header_2019.sql", "name": "f_delivery_header_2019", "alias": "f_delivery_header_2019", "checksum": {"name": "sha256", "checksum": "a25ca33d7534d10f0fc3008e9133503b37e668e9563cdb7ac234e67efb15766d"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_delivery_header_2019"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_header_2019.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_header_2019.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.434582, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_delivery_header_2019`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_delivery_header_2019`"}, "model.dbt_datanl_prod.f_delivery_header_2020": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_delivery_header_2020') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_delivery_header_2020"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_delivery_header_2020"], "unique_id": "model.dbt_datanl_prod.f_delivery_header_2020", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_delivery_header_2020.sql", "original_file_path": "models\\int_redshift\\f_delivery_header_2020.sql", "name": "f_delivery_header_2020", "alias": "f_delivery_header_2020", "checksum": {"name": "sha256", "checksum": "9293afaaeb0ac323a89a732d08809b21b9bca90a8234d803b8faea3f583ea3f5"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_delivery_header_2020"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_header_2020.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_header_2020.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4365823, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_delivery_header_2020`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_delivery_header_2020`"}, "model.dbt_datanl_prod.f_delivery_header_2021": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_delivery_header_2021') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_delivery_header_2021"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_delivery_header_2021"], "unique_id": "model.dbt_datanl_prod.f_delivery_header_2021", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_delivery_header_2021.sql", "original_file_path": "models\\int_redshift\\f_delivery_header_2021.sql", "name": "f_delivery_header_2021", "alias": "f_delivery_header_2021", "checksum": {"name": "sha256", "checksum": "3328d2a32b397fcc59f3f93c72b8921e372100635842a5b1cb8947267ca60d72"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_delivery_header_2021"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_header_2021.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_header_2021.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4385831, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_delivery_header_2021`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_delivery_header_2021`"}, "model.dbt_datanl_prod.f_delivery_header_current": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_delivery_header_current') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_delivery_header_current"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_delivery_header_current"], "unique_id": "model.dbt_datanl_prod.f_delivery_header_current", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_delivery_header_current.sql", "original_file_path": "models\\int_redshift\\f_delivery_header_current.sql", "name": "f_delivery_header_current", "alias": "f_delivery_header_current", "checksum": {"name": "sha256", "checksum": "f1328e31edca23d27659246db0f34962c9405cfd9f6997aeeb95b32d5a79d147"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_delivery_header_current"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_header_current.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_delivery_header_current.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4415839, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_delivery_header_current`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_delivery_header_current`"}, "model.dbt_datanl_prod.f_mkp_transaction_detail": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_mkp_transaction_detail') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_mkp_transaction_detail"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_mkp_transaction_detail"], "unique_id": "model.dbt_datanl_prod.f_mkp_transaction_detail", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_mkp_transaction_detail.sql", "original_file_path": "models\\int_redshift\\f_mkp_transaction_detail.sql", "name": "f_mkp_transaction_detail", "alias": "f_mkp_transaction_detail", "checksum": {"name": "sha256", "checksum": "72b44303ba8c63c7dbf31b671b042f3a932659638a10d79c406998394c0fa12b"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_mkp_transaction_detail"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_mkp_transaction_detail.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_mkp_transaction_detail.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.443584, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_mkp_transaction_detail`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_mkp_transaction_detail`"}, "model.dbt_datanl_prod.f_postnl_year": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_postnl_year') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_postnl_year"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_postnl_year"], "unique_id": "model.dbt_datanl_prod.f_postnl_year", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_postnl_year.sql", "original_file_path": "models\\int_redshift\\f_postnl_year.sql", "name": "f_postnl_year", "alias": "f_postnl_year", "checksum": {"name": "sha256", "checksum": "5c7250f6e70b8585edf72c43310845a12db789ddb3bfa604cb79b48012ded716"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_postnl_year"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_postnl_year.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_postnl_year.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4455843, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_postnl_year`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_postnl_year`"}, "model.dbt_datanl_prod.f_supply_vc4r_retbox": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_supply_vc4r_retbox') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_supply_vc4r_retbox"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_supply_vc4r_retbox"], "unique_id": "model.dbt_datanl_prod.f_supply_vc4r_retbox", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_supply_vc4r_retbox.sql", "original_file_path": "models\\int_redshift\\f_supply_vc4r_retbox.sql", "name": "f_supply_vc4r_retbox", "alias": "f_supply_vc4r_retbox", "checksum": {"name": "sha256", "checksum": "35a7f96c7033e67a422c93afcb5294131291f8a61d384a83ab0156f8bfef6500"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_supply_vc4r_retbox"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_supply_vc4r_retbox.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_supply_vc4r_retbox.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.447585, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_supply_vc4r_retbox`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_supply_vc4r_retbox`"}, "model.dbt_datanl_prod.f_transaction_detail_2019": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_transaction_detail_2019') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2019"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_transaction_detail_2019"], "unique_id": "model.dbt_datanl_prod.f_transaction_detail_2019", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_transaction_detail_2019.sql", "original_file_path": "models\\int_redshift\\f_transaction_detail_2019.sql", "name": "f_transaction_detail_2019", "alias": "f_transaction_detail_2019", "checksum": {"name": "sha256", "checksum": "ad896bfb77d0d168b12a31723554a94fdd89d5492081a6227cbc8a6062e7fe8d"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_transaction_detail_2019"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_detail_2019.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_detail_2019.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4495854, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_transaction_detail_2019`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_transaction_detail_2019`"}, "model.dbt_datanl_prod.f_transaction_detail_2020": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_transaction_detail_2020') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2020"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_transaction_detail_2020"], "unique_id": "model.dbt_datanl_prod.f_transaction_detail_2020", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_transaction_detail_2020.sql", "original_file_path": "models\\int_redshift\\f_transaction_detail_2020.sql", "name": "f_transaction_detail_2020", "alias": "f_transaction_detail_2020", "checksum": {"name": "sha256", "checksum": "65ba9d389f01f5f5b0e4fdfa241d1855dbdd92370815aae445c6f0bcbd1c22b8"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_transaction_detail_2020"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_detail_2020.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_detail_2020.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4525864, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_transaction_detail_2020`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_transaction_detail_2020`"}, "model.dbt_datanl_prod.f_transaction_detail_2021": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_transaction_detail_2021') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2021"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_transaction_detail_2021"], "unique_id": "model.dbt_datanl_prod.f_transaction_detail_2021", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_transaction_detail_2021.sql", "original_file_path": "models\\int_redshift\\f_transaction_detail_2021.sql", "name": "f_transaction_detail_2021", "alias": "f_transaction_detail_2021", "checksum": {"name": "sha256", "checksum": "30355c114ad8e3244273070e7e0ec50a9b38c68d7e2088a43d7753ea35ec9360"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_transaction_detail_2021"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_detail_2021.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_detail_2021.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4545863, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_transaction_detail_2021`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_transaction_detail_2021`"}, "model.dbt_datanl_prod.f_transaction_detail_current": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_transaction_detail_current') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_transaction_detail_current"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_transaction_detail_current"], "unique_id": "model.dbt_datanl_prod.f_transaction_detail_current", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_transaction_detail_current.sql", "original_file_path": "models\\int_redshift\\f_transaction_detail_current.sql", "name": "f_transaction_detail_current", "alias": "f_transaction_detail_current", "checksum": {"name": "sha256", "checksum": "99cc1d35d4485b51644a4889df79f972732137123db67efd7bfe470d02db9787"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_transaction_detail_current"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_detail_current.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_detail_current.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.456587, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_transaction_detail_current`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_transaction_detail_current`"}, "model.dbt_datanl_prod.f_transaction_header_2019": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_transaction_header_2019') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_transaction_header_2019"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_transaction_header_2019"], "unique_id": "model.dbt_datanl_prod.f_transaction_header_2019", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_transaction_header_2019.sql", "original_file_path": "models\\int_redshift\\f_transaction_header_2019.sql", "name": "f_transaction_header_2019", "alias": "f_transaction_header_2019", "checksum": {"name": "sha256", "checksum": "eef95e9e3ccacfd83fad29e7f53430f2cbe0a33a7288cac9ddd0a1aeec92f1c5"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_transaction_header_2019"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_header_2019.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_header_2019.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4588766, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_transaction_header_2019`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_transaction_header_2019`"}, "model.dbt_datanl_prod.f_transaction_header_2020": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_transaction_header_2020') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_transaction_header_2020"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_transaction_header_2020"], "unique_id": "model.dbt_datanl_prod.f_transaction_header_2020", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_transaction_header_2020.sql", "original_file_path": "models\\int_redshift\\f_transaction_header_2020.sql", "name": "f_transaction_header_2020", "alias": "f_transaction_header_2020", "checksum": {"name": "sha256", "checksum": "d2054db42db8743388d06579503388e41bf9bb2f158e7fd583a4e2dcb7a8d82a"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_transaction_header_2020"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_header_2020.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_header_2020.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4618776, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_transaction_header_2020`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_transaction_header_2020`"}, "model.dbt_datanl_prod.f_transaction_header_2021": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_transaction_header_2021') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_transaction_header_2021"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_transaction_header_2021"], "unique_id": "model.dbt_datanl_prod.f_transaction_header_2021", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_transaction_header_2021.sql", "original_file_path": "models\\int_redshift\\f_transaction_header_2021.sql", "name": "f_transaction_header_2021", "alias": "f_transaction_header_2021", "checksum": {"name": "sha256", "checksum": "4ecb97258938b4b4bb19d13b9fc7756fb0825f4069ee999a304870bdc3e94dcd"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_transaction_header_2021"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_header_2021.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_header_2021.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4638777, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_transaction_header_2021`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_transaction_header_2021`"}, "model.dbt_datanl_prod.f_transaction_header_current": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_transaction_header_current') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_transaction_header_current"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_transaction_header_current"], "unique_id": "model.dbt_datanl_prod.f_transaction_header_current", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_transaction_header_current.sql", "original_file_path": "models\\int_redshift\\f_transaction_header_current.sql", "name": "f_transaction_header_current", "alias": "f_transaction_header_current", "checksum": {"name": "sha256", "checksum": "d774ac717afbe3b428de7080a6d2161b44c422a0eabd68895104c3634a113ea1"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_transaction_header_current"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_header_current.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_header_current.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4658782, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_transaction_header_current`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_transaction_header_current`"}, "model.dbt_datanl_prod.f_transaction_sustainable_2019": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_transaction_sustainable_2019') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2019"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_transaction_sustainable_2019"], "unique_id": "model.dbt_datanl_prod.f_transaction_sustainable_2019", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_transaction_sustainable_2019.sql", "original_file_path": "models\\int_redshift\\f_transaction_sustainable_2019.sql", "name": "f_transaction_sustainable_2019", "alias": "f_transaction_sustainable_2019", "checksum": {"name": "sha256", "checksum": "40e1fb7531bbfeaf8544dbf8a8bdf28bc2b1c0f8abec4dbb5b274d7d8f94b2ee"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_transaction_sustainable_2019"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_sustainable_2019.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_sustainable_2019.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4678795, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_transaction_sustainable_2019`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_transaction_sustainable_2019`"}, "model.dbt_datanl_prod.f_transaction_sustainable_2020": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_transaction_sustainable_2020') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2020"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_transaction_sustainable_2020"], "unique_id": "model.dbt_datanl_prod.f_transaction_sustainable_2020", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_transaction_sustainable_2020.sql", "original_file_path": "models\\int_redshift\\f_transaction_sustainable_2020.sql", "name": "f_transaction_sustainable_2020", "alias": "f_transaction_sustainable_2020", "checksum": {"name": "sha256", "checksum": "1ea4d75db19a8193296edd48caf287c9b88c13e8f43f7b9cacffc64bb1acd064"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_transaction_sustainable_2020"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_sustainable_2020.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_sustainable_2020.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4708796, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_transaction_sustainable_2020`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_transaction_sustainable_2020`"}, "model.dbt_datanl_prod.f_transaction_sustainable_2021": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_transaction_sustainable_2021') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2021"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_transaction_sustainable_2021"], "unique_id": "model.dbt_datanl_prod.f_transaction_sustainable_2021", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_transaction_sustainable_2021.sql", "original_file_path": "models\\int_redshift\\f_transaction_sustainable_2021.sql", "name": "f_transaction_sustainable_2021", "alias": "f_transaction_sustainable_2021", "checksum": {"name": "sha256", "checksum": "e35610ae8b366f3a7f3757bce1bdba0f97a3aefa98ef1f01bd1e908ff9992ad3"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_transaction_sustainable_2021"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_sustainable_2021.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_sustainable_2021.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4728806, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_transaction_sustainable_2021`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_transaction_sustainable_2021`"}, "model.dbt_datanl_prod.f_transaction_sustainable_current": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_transaction_sustainable_current') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_current"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_transaction_sustainable_current"], "unique_id": "model.dbt_datanl_prod.f_transaction_sustainable_current", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_transaction_sustainable_current.sql", "original_file_path": "models\\int_redshift\\f_transaction_sustainable_current.sql", "name": "f_transaction_sustainable_current", "alias": "f_transaction_sustainable_current", "checksum": {"name": "sha256", "checksum": "22e2ebec8bd58cbe749d36dec28f4936ac0a7f22c1de11cc328843b0fb35f0d4"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_transaction_sustainable_current"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_sustainable_current.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_transaction_sustainable_current.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4748805, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_transaction_sustainable_current`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_transaction_sustainable_current`"}, "model.dbt_datanl_prod.needs_car_autoflow": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'needs_car_autoflow') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.needs_car_autoflow"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "needs_car_autoflow"], "unique_id": "model.dbt_datanl_prod.needs_car_autoflow", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\needs_car_autoflow.sql", "original_file_path": "models\\int_redshift\\needs_car_autoflow.sql", "name": "needs_car_autoflow", "alias": "needs_car_autoflow", "checksum": {"name": "sha256", "checksum": "4b0de4b631c8d33efef88eb373ca46b5c4db62a499397320dd9b5af5ffa336be"}, "tags": [], "refs": [], "sources": [["stg_redshift", "needs_car_autoflow"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\needs_car_autoflow.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\needs_car_autoflow.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4771712, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`needs_car_autoflow`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`needs_car_autoflow`"}, "model.dbt_datanl_prod.lib_web_order_status": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'lib_web_order_status') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.lib_web_order_status"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "lib_web_order_status"], "unique_id": "model.dbt_datanl_prod.lib_web_order_status", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\lib_web_order_status.sql", "original_file_path": "models\\int_redshift\\lib_web_order_status.sql", "name": "lib_web_order_status", "alias": "lib_web_order_status", "checksum": {"name": "sha256", "checksum": "b0ef4841889c1610a7f12f8bf56e5848bbcbd1d1a99f20cc75aa0fb3bd2afb34"}, "tags": [], "refs": [], "sources": [["stg_redshift", "lib_web_order_status"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\lib_web_order_status.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\lib_web_order_status.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4791713, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`lib_web_order_status`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`lib_web_order_status`"}, "model.dbt_datanl_prod.opv_customer__personal_data": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'opv_customer__personal_data') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.opv_customer__personal_data"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "opv_customer__personal_data"], "unique_id": "model.dbt_datanl_prod.opv_customer__personal_data", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\opv_customer__personal_data.sql", "original_file_path": "models\\int_redshift\\opv_customer__personal_data.sql", "name": "opv_customer__personal_data", "alias": "opv_customer__personal_data", "checksum": {"name": "sha256", "checksum": "e67bd615a22904ac9f74421ee734d05524aec9971f3b2bd00c885622b375485b"}, "tags": [], "refs": [], "sources": [["stg_redshift", "opv_customer__personal_data"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\opv_customer__personal_data.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\opv_customer__personal_data.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.481172, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`opv_customer__personal_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`opv_customer__personal_data`"}, "model.dbt_datanl_prod.opv_review__review": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'opv_review__review') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.opv_review__review"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "opv_review__review"], "unique_id": "model.dbt_datanl_prod.opv_review__review", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\opv_review__review.sql", "original_file_path": "models\\int_redshift\\opv_review__review.sql", "name": "opv_review__review", "alias": "opv_review__review", "checksum": {"name": "sha256", "checksum": "9c3c040f29dfa979f4d476e55364f2940863b7b280bbbdffd665de5bcc2cd7aa"}, "tags": [], "refs": [], "sources": [["stg_redshift", "opv_review__review"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\opv_review__review.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\opv_review__review.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4841723, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`opv_review__review`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`opv_review__review`"}, "model.dbt_datanl_prod.opv_user__author": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'opv_user__author') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.opv_user__author"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "opv_user__author"], "unique_id": "model.dbt_datanl_prod.opv_user__author", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\opv_user__author.sql", "original_file_path": "models\\int_redshift\\opv_user__author.sql", "name": "opv_user__author", "alias": "opv_user__author", "checksum": {"name": "sha256", "checksum": "0f09f36fbfdab9f78ab7bb80720eeb6b60f53714944f5ea465e1611352fde236"}, "tags": [], "refs": [], "sources": [["stg_redshift", "opv_user__author"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\opv_user__author.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\opv_user__author.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.486173, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`opv_user__author`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`opv_user__author`"}, "model.dbt_datanl_prod.physical_stock_snapshot": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'physical_stock_snapshot') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.physical_stock_snapshot"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "physical_stock_snapshot"], "unique_id": "model.dbt_datanl_prod.physical_stock_snapshot", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\physical_stock_snapshot.sql", "original_file_path": "models\\int_redshift\\physical_stock_snapshot.sql", "name": "physical_stock_snapshot", "alias": "physical_stock_snapshot", "checksum": {"name": "sha256", "checksum": "cd545e7d77e18f3f5963f6e74b0acb142de8dcf3fcbe0001d04594d7d1f74824"}, "tags": [], "refs": [], "sources": [["stg_redshift", "physical_stock_snapshot"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\physical_stock_snapshot.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\physical_stock_snapshot.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4881732, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`physical_stock_snapshot`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`physical_stock_snapshot`"}, "model.dbt_datanl_prod.weight_dimension_finish_product": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'weight_dimension_finish_product') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.weight_dimension_finish_product"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "weight_dimension_finish_product"], "unique_id": "model.dbt_datanl_prod.weight_dimension_finish_product", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\weight_dimension_finish_product.sql", "original_file_path": "models\\int_redshift\\weight_dimension_finish_product.sql", "name": "weight_dimension_finish_product", "alias": "weight_dimension_finish_product", "checksum": {"name": "sha256", "checksum": "2230c7481b23a944794a0a3ef4f7cae6cf91e6f5adbafb864c1c31351cc848df"}, "tags": [], "refs": [], "sources": [["stg_redshift", "weight_dimension_finish_product"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\weight_dimension_finish_product.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\weight_dimension_finish_product.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.490174, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`weight_dimension_finish_product`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`weight_dimension_finish_product`"}, "model.dbt_datanl_prod.zsd_oms_ordtrkhi": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'zsd_oms_ordtrkhi') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.zsd_oms_ordtrkhi"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "zsd_oms_ordtrkhi"], "unique_id": "model.dbt_datanl_prod.zsd_oms_ordtrkhi", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\zsd_oms_ordtrkhi.sql", "original_file_path": "models\\int_redshift\\zsd_oms_ordtrkhi.sql", "name": "zsd_oms_ordtrkhi", "alias": "zsd_oms_ordtrkhi", "checksum": {"name": "sha256", "checksum": "86eb90b9c0e788f0d177e1376e35737f5e6a4fdd879fbf3af6389a47c443b792"}, "tags": [], "refs": [], "sources": [["stg_redshift", "zsd_oms_ordtrkhi"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\zsd_oms_ordtrkhi.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\zsd_oms_ordtrkhi.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4931743, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`zsd_oms_ordtrkhi`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`zsd_oms_ordtrkhi`"}, "model.dbt_datanl_prod.f_availability_rate": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_redshift', 'f_availability_rate') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_redshift.f_availability_rate"]}, "config": {"enabled": true, "alias": null, "schema": "int_redshift", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "int_redshift", "fqn": ["dbt_datanl_prod", "int_redshift", "f_availability_rate"], "unique_id": "model.dbt_datanl_prod.f_availability_rate", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "int_redshift\\f_availability_rate.sql", "original_file_path": "models\\int_redshift\\f_availability_rate.sql", "name": "f_availability_rate", "alias": "f_availability_rate", "checksum": {"name": "sha256", "checksum": "3f62a4a76f9fcf1ce4023c6b2b83772e8ed0f815dbb2bf8cbf1d86d9e249a78f"}, "tags": [], "refs": [], "sources": [["stg_redshift", "f_availability_rate"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\int_redshift\\f_availability_rate.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\int_redshift\\f_availability_rate.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "int_redshift", "materialized": "table"}, "created_at": 1658834103.4951746, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_redshift`.`f_availability_rate`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`int_redshift`.`f_availability_rate`"}, "model.dbt_datanl_prod.PRO_Helped_Orders": {"raw_sql": "select *\r\n\r\nfrom stg_gsheet_Promise.PRO_Helped_Orders", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "gsheet_Promise", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "gsheet_Promise", "fqn": ["dbt_datanl_prod", "gsheet_Promise", "PRO_Helped_Orders"], "unique_id": "model.dbt_datanl_prod.PRO_Helped_Orders", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "gsheet_Promise\\PRO_Helped_Orders.sql", "original_file_path": "models\\gsheet_Promise\\PRO_Helped_Orders.sql", "name": "PRO_Helped_Orders", "alias": "PRO_Helped_Orders", "checksum": {"name": "sha256", "checksum": "e776efe57280a9221fab953091c88f2bf60b7cc2807977a4b0c6a1e56f188e72"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\gsheet_Promise\\PRO_Helped_Orders.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\gsheet_Promise\\PRO_Helped_Orders.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "gsheet_Promise", "materialized": "table"}, "created_at": 1658834103.4971757, "compiled_sql": "select *\r\n\r\nfrom stg_gsheet_Promise.PRO_Helped_Orders", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`gsheet_Promise`.`PRO_Helped_Orders`"}, "model.dbt_datanl_prod.CO2_Extraction": {"raw_sql": "select *\r\n\r\nfrom stg_gsheet_Promise.CO2_Extraction", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "gsheet_Promise", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "gsheet_Promise", "fqn": ["dbt_datanl_prod", "gsheet_Promise", "CO2_Extraction"], "unique_id": "model.dbt_datanl_prod.CO2_Extraction", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "gsheet_Promise\\CO2_Extraction.sql", "original_file_path": "models\\gsheet_Promise\\CO2_Extraction.sql", "name": "CO2_Extraction", "alias": "CO2_Extraction", "checksum": {"name": "sha256", "checksum": "3cb7905452e59597e053d392d306279bd6a13289a56672a4c4997b6d0dd86f91"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\gsheet_Promise\\CO2_Extraction.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\gsheet_Promise\\CO2_Extraction.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "gsheet_Promise", "materialized": "table"}, "created_at": 1658834103.499176, "compiled_sql": "select *\r\n\r\nfrom stg_gsheet_Promise.CO2_Extraction", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`gsheet_Promise`.`CO2_Extraction`"}, "model.dbt_datanl_prod.Sustainability_Awareness_Scores": {"raw_sql": "select *\r\n\r\nfrom stg_gsheet_Sustainability.Sustainability_Awareness_Scores", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "gsheet_Sustainability", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "gsheet_Sustainability", "fqn": ["dbt_datanl_prod", "gsheet_Sustainability", "Sustainability_Awareness_Scores"], "unique_id": "model.dbt_datanl_prod.Sustainability_Awareness_Scores", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "gsheet_Sustainability\\Sustainability_Awareness_Scores.sql", "original_file_path": "models\\gsheet_Sustainability\\Sustainability_Awareness_Scores.sql", "name": "Sustainability_Awareness_Scores", "alias": "Sustainability_Awareness_Scores", "checksum": {"name": "sha256", "checksum": "f5b1f252859bb9ee4e5b73358613837f5fbb1b8d8b6333ecafc590c1741775dd"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\gsheet_Sustainability\\Sustainability_Awareness_Scores.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\gsheet_Sustainability\\Sustainability_Awareness_Scores.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "gsheet_Sustainability", "materialized": "table"}, "created_at": 1658834103.5011764, "compiled_sql": "select *\r\n\r\nfrom stg_gsheet_Sustainability.Sustainability_Awareness_Scores", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`gsheet_Sustainability`.`Sustainability_Awareness_Scores`"}, "model.dbt_datanl_prod.zendesk_customf": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_zendesk', 'zendesk_customf') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_zendesk.zendesk_customf"]}, "config": {"enabled": true, "alias": null, "schema": "ext_Zendesk", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "ext_Zendesk", "fqn": ["dbt_datanl_prod", "ext_Zendesk", "zendesk_customf"], "unique_id": "model.dbt_datanl_prod.zendesk_customf", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "ext_Zendesk\\zendesk_customf.sql", "original_file_path": "models\\ext_Zendesk\\zendesk_customf.sql", "name": "zendesk_customf", "alias": "zendesk_customf", "checksum": {"name": "sha256", "checksum": "975a094e9f646a7dc44d0d6aaeb02e12d8eaa03fbf97aee3558fd10de2bf76cc"}, "tags": [], "refs": [], "sources": [["stg_zendesk", "zendesk_customf"]], "description": "A test dbt customf model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {"project_name": "zendesk", "maturity": "dev", "version": 0.2}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_datanl_prod://models\\ext_Zendesk\\index.yml", "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\ext_Zendesk\\zendesk_customf.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\ext_Zendesk\\zendesk_customf.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "ext_Zendesk", "materialized": "table"}, "created_at": 1658834103.6245124, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_zendesk`.`zendesk_customf`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`ext_Zendesk`.`zendesk_customf`"}, "model.dbt_datanl_prod.zendesk_tickets": {"raw_sql": "select *\r\n\r\nfrom {{ source('stg_zendesk', 'zendesk_tickets') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.dbt_datanl_prod.stg_zendesk.zendesk_tickets"]}, "config": {"enabled": true, "alias": null, "schema": "ext_Zendesk", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "ext_Zendesk", "fqn": ["dbt_datanl_prod", "ext_Zendesk", "zendesk_tickets"], "unique_id": "model.dbt_datanl_prod.zendesk_tickets", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "ext_Zendesk\\zendesk_tickets.sql", "original_file_path": "models\\ext_Zendesk\\zendesk_tickets.sql", "name": "zendesk_tickets", "alias": "zendesk_tickets", "checksum": {"name": "sha256", "checksum": "37565fbe1d256cea2faf386a58c189e8986a2023f3a277ba1a41a1558a0d2aae"}, "tags": [], "refs": [], "sources": [["stg_zendesk", "zendesk_tickets"]], "description": "A test dbt model for zendesk tickets", "columns": {"ticket_id": {"name": "ticket_id", "description": "The primary key for this table", "meta": {"project_name": "zendesk", "maturity": "dev", "version": 0.2}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_datanl_prod://models\\ext_Zendesk\\index.yml", "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\ext_Zendesk\\zendesk_tickets.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\ext_Zendesk\\zendesk_tickets.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "ext_Zendesk", "materialized": "table"}, "created_at": 1658834103.6225119, "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`stg_zendesk`.`zendesk_tickets`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`ext_Zendesk`.`zendesk_tickets`"}, "model.dbt_datanl_prod.f_delivery_detail_last_four_years": {"raw_sql": "SELECT * FROM {{ ref('f_delivery_detail_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('f_delivery_detail_2021') }}\r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('f_delivery_detail_2020') }}\r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('f_delivery_detail_2019') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbt_datanl_prod.f_delivery_detail_current", "model.dbt_datanl_prod.f_delivery_detail_2021", "model.dbt_datanl_prod.f_delivery_detail_2020", "model.dbt_datanl_prod.f_delivery_detail_2019"]}, "config": {"enabled": true, "alias": null, "schema": "0_marts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "0_marts", "fqn": ["dbt_datanl_prod", "0_marts", "f_delivery_detail_last_four_years"], "unique_id": "model.dbt_datanl_prod.f_delivery_detail_last_four_years", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "0_marts\\f_delivery_detail_last_four_years.sql", "original_file_path": "models\\0_marts\\f_delivery_detail_last_four_years.sql", "name": "f_delivery_detail_last_four_years", "alias": "f_delivery_detail_last_four_years", "checksum": {"name": "sha256", "checksum": "68bd679a8a59313773fca877da2d9bece103265c2d08f929b384d5aad3cbf7e0"}, "tags": [], "refs": [["f_delivery_detail_current"], ["f_delivery_detail_2021"], ["f_delivery_detail_2020"], ["f_delivery_detail_2019"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\0_marts\\f_delivery_detail_last_four_years.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\0_marts\\f_delivery_detail_last_four_years.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "0_marts", "materialized": "view"}, "created_at": 1658834103.5081778, "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_delivery_detail_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_delivery_detail_2021`\n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_delivery_detail_2020`\n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_delivery_detail_2019`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`0_marts`.`f_delivery_detail_last_four_years`"}, "model.dbt_datanl_prod.f_transaction_detail_last_two_years": {"raw_sql": "SELECT * FROM {{ ref('f_transaction_detail_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('f_transaction_detail_2021') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbt_datanl_prod.f_transaction_detail_current", "model.dbt_datanl_prod.f_transaction_detail_2021"]}, "config": {"enabled": true, "alias": null, "schema": "0_marts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "0_marts", "fqn": ["dbt_datanl_prod", "0_marts", "f_transaction_detail_last_two_years"], "unique_id": "model.dbt_datanl_prod.f_transaction_detail_last_two_years", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "0_marts\\f_transaction_detail_last_two_years.sql", "original_file_path": "models\\0_marts\\f_transaction_detail_last_two_years.sql", "name": "f_transaction_detail_last_two_years", "alias": "f_transaction_detail_last_two_years", "checksum": {"name": "sha256", "checksum": "75a2519e75a1c85e4de2e0c28536bc1f20ba974505cb7935dc58dc258f620cc9"}, "tags": [], "refs": [["f_transaction_detail_current"], ["f_transaction_detail_2021"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\0_marts\\f_transaction_detail_last_two_years.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\0_marts\\f_transaction_detail_last_two_years.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "0_marts", "materialized": "view"}, "created_at": 1658834103.5101783, "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_transaction_detail_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_transaction_detail_2021`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`0_marts`.`f_transaction_detail_last_two_years`"}, "model.dbt_datanl_prod.f_transaction_detail_last_four_years": {"raw_sql": "SELECT * FROM {{ ref('f_transaction_detail_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('f_transaction_detail_2021') }}\r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('f_transaction_detail_2020') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('f_transaction_detail_2019') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbt_datanl_prod.f_transaction_detail_current", "model.dbt_datanl_prod.f_transaction_detail_2021", "model.dbt_datanl_prod.f_transaction_detail_2020", "model.dbt_datanl_prod.f_transaction_detail_2019"]}, "config": {"enabled": true, "alias": null, "schema": "0_marts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "0_marts", "fqn": ["dbt_datanl_prod", "0_marts", "f_transaction_detail_last_four_years"], "unique_id": "model.dbt_datanl_prod.f_transaction_detail_last_four_years", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "0_marts\\f_transaction_detail_last_four_years.sql", "original_file_path": "models\\0_marts\\f_transaction_detail_last_four_years.sql", "name": "f_transaction_detail_last_four_years", "alias": "f_transaction_detail_last_four_years", "checksum": {"name": "sha256", "checksum": "42c1bd21eef2dd2b5fa01b11ff4fe2df975ca7ada2e2f376f99ba7f3157a2e90"}, "tags": [], "refs": [["f_transaction_detail_current"], ["f_transaction_detail_2021"], ["f_transaction_detail_2020"], ["f_transaction_detail_2019"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\0_marts\\f_transaction_detail_last_four_years.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\0_marts\\f_transaction_detail_last_four_years.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "0_marts", "materialized": "view"}, "created_at": 1658834103.5131788, "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_transaction_detail_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_transaction_detail_2021`\n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_transaction_detail_2020` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_transaction_detail_2019`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`0_marts`.`f_transaction_detail_last_four_years`"}, "model.dbt_datanl_prod.f_delivery_detail_last_two_years": {"raw_sql": "SELECT * FROM {{ ref('f_delivery_detail_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('f_delivery_detail_2021') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbt_datanl_prod.f_delivery_detail_current", "model.dbt_datanl_prod.f_delivery_detail_2021"]}, "config": {"enabled": true, "alias": null, "schema": "0_marts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "0_marts", "fqn": ["dbt_datanl_prod", "0_marts", "f_delivery_detail_last_two_years"], "unique_id": "model.dbt_datanl_prod.f_delivery_detail_last_two_years", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "0_marts\\f_delivery_detail_last_two_years.sql", "original_file_path": "models\\0_marts\\f_delivery_detail_last_two_years.sql", "name": "f_delivery_detail_last_two_years", "alias": "f_delivery_detail_last_two_years", "checksum": {"name": "sha256", "checksum": "938fa4dd2499c5551cec6f7b3892d801b0f29aae3db13610d0f49547cc1d38ed"}, "tags": [], "refs": [["f_delivery_detail_current"], ["f_delivery_detail_2021"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\0_marts\\f_delivery_detail_last_two_years.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\0_marts\\f_delivery_detail_last_two_years.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "0_marts", "materialized": "view"}, "created_at": 1658834103.51518, "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_delivery_detail_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_delivery_detail_2021`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`0_marts`.`f_delivery_detail_last_two_years`"}, "model.dbt_datanl_prod.f_delivery_header_last_two_years": {"raw_sql": "SELECT * FROM {{ ref('f_delivery_header_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('f_delivery_header_2021') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbt_datanl_prod.f_delivery_header_current", "model.dbt_datanl_prod.f_delivery_header_2021"]}, "config": {"enabled": true, "alias": null, "schema": "0_marts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "0_marts", "fqn": ["dbt_datanl_prod", "0_marts", "f_delivery_header_last_two_years"], "unique_id": "model.dbt_datanl_prod.f_delivery_header_last_two_years", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "0_marts\\f_delivery_header_last_two_years.sql", "original_file_path": "models\\0_marts\\f_delivery_header_last_two_years.sql", "name": "f_delivery_header_last_two_years", "alias": "f_delivery_header_last_two_years", "checksum": {"name": "sha256", "checksum": "e638043e4f0bf21c37da4f22bfb756758bd20a017c2a9c7caf2d4189db11bc26"}, "tags": [], "refs": [["f_delivery_header_current"], ["f_delivery_header_2021"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\0_marts\\f_delivery_header_last_two_years.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\0_marts\\f_delivery_header_last_two_years.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "0_marts", "materialized": "view"}, "created_at": 1658834103.51518, "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_delivery_header_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_delivery_header_2021`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`0_marts`.`f_delivery_header_last_two_years`"}, "model.dbt_datanl_prod.f_transaction_sustainable_last_two_years": {"raw_sql": "SELECT * FROM {{ ref('f_transaction_sustainable_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('f_transaction_sustainable_2021') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbt_datanl_prod.f_transaction_sustainable_current", "model.dbt_datanl_prod.f_transaction_sustainable_2021"]}, "config": {"enabled": true, "alias": null, "schema": "0_marts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "0_marts", "fqn": ["dbt_datanl_prod", "0_marts", "f_transaction_sustainable_last_two_years"], "unique_id": "model.dbt_datanl_prod.f_transaction_sustainable_last_two_years", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "0_marts\\f_transaction_sustainable_last_two_years.sql", "original_file_path": "models\\0_marts\\f_transaction_sustainable_last_two_years.sql", "name": "f_transaction_sustainable_last_two_years", "alias": "f_transaction_sustainable_last_two_years", "checksum": {"name": "sha256", "checksum": "48015f007ebb2e5affc9c5911a3ff520ae29765cc0c82eff3a075d0b92b4e911"}, "tags": [], "refs": [["f_transaction_sustainable_current"], ["f_transaction_sustainable_2021"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\0_marts\\f_transaction_sustainable_last_two_years.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\0_marts\\f_transaction_sustainable_last_two_years.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "0_marts", "materialized": "view"}, "created_at": 1658834103.5211868, "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_transaction_sustainable_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`int_redshift`.`f_transaction_sustainable_2021`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`0_marts`.`f_transaction_sustainable_last_two_years`"}, "model.dbt_datanl_prod.stg_transactions": {"raw_sql": "-- Subquery: gets some fields only available in the delivery table that are required for the main query\r\nWITH fdd AS (\r\n\r\n  SELECT the_transaction_id, \r\n\r\n    dyh_delivery_id,\r\n\r\n    dyh_num_line_delivery,\r\n\r\n    tdt_num_line, \r\n\r\n    dyh_date_canceled,\t\r\n\r\n    dyh_date_ready_for_pickup,\t\r\n\r\n    dyh_date_expected_delivery,\t\r\n\r\n    dyh_date_actual_delivery,\t\r\n\r\n    dyh_date_expected_shipment,\t\r\n\r\n    dyh_date_actual_shipment,\r\n\r\n    dyh_date_stock_shortage,\r\n\r\n    dyh_date_invoiced,\r\n\r\n    dyh_date_return_received,\r\n\r\n    dyh_date_ready_for_picking,\r\n\r\n    but_idr_business_unit_fiscal,\t\r\n\r\n    but_idr_business_unit_economical,\t\r\n\r\n    but_idr_business_unit_sender,\t\r\n\r\n    but_idr_business_unit_clic_n_collect,\t\r\n\r\n    but_idr_business_unit_receiver,\r\n\r\n    but_idr_business_unit_stock_origin,\r\n\r\n    rdt_idr_reallocated_digital_type,\r\n\r\n    frm_idr_freight_method,\r\n\r\n    frm_delivery_type,\r\n\r\n    dyd_purchase_order_number,\r\n\r\n    dyh_shipping_type,\r\n\r\n    sht_idr_shipping_type,\r\n\r\n    dyh_tracking_number,\r\n\r\n    cct_idr_customer_channel_type,\r\n\r\n    dyh_zip_code,\r\n\r\n    f_margin_real, \r\n\r\n  FROM {{ ref('f_delivery_detail_last_two_years') }}\r\n\r\n),\r\n\r\n\r\n\r\n-- Subquery: gets mdl_num_model_r3 from the sku table which is required for filtering rental transactions\r\n\r\ndsk AS (\r\n\r\n  SELECT sku_idr_sku,\r\n\r\n  mdl_num_model_r3\r\n\r\n  FROM {{ ref('d_sku') }} \r\n\r\n),\r\n\r\n\r\n\r\n-- Subquery: gets dyh_stock_origin_type from the delivery header table which is required in the main query\r\n\r\nfdh AS (\r\n\r\n  SELECT DISTINCT dyh_delivery_id,\r\n\r\n    dyh_stock_origin_type\r\n\r\n  FROM {{ ref('f_delivery_header_last_two_years') }}\r\n\r\n  WHERE dyh_shipping_type <> 'DKT:ReturnGroup'\r\n\r\n  AND dyh_delivery_id LIKE 'sgnl%'\r\n\r\n),\r\n\r\n\r\n\r\n-- Subquery:\r\n\r\nfph AS (\r\n\r\n  SELECT DISTINCT LOWER(NB_shipping_group) AS dyh_delivery_id\r\n\r\n  FROM {{ ref('PRO_Helped_Orders') }} \r\n\r\n)\r\n\r\n\r\n\r\n-- Main Query\r\n\r\nSELECT ftd.the_transaction_id,\r\n\r\n  ftd.tdt_num_line,\r\n\r\n  fdd.dyh_delivery_id,\r\n\r\n  fdd.dyh_num_line_delivery,\r\n\r\n  ftd.the_date_transaction,\r\n\r\n  -- Replace the_date_authorized of offline returns with null\r\n\r\n  CASE \r\n\r\n    WHEN ftd.the_to_type = 'offline' AND ftd.tdt_type_detail = 'return' THEN NULL \r\n\r\n    ELSE ftd.the_date_authorized\r\n\r\n  END AS the_date_authorized,\r\n\r\n  ftd.tdt_date_to_ordered,\r\n\r\n  ftd.tdt_date_to_returned,\r\n\r\n  fdd.dyh_date_canceled,\t\r\n\r\n  fdd.dyh_date_ready_for_pickup,\t\r\n\r\n  fdd.dyh_date_expected_delivery,\t\r\n\r\n  fdd.dyh_date_actual_delivery,\t\r\n\r\n  fdd.dyh_date_expected_shipment,\t\r\n\r\n  fdd.dyh_date_actual_shipment,\r\n\r\n  fdd.dyh_date_stock_shortage,\r\n\r\n  fdd.dyh_date_invoiced,\r\n\r\n  -- Replace dyh_date_return_received of offline returns with the_date_authorized\r\n\r\n  CASE \r\n\r\n    WHEN ftd.the_to_type = 'offline' AND ftd.tdt_type_detail = 'return' THEN ftd.tdt_date_event\r\n\r\n    ELSE fdd.dyh_date_return_received\r\n\r\n  END AS dyh_date_return_received,\r\n\r\n  fdd.dyh_date_ready_for_picking,\r\n\r\n  -- Calculate warehouse shipping delay and grouping\r\n\r\n  DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) AS shipping_delay,\r\n\r\n  CASE\r\n\r\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) > 0 THEN 'Delayed'\r\n\r\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) = 0 THEN 'On Time'\r\n\r\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) < 0 THEN 'Early'\r\n\r\n    ELSE NULL\r\n\r\n  END AS shipping_delay_grouping,\r\n\r\n  ftd.the_transaction_status,\r\n\r\n  ftd.sku_idr_sku,\r\n\r\n  ftd.tdt_item_id,\r\n\r\n  ftd.mhy_idr_merchandise_hie,\r\n\r\n  ftd.tdt_type_detail,\r\n\r\n  -- Replace decathlon.nl with the relevant store for digital in store transactions\r\n\r\n  CASE \r\n\r\n    WHEN fdd.rdt_idr_reallocated_digital_type IN (2,6,7,8) THEN fdd.but_idr_business_unit_economical \r\n\r\n    ELSE ftd.but_idr_business_unit \r\n\r\n  END AS but_idr_business_unit,\r\n\r\n  fdd.but_idr_business_unit_fiscal,\t\r\n\r\n  fdd.but_idr_business_unit_economical,\t\r\n\r\n  fdd.but_idr_business_unit_sender,\t\r\n\r\n  fdd.but_idr_business_unit_clic_n_collect,\t\r\n\r\n  fdd.but_idr_business_unit_receiver,\r\n\r\n  fdd.but_idr_business_unit_stock_origin,\r\n\r\n  -- Replace the digital type null values of offline transactions with 0 (Phsyical)\r\n\r\n  CASE \r\n\r\n    WHEN ftd.the_to_type = 'offline' THEN 0\r\n\r\n    ELSE fdd.rdt_idr_reallocated_digital_type\r\n\r\n  END AS rdt_idr_reallocated_digital_type,\r\n\r\n  ftd.cnt_idr_country,\r\n\r\n  ftd.tpc_idr_touchpoint_channel_type,\r\n\r\n  ftd.cur_idr_currency,\r\n\r\n  ftd.rrn_idr_return_reason,\r\n\r\n  ftd.rty_idr_return_type,\r\n\r\n  fdd.frm_idr_freight_method,\r\n\r\n  fdd.frm_delivery_type,\r\n\r\n  fdd.dyd_purchase_order_number,\r\n\r\n  fdd.dyh_shipping_type,\r\n\r\n  fdd.sht_idr_shipping_type,\r\n\r\n  fdd.dyh_tracking_number,\r\n\r\n  fdd.cct_idr_customer_channel_type,\r\n\r\n  ftd.ctm_customer_id,\r\n\r\n  ftd.ctm_zip_code,\r\n\r\n  fdd.dyh_zip_code,\r\n\r\n  -- Replace online with offline for digital in store transactions\r\n\r\n  CASE \r\n\r\n    WHEN fdd.rdt_idr_reallocated_digital_type IN (2,6,7,8) THEN 'offline' \r\n\r\n    ELSE ftd.the_to_type \r\n\r\n  END AS the_to_type,\r\n\r\n  ftd.tdt_item_type,\r\n\r\n  ftd.the_order_number,\r\n\r\n  ftd.tdt_serial_number_sku,\r\n\r\n  ftd.f_pri_regular_sales_unit,\r\n\r\n  ftd.f_to_tax_in,\r\n\r\n  ftd.f_to_tax_ex,\r\n\r\n  ftd.f_amt_discount,\r\n\r\n  ftd.f_qty_item,\r\n\r\n  ftd.f_pri_unit_cost_price,\r\n\r\n  -- Replace margin estimate by margin real if we have margin real\r\n\r\n  CASE \r\n\r\n    WHEN fdd.f_margin_real IS NOT NULL THEN fdd.f_margin_real \r\n\r\n    ELSE ftd.f_margin_estimate \r\n\r\n  END AS f_margin,\r\n\r\n  ftd.f_amt_tax,\r\n\r\n  -- Replace sustainable sales categories with labels\r\n\r\n  CASE \r\n\r\n    WHEN fts.tds_top_second_life = 1 THEN 'Second Life'\r\n\r\n    WHEN fts.tds_top_buy_back = 1 THEN 'BuyBack' \r\n\r\n    WHEN fts.tds_top_workshop = 1 THEN 'Workshop'\r\n\r\n    WHEN dsk.mdl_num_model_r3\tIN (8618395,8664824,8664825,8664828,8618397) THEN 'Rental'\r\n\r\n    WHEN fts.tds_top_eco_conception = 1 THEN 'Ecodesign'\r\n\r\n    ELSE NULL\r\n\r\n  END AS sustainable_group,\r\n\r\n  fdh.dyh_stock_origin_type,\r\n\r\n  -- Add pro_helped\r\n\r\n  CASE \r\n\r\n    WHEN fdd.dyh_delivery_id IN (SELECT dyh_delivery_id FROM fph) THEN 1 \r\n\r\n    ELSE 0 \r\n\r\n  END AS pro_helped\r\n\r\nFROM {{ ref('f_transaction_detail_last_two_years') }} ftd\r\n\r\n-- Joins were checked for duplicates\r\n\r\nLEFT JOIN fdd \r\n\r\n  ON ftd.the_transaction_id = fdd.the_transaction_id AND ftd.tdt_num_line = fdd.tdt_num_line\r\n\r\nLEFT JOIN {{ ref('f_transaction_sustainable_last_two_years') }} fts \r\n\r\n  ON ftd.the_transaction_id = fts.the_transaction_id AND ftd.tdt_num_line = fts.tdt_num_line\r\n\r\nLEFT JOIN dsk\r\n\r\n  ON ftd.sku_idr_sku = dsk.sku_idr_sku\r\n\r\nLEFT JOIN fdh\r\n\r\n  ON fdd.dyh_delivery_id = fdh.dyh_delivery_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbt_datanl_prod.f_delivery_detail_last_two_years", "model.dbt_datanl_prod.d_sku", "model.dbt_datanl_prod.f_delivery_header_last_two_years", "model.dbt_datanl_prod.PRO_Helped_Orders", "model.dbt_datanl_prod.f_transaction_detail_last_two_years", "model.dbt_datanl_prod.f_transaction_sustainable_last_two_years"]}, "config": {"enabled": true, "alias": null, "schema": "0_marts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datanl-prod-fy0d", "schema": "0_marts", "fqn": ["dbt_datanl_prod", "0_marts", "stg_transactions"], "unique_id": "model.dbt_datanl_prod.stg_transactions", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "0_marts\\stg_transactions.sql", "original_file_path": "models\\0_marts\\stg_transactions.sql", "name": "stg_transactions", "alias": "stg_transactions", "checksum": {"name": "sha256", "checksum": "917498c6f6f72b62b82e01e1980c5a1e3548015162d10fd683e922cd34e0bb5b"}, "tags": [], "refs": [["f_delivery_detail_last_two_years"], ["d_sku"], ["f_delivery_header_last_two_years"], ["PRO_Helped_Orders"], ["f_transaction_detail_last_two_years"], ["f_transaction_sustainable_last_two_years"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\0_marts\\stg_transactions.sql", "build_path": "docs\\run\\dbt_datanl_prod\\models\\0_marts\\stg_transactions.sql", "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "schema": "0_marts", "materialized": "view"}, "created_at": 1658834103.5231812, "compiled_sql": "-- Subquery: gets some fields only available in the delivery table that are required for the main query\nWITH fdd AS (\n\n  SELECT the_transaction_id, \n\n    dyh_delivery_id,\n\n    dyh_num_line_delivery,\n\n    tdt_num_line, \n\n    dyh_date_canceled,\t\n\n    dyh_date_ready_for_pickup,\t\n\n    dyh_date_expected_delivery,\t\n\n    dyh_date_actual_delivery,\t\n\n    dyh_date_expected_shipment,\t\n\n    dyh_date_actual_shipment,\n\n    dyh_date_stock_shortage,\n\n    dyh_date_invoiced,\n\n    dyh_date_return_received,\n\n    dyh_date_ready_for_picking,\n\n    but_idr_business_unit_fiscal,\t\n\n    but_idr_business_unit_economical,\t\n\n    but_idr_business_unit_sender,\t\n\n    but_idr_business_unit_clic_n_collect,\t\n\n    but_idr_business_unit_receiver,\n\n    but_idr_business_unit_stock_origin,\n\n    rdt_idr_reallocated_digital_type,\n\n    frm_idr_freight_method,\n\n    frm_delivery_type,\n\n    dyd_purchase_order_number,\n\n    dyh_shipping_type,\n\n    sht_idr_shipping_type,\n\n    dyh_tracking_number,\n\n    cct_idr_customer_channel_type,\n\n    dyh_zip_code,\n\n    f_margin_real, \n\n  FROM `datanl-prod-fy0d`.`0_marts`.`f_delivery_detail_last_two_years`\n\n),\n\n\n\n-- Subquery: gets mdl_num_model_r3 from the sku table which is required for filtering rental transactions\n\ndsk AS (\n\n  SELECT sku_idr_sku,\n\n  mdl_num_model_r3\n\n  FROM `datanl-prod-fy0d`.`int_redshift`.`d_sku` \n\n),\n\n\n\n-- Subquery: gets dyh_stock_origin_type from the delivery header table which is required in the main query\n\nfdh AS (\n\n  SELECT DISTINCT dyh_delivery_id,\n\n    dyh_stock_origin_type\n\n  FROM `datanl-prod-fy0d`.`0_marts`.`f_delivery_header_last_two_years`\n\n  WHERE dyh_shipping_type <> 'DKT:ReturnGroup'\n\n  AND dyh_delivery_id LIKE 'sgnl%'\n\n),\n\n\n\n-- Subquery:\n\nfph AS (\n\n  SELECT DISTINCT LOWER(NB_shipping_group) AS dyh_delivery_id\n\n  FROM `datanl-prod-fy0d`.`gsheet_Promise`.`PRO_Helped_Orders` \n\n)\n\n\n\n-- Main Query\n\nSELECT ftd.the_transaction_id,\n\n  ftd.tdt_num_line,\n\n  fdd.dyh_delivery_id,\n\n  fdd.dyh_num_line_delivery,\n\n  ftd.the_date_transaction,\n\n  -- Replace the_date_authorized of offline returns with null\n\n  CASE \n\n    WHEN ftd.the_to_type = 'offline' AND ftd.tdt_type_detail = 'return' THEN NULL \n\n    ELSE ftd.the_date_authorized\n\n  END AS the_date_authorized,\n\n  ftd.tdt_date_to_ordered,\n\n  ftd.tdt_date_to_returned,\n\n  fdd.dyh_date_canceled,\t\n\n  fdd.dyh_date_ready_for_pickup,\t\n\n  fdd.dyh_date_expected_delivery,\t\n\n  fdd.dyh_date_actual_delivery,\t\n\n  fdd.dyh_date_expected_shipment,\t\n\n  fdd.dyh_date_actual_shipment,\n\n  fdd.dyh_date_stock_shortage,\n\n  fdd.dyh_date_invoiced,\n\n  -- Replace dyh_date_return_received of offline returns with the_date_authorized\n\n  CASE \n\n    WHEN ftd.the_to_type = 'offline' AND ftd.tdt_type_detail = 'return' THEN ftd.tdt_date_event\n\n    ELSE fdd.dyh_date_return_received\n\n  END AS dyh_date_return_received,\n\n  fdd.dyh_date_ready_for_picking,\n\n  -- Calculate warehouse shipping delay and grouping\n\n  DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) AS shipping_delay,\n\n  CASE\n\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) > 0 THEN 'Delayed'\n\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) = 0 THEN 'On Time'\n\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) < 0 THEN 'Early'\n\n    ELSE NULL\n\n  END AS shipping_delay_grouping,\n\n  ftd.the_transaction_status,\n\n  ftd.sku_idr_sku,\n\n  ftd.tdt_item_id,\n\n  ftd.mhy_idr_merchandise_hie,\n\n  ftd.tdt_type_detail,\n\n  -- Replace decathlon.nl with the relevant store for digital in store transactions\n\n  CASE \n\n    WHEN fdd.rdt_idr_reallocated_digital_type IN (2,6,7,8) THEN fdd.but_idr_business_unit_economical \n\n    ELSE ftd.but_idr_business_unit \n\n  END AS but_idr_business_unit,\n\n  fdd.but_idr_business_unit_fiscal,\t\n\n  fdd.but_idr_business_unit_economical,\t\n\n  fdd.but_idr_business_unit_sender,\t\n\n  fdd.but_idr_business_unit_clic_n_collect,\t\n\n  fdd.but_idr_business_unit_receiver,\n\n  fdd.but_idr_business_unit_stock_origin,\n\n  -- Replace the digital type null values of offline transactions with 0 (Phsyical)\n\n  CASE \n\n    WHEN ftd.the_to_type = 'offline' THEN 0\n\n    ELSE fdd.rdt_idr_reallocated_digital_type\n\n  END AS rdt_idr_reallocated_digital_type,\n\n  ftd.cnt_idr_country,\n\n  ftd.tpc_idr_touchpoint_channel_type,\n\n  ftd.cur_idr_currency,\n\n  ftd.rrn_idr_return_reason,\n\n  ftd.rty_idr_return_type,\n\n  fdd.frm_idr_freight_method,\n\n  fdd.frm_delivery_type,\n\n  fdd.dyd_purchase_order_number,\n\n  fdd.dyh_shipping_type,\n\n  fdd.sht_idr_shipping_type,\n\n  fdd.dyh_tracking_number,\n\n  fdd.cct_idr_customer_channel_type,\n\n  ftd.ctm_customer_id,\n\n  ftd.ctm_zip_code,\n\n  fdd.dyh_zip_code,\n\n  -- Replace online with offline for digital in store transactions\n\n  CASE \n\n    WHEN fdd.rdt_idr_reallocated_digital_type IN (2,6,7,8) THEN 'offline' \n\n    ELSE ftd.the_to_type \n\n  END AS the_to_type,\n\n  ftd.tdt_item_type,\n\n  ftd.the_order_number,\n\n  ftd.tdt_serial_number_sku,\n\n  ftd.f_pri_regular_sales_unit,\n\n  ftd.f_to_tax_in,\n\n  ftd.f_to_tax_ex,\n\n  ftd.f_amt_discount,\n\n  ftd.f_qty_item,\n\n  ftd.f_pri_unit_cost_price,\n\n  -- Replace margin estimate by margin real if we have margin real\n\n  CASE \n\n    WHEN fdd.f_margin_real IS NOT NULL THEN fdd.f_margin_real \n\n    ELSE ftd.f_margin_estimate \n\n  END AS f_margin,\n\n  ftd.f_amt_tax,\n\n  -- Replace sustainable sales categories with labels\n\n  CASE \n\n    WHEN fts.tds_top_second_life = 1 THEN 'Second Life'\n\n    WHEN fts.tds_top_buy_back = 1 THEN 'BuyBack' \n\n    WHEN fts.tds_top_workshop = 1 THEN 'Workshop'\n\n    WHEN dsk.mdl_num_model_r3\tIN (8618395,8664824,8664825,8664828,8618397) THEN 'Rental'\n\n    WHEN fts.tds_top_eco_conception = 1 THEN 'Ecodesign'\n\n    ELSE NULL\n\n  END AS sustainable_group,\n\n  fdh.dyh_stock_origin_type,\n\n  -- Add pro_helped\n\n  CASE \n\n    WHEN fdd.dyh_delivery_id IN (SELECT dyh_delivery_id FROM fph) THEN 1 \n\n    ELSE 0 \n\n  END AS pro_helped\n\nFROM `datanl-prod-fy0d`.`0_marts`.`f_transaction_detail_last_two_years` ftd\n\n-- Joins were checked for duplicates\n\nLEFT JOIN fdd \n\n  ON ftd.the_transaction_id = fdd.the_transaction_id AND ftd.tdt_num_line = fdd.tdt_num_line\n\nLEFT JOIN `datanl-prod-fy0d`.`0_marts`.`f_transaction_sustainable_last_two_years` fts \n\n  ON ftd.the_transaction_id = fts.the_transaction_id AND ftd.tdt_num_line = fts.tdt_num_line\n\nLEFT JOIN dsk\n\n  ON ftd.sku_idr_sku = dsk.sku_idr_sku\n\nLEFT JOIN fdh\n\n  ON fdd.dyh_delivery_id = fdh.dyh_delivery_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datanl-prod-fy0d`.`0_marts`.`stg_transactions`"}, "test.dbt_datanl_prod.unique_d_sku_sku_idr_sku.990f81e976": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sku_idr_sku", "model": "{{ get_where_subquery(ref('d_sku')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_datanl_prod.d_sku"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datanl-prod-fy0d", "schema": "dbt_test__audit", "fqn": ["dbt_datanl_prod", "int_redshift", "unique_d_sku_sku_idr_sku"], "unique_id": "test.dbt_datanl_prod.unique_d_sku_sku_idr_sku.990f81e976", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "unique_d_sku_sku_idr_sku.sql", "original_file_path": "models\\int_redshift\\d_sku.yml", "name": "unique_d_sku_sku_idr_sku", "alias": "unique_d_sku_sku_idr_sku", "checksum": {"name": "none", "checksum": ""}, "tags": ["External db2", "Internal db1", "dbt 1"], "refs": [["d_sku"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658834103.6195114, "column_name": "sku_idr_sku", "file_key_name": "models.d_sku"}, "test.dbt_datanl_prod.not_null_d_sku_sku_idr_sku.f05fb4ac17": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sku_idr_sku", "model": "{{ get_where_subquery(ref('d_sku')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_datanl_prod.d_sku"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datanl-prod-fy0d", "schema": "dbt_test__audit", "fqn": ["dbt_datanl_prod", "int_redshift", "not_null_d_sku_sku_idr_sku"], "unique_id": "test.dbt_datanl_prod.not_null_d_sku_sku_idr_sku.f05fb4ac17", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "not_null_d_sku_sku_idr_sku.sql", "original_file_path": "models\\int_redshift\\d_sku.yml", "name": "not_null_d_sku_sku_idr_sku", "alias": "not_null_d_sku_sku_idr_sku", "checksum": {"name": "none", "checksum": ""}, "tags": ["External db2", "Internal db1", "dbt 1"], "refs": [["d_sku"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658834103.6205115, "column_name": "sku_idr_sku", "file_key_name": "models.d_sku"}, "test.dbt_datanl_prod.unique_zendesk_tickets_ticket_id.033781ea12": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ticket_id", "model": "{{ get_where_subquery(ref('zendesk_tickets')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_datanl_prod.zendesk_tickets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datanl-prod-fy0d", "schema": "dbt_test__audit", "fqn": ["dbt_datanl_prod", "ext_Zendesk", "unique_zendesk_tickets_ticket_id"], "unique_id": "test.dbt_datanl_prod.unique_zendesk_tickets_ticket_id.033781ea12", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "unique_zendesk_tickets_ticket_id.sql", "original_file_path": "models\\ext_Zendesk\\index.yml", "name": "unique_zendesk_tickets_ticket_id", "alias": "unique_zendesk_tickets_ticket_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["zendesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658834103.6245124, "column_name": "ticket_id", "file_key_name": "models.zendesk_tickets"}, "test.dbt_datanl_prod.not_null_zendesk_tickets_ticket_id.3e2640a89b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticket_id", "model": "{{ get_where_subquery(ref('zendesk_tickets')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_datanl_prod.zendesk_tickets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datanl-prod-fy0d", "schema": "dbt_test__audit", "fqn": ["dbt_datanl_prod", "ext_Zendesk", "not_null_zendesk_tickets_ticket_id"], "unique_id": "test.dbt_datanl_prod.not_null_zendesk_tickets_ticket_id.3e2640a89b", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "not_null_zendesk_tickets_ticket_id.sql", "original_file_path": "models\\ext_Zendesk\\index.yml", "name": "not_null_zendesk_tickets_ticket_id", "alias": "not_null_zendesk_tickets_ticket_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["zendesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658834103.6265125, "column_name": "ticket_id", "file_key_name": "models.zendesk_tickets"}, "test.dbt_datanl_prod.unique_zendesk_customf_id.36444af5c9": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('zendesk_customf')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_datanl_prod.zendesk_customf"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datanl-prod-fy0d", "schema": "dbt_test__audit", "fqn": ["dbt_datanl_prod", "ext_Zendesk", "unique_zendesk_customf_id"], "unique_id": "test.dbt_datanl_prod.unique_zendesk_customf_id.36444af5c9", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "unique_zendesk_customf_id.sql", "original_file_path": "models\\ext_Zendesk\\index.yml", "name": "unique_zendesk_customf_id", "alias": "unique_zendesk_customf_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["zendesk_customf"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658834103.6275132, "column_name": "id", "file_key_name": "models.zendesk_customf"}, "test.dbt_datanl_prod.not_null_zendesk_customf_id.0077092197": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('zendesk_customf')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_datanl_prod.zendesk_customf"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datanl-prod-fy0d", "schema": "dbt_test__audit", "fqn": ["dbt_datanl_prod", "ext_Zendesk", "not_null_zendesk_customf_id"], "unique_id": "test.dbt_datanl_prod.not_null_zendesk_customf_id.0077092197", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "not_null_zendesk_customf_id.sql", "original_file_path": "models\\ext_Zendesk\\index.yml", "name": "not_null_zendesk_customf_id", "alias": "not_null_zendesk_customf_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["zendesk_customf"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658834103.6285133, "column_name": "id", "file_key_name": "models.zendesk_customf"}}, "sources": {"source.dbt_datanl_prod.stg_gsheet_Promise.CO2_Extraction": {"fqn": ["dbt_datanl_prod", "stg_gsheet_Promise", "CO2_Extraction"], "database": "datanl-prod-fy0d", "schema": "stg_gsheet_Promise", "unique_id": "source.dbt_datanl_prod.stg_gsheet_Promise.CO2_Extraction", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_gsheet_Promise.yml", "original_file_path": "models\\stg_gsheet_Promise.yml", "name": "CO2_Extraction", "source_name": "stg_gsheet_Promise", "source_description": "", "loader": "", "identifier": "CO2_Extraction", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "https://docs.google.com/spreadsheets/d/1RhiJzGUDy7XE5V00bgLv8dE9lzxH2KS7fpmqnQjgk5k/edit#gid=0", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "GOOGLE_SHEETS", "skip_leading_rows": 1}}, "description": "External Google sheet table", "columns": {"Site": {"name": "Site", "description": "Site ID", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "Year": {"name": "Year", "description": "Year", "meta": {}, "data_type": "int", "quote": null, "tags": []}, "Month": {"name": "Month", "description": "Month", "meta": {}, "data_type": "int", "quote": null, "tags": []}, "Sum_kg_CO2e": {"name": "Sum_kg_CO2e", "description": "Sum_kg_CO2e", "meta": {}, "data_type": "int", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_gsheet_Promise`.`CO2_Extraction`", "created_at": 1658834103.6295135}, "source.dbt_datanl_prod.stg_gsheet_Promise.PRO_Helped_Orders": {"fqn": ["dbt_datanl_prod", "stg_gsheet_Promise", "PRO_Helped_Orders"], "database": "datanl-prod-fy0d", "schema": "stg_gsheet_Promise", "unique_id": "source.dbt_datanl_prod.stg_gsheet_Promise.PRO_Helped_Orders", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_gsheet_Promise.yml", "original_file_path": "models\\stg_gsheet_Promise.yml", "name": "PRO_Helped_Orders", "source_name": "stg_gsheet_Promise", "source_description": "", "loader": "", "identifier": "PRO_Helped_Orders", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "https://docs.google.com/spreadsheets/d/14kKfeXPYPbFPT3d-cXKt9JPTndQWQDBpD7bTj0L39U8/edit#gid=0", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "GOOGLE_SHEETS", "skip_leading_rows": 1}}, "description": "External Google sheet table", "columns": {"Date": {"name": "Date", "description": "Date", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "NB_shipping_group": {"name": "NB_shipping_group", "description": "NB_shipping_group", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_gsheet_Promise`.`PRO_Helped_Orders`", "created_at": 1658834103.6295135}, "source.dbt_datanl_prod.stg_gsheet_Sustainability.Sustainability_Awareness_Scores": {"fqn": ["dbt_datanl_prod", "stg_gsheet_Sustainability", "Sustainability_Awareness_Scores"], "database": "datanl-prod-fy0d", "schema": "stg_gsheet_Sustainability", "unique_id": "source.dbt_datanl_prod.stg_gsheet_Sustainability.Sustainability_Awareness_Scores", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_gsheet_Sustainability.yml", "original_file_path": "models\\stg_gsheet_Sustainability.yml", "name": "Sustainability_Awareness_Scores", "source_name": "stg_gsheet_Sustainability", "source_description": "", "loader": "", "identifier": "Sustainability_Awareness_Scores", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "https://docs.google.com/spreadsheets/d/1cPM8lsFK5hiQrkxsnXUCPSAzXubkL1S91PZwTHDtigc/edit#gid=1036531530", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "GOOGLE_SHEETS", "skip_leading_rows": 1}}, "description": "External Google sheet table", "columns": {"Year": {"name": "Year", "description": "Year", "meta": {}, "data_type": "int", "quote": null, "tags": []}, "Quarter": {"name": "Quarter", "description": "Quarter", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "Business_Unit_ID": {"name": "Business_Unit_ID", "description": "Business Unit ID", "meta": {}, "data_type": "numeric", "quote": null, "tags": []}, "Business_Unit": {"name": "Business_Unit", "description": "Business_Unit", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "Social_SD_Score": {"name": "Social_SD_Score", "description": "SOCIAL SD Assessment Score", "meta": {}, "data_type": "numeric", "quote": null, "tags": []}, "Planet_SD_Score": {"name": "Planet_SD_Score", "description": "SOCIAL SD Assessment Score", "meta": {}, "data_type": "numeric", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_gsheet_Sustainability`.`Sustainability_Awareness_Scores`", "created_at": 1658834103.6295135}, "source.dbt_datanl_prod.stg_zendesk.zendesk_tickets": {"fqn": ["dbt_datanl_prod", "stg_zendesk", "zendesk_tickets"], "database": "datanl-prod-fy0d", "schema": "stg_zendesk", "unique_id": "source.dbt_datanl_prod.stg_zendesk.zendesk_tickets", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_zendesk.yml", "original_file_path": "models\\stg_zendesk.yml", "name": "zendesk_tickets", "source_name": "stg_zendesk", "source_description": "", "loader": "gcloud storage", "identifier": "zendesk_tickets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://decathlon_united_redshift_data/Decathlon_Netherlands/DataLake/CRC/zendesk_tickets.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "csv", "allow_jagged_rows": true, "allow_quoted_newlines": true}}, "description": "External table of zendesk, stored as CSV files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_zendesk`.`zendesk_tickets`", "created_at": 1658834103.6295135}, "source.dbt_datanl_prod.stg_zendesk.zendesk_customf": {"fqn": ["dbt_datanl_prod", "stg_zendesk", "zendesk_customf"], "database": "datanl-prod-fy0d", "schema": "stg_zendesk", "unique_id": "source.dbt_datanl_prod.stg_zendesk.zendesk_customf", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_zendesk.yml", "original_file_path": "models\\stg_zendesk.yml", "name": "zendesk_customf", "source_name": "stg_zendesk", "source_description": "", "loader": "gcloud storage", "identifier": "zendesk_customf", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://decathlon_united_redshift_data/Decathlon_Netherlands/DataLake/CRC/zendesk_customf.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "csv", "allow_jagged_rows": true, "allow_quoted_newlines": true}}, "description": "External table of zendesk, stored as CSV files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_zendesk`.`zendesk_customf`", "created_at": 1658834103.6295135}, "source.dbt_datanl_prod.stg_redshift.d_business_unit": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_business_unit"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_business_unit", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_business_unit", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_business_unit", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_business_unit0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_business_unit`", "created_at": 1658834103.6295135}, "source.dbt_datanl_prod.stg_redshift.d_customer_channel_type": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_customer_channel_type"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_customer_channel_type", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_customer_channel_type", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_customer_channel_type", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_customer_channel_type0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_customer_channel_type`", "created_at": 1658834103.6295135}, "source.dbt_datanl_prod.stg_redshift.d_customers": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_customers"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_customers", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_customers", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_customers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_customers0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_customers`", "created_at": 1658834103.6295135}, "source.dbt_datanl_prod.stg_redshift.d_day": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_day"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_day", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_day", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_day", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_day0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_day`", "created_at": 1658834103.6295135}, "source.dbt_datanl_prod.stg_redshift.d_delivery_type": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_delivery_type"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_delivery_type", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_delivery_type", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_delivery_type", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_delivery_type0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_delivery_type`", "created_at": 1658834103.6295135}, "source.dbt_datanl_prod.stg_redshift.d_department": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_department"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_department", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_department", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_department", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_department0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_department`", "created_at": 1658834103.6295135}, "source.dbt_datanl_prod.stg_redshift.d_family": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_family"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_family", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_family", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_family", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_family0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_family`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_freight_method": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_freight_method"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_freight_method", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_freight_method", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_freight_method", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_freight_method0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_freight_method`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_label": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_label"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_label", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_label", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_label", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_label0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_label`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_merchandise_hierarchy": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_merchandise_hierarchy"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_merchandise_hierarchy", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_merchandise_hierarchy", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_merchandise_hierarchy", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_merchandise_hierarchy0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_merchandise_hierarchy`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_mkp_product": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_mkp_product"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_mkp_product", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_mkp_product", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_mkp_product", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_mkp_product0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_mkp_product`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_model": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_model"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_model", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_model", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_model", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_model0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_model`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_product_nature": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_product_nature"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_product_nature", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_product_nature", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_product_nature", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_product_nature0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_product_nature`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_reallocated_digital_type": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_reallocated_digital_type"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_reallocated_digital_type", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_reallocated_digital_type", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_reallocated_digital_type", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_reallocated_digital_type00*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_reallocated_digital_type`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.logical_stock_snapshot": {"fqn": ["dbt_datanl_prod", "stg_redshift", "logical_stock_snapshot"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.logical_stock_snapshot", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "logical_stock_snapshot", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "logical_stock_snapshot", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/logical_stock_snapshot00*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`logical_stock_snapshot`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_return_reason": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_return_reason"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_return_reason", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_return_reason", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_return_reason", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_return_reason0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_return_reason`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_return_type": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_return_type"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_return_type", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_return_type", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_return_type", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_return_type0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_return_type`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_shipping_type": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_shipping_type"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_shipping_type", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_shipping_type", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_shipping_type", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_shipping_type0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_shipping_type`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_sku": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_sku"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_sku", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_sku", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_sku", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_sku0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_sku`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_sport_dpt": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_sport_dpt"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_sport_dpt", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_sport_dpt", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_sport_dpt", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_sport_dpt0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_sport_dpt`", "created_at": 1658834103.6305137}, "source.dbt_datanl_prod.stg_redshift.d_touchpoint_channel_type": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_touchpoint_channel_type"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_touchpoint_channel_type", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_touchpoint_channel_type", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_touchpoint_channel_type", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_touchpoint_channel_type0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_touchpoint_channel_type`", "created_at": 1658834103.6315207}, "source.dbt_datanl_prod.stg_redshift.d_week": {"fqn": ["dbt_datanl_prod", "stg_redshift", "d_week"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.d_week", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "d_week", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "d_week", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_week0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`d_week`", "created_at": 1658834103.6315207}, "source.dbt_datanl_prod.stg_redshift.f_availability_rate": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_availability_rate"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_availability_rate", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_availability_rate", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_availability_rate", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_availability_rate0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_availability_rate`", "created_at": 1658834103.6315207}, "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2019": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_delivery_detail_2019"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2019", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_delivery_detail_2019", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_delivery_detail_2019", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_detail_20190*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_delivery_detail_2019`", "created_at": 1658834103.6315207}, "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2020": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_delivery_detail_2020"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2020", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_delivery_detail_2020", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_delivery_detail_2020", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_detail_20200*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_delivery_detail_2020`", "created_at": 1658834103.6315207}, "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2021": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_delivery_detail_2021"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2021", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_delivery_detail_2021", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_delivery_detail_2021", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_detail_20210*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_delivery_detail_2021`", "created_at": 1658834103.6315207}, "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_current": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_delivery_detail_current"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_current", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_delivery_detail_current", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_delivery_detail_current", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_detail_current0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_delivery_detail_current`", "created_at": 1658834103.6315207}, "source.dbt_datanl_prod.stg_redshift.f_delivery_header_2019": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_delivery_header_2019"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_delivery_header_2019", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_delivery_header_2019", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_delivery_header_2019", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_header_20190*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_delivery_header_2019`", "created_at": 1658834103.6315207}, "source.dbt_datanl_prod.stg_redshift.f_delivery_header_2020": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_delivery_header_2020"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_delivery_header_2020", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_delivery_header_2020", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_delivery_header_2020", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_header_20200*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_delivery_header_2020`", "created_at": 1658834103.6315207}, "source.dbt_datanl_prod.stg_redshift.f_delivery_header_2021": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_delivery_header_2021"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_delivery_header_2021", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_delivery_header_2021", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_delivery_header_2021", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_header_20210*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_delivery_header_2021`", "created_at": 1658834103.6315207}, "source.dbt_datanl_prod.stg_redshift.f_delivery_header_current": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_delivery_header_current"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_delivery_header_current", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_delivery_header_current", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_delivery_header_current", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_header_current0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_delivery_header_current`", "created_at": 1658834103.6315207}, "source.dbt_datanl_prod.stg_redshift.f_mkp_transaction_detail": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_mkp_transaction_detail"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_mkp_transaction_detail", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_mkp_transaction_detail", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_mkp_transaction_detail", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_mkp_transaction_detail0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_mkp_transaction_detail`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_postnl_year": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_postnl_year"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_postnl_year", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_postnl_year", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_postnl_year", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_postnl_year0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_postnl_year`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_supply_vc4r_retbox": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_supply_vc4r_retbox"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_supply_vc4r_retbox", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_supply_vc4r_retbox", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_supply_vc4r_retbox", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_supply_vc4r_retbox0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_supply_vc4r_retbox`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2019": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_transaction_detail_2019"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2019", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_transaction_detail_2019", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_transaction_detail_2019", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_detail_20190*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_transaction_detail_2019`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2020": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_transaction_detail_2020"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2020", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_transaction_detail_2020", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_transaction_detail_2020", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_detail_20200*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_transaction_detail_2020`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2021": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_transaction_detail_2021"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2021", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_transaction_detail_2021", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_transaction_detail_2021", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_detail_20210*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_transaction_detail_2021`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_current": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_transaction_detail_current"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_current", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_transaction_detail_current", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_transaction_detail_current", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_detail_current0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_transaction_detail_current`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_transaction_header_2019": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_transaction_header_2019"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_transaction_header_2019", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_transaction_header_2019", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_transaction_header_2019", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_header_20190*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_transaction_header_2019`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_transaction_header_2020": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_transaction_header_2020"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_transaction_header_2020", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_transaction_header_2020", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_transaction_header_2020", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_header_20200*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_transaction_header_2020`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_transaction_header_2021": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_transaction_header_2021"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_transaction_header_2021", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_transaction_header_2021", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_transaction_header_2021", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_header_20210*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_transaction_header_2021`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_transaction_header_current": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_transaction_header_current"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_transaction_header_current", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_transaction_header_current", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_transaction_header_current", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_header_current0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_transaction_header_current`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2019": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_transaction_sustainable_2019"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2019", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_transaction_sustainable_2019", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_transaction_sustainable_2019", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_sustainable_20190*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_transaction_sustainable_2019`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2020": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_transaction_sustainable_2020"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2020", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_transaction_sustainable_2020", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_transaction_sustainable_2020", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_sustainable_20200*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_transaction_sustainable_2020`", "created_at": 1658834103.6325161}, "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2021": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_transaction_sustainable_2021"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2021", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_transaction_sustainable_2021", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_transaction_sustainable_2021", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_sustainable_20210*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_transaction_sustainable_2021`", "created_at": 1658834103.6335166}, "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_current": {"fqn": ["dbt_datanl_prod", "stg_redshift", "f_transaction_sustainable_current"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_current", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "f_transaction_sustainable_current", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "f_transaction_sustainable_current", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_sustainable_current0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`f_transaction_sustainable_current`", "created_at": 1658834103.6335166}, "source.dbt_datanl_prod.stg_redshift.lib_web_order_status": {"fqn": ["dbt_datanl_prod", "stg_redshift", "lib_web_order_status"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.lib_web_order_status", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "lib_web_order_status", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "lib_web_order_status", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/lib_web_order_status0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`lib_web_order_status`", "created_at": 1658834103.6335166}, "source.dbt_datanl_prod.stg_redshift.needs_car_autoflow": {"fqn": ["dbt_datanl_prod", "stg_redshift", "needs_car_autoflow"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.needs_car_autoflow", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "needs_car_autoflow", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "needs_car_autoflow", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/needs_car_autoflow0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`needs_car_autoflow`", "created_at": 1658834103.6335166}, "source.dbt_datanl_prod.stg_redshift.opv_customer__personal_data": {"fqn": ["dbt_datanl_prod", "stg_redshift", "opv_customer__personal_data"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.opv_customer__personal_data", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "opv_customer__personal_data", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "opv_customer__personal_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/opv_customer__personal_data0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`opv_customer__personal_data`", "created_at": 1658834103.6335166}, "source.dbt_datanl_prod.stg_redshift.opv_review__review": {"fqn": ["dbt_datanl_prod", "stg_redshift", "opv_review__review"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.opv_review__review", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "opv_review__review", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "opv_review__review", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/opv_review__review0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`opv_review__review`", "created_at": 1658834103.6335166}, "source.dbt_datanl_prod.stg_redshift.opv_user__author": {"fqn": ["dbt_datanl_prod", "stg_redshift", "opv_user__author"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.opv_user__author", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "opv_user__author", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "opv_user__author", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/opv_user__author0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`opv_user__author`", "created_at": 1658834103.6335166}, "source.dbt_datanl_prod.stg_redshift.physical_stock_snapshot": {"fqn": ["dbt_datanl_prod", "stg_redshift", "physical_stock_snapshot"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.physical_stock_snapshot", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "physical_stock_snapshot", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "physical_stock_snapshot", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/physical_stock_snapshot0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`physical_stock_snapshot`", "created_at": 1658834103.6335166}, "source.dbt_datanl_prod.stg_redshift.weight_dimension_finish_product": {"fqn": ["dbt_datanl_prod", "stg_redshift", "weight_dimension_finish_product"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.weight_dimension_finish_product", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "weight_dimension_finish_product", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "weight_dimension_finish_product", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/weight_dimension_finish_product0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`weight_dimension_finish_product`", "created_at": 1658834103.6335166}, "source.dbt_datanl_prod.stg_redshift.zsd_oms_ordtrkhi": {"fqn": ["dbt_datanl_prod", "stg_redshift", "zsd_oms_ordtrkhi"], "database": "datanl-prod-fy0d", "schema": "stg_redshift", "unique_id": "source.dbt_datanl_prod.stg_redshift.zsd_oms_ordtrkhi", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "models\\stg_redshift.yml", "original_file_path": "models\\stg_redshift.yml", "name": "zsd_oms_ordtrkhi", "source_name": "stg_redshift", "source_description": "", "loader": "gcloud storage", "identifier": "zsd_oms_ordtrkhi", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/zsd_oms_ordtrkhi0*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "parquet"}}, "description": "External Redshift table, stored as Parquet files in Cloud Storage", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`datanl-prod-fy0d`.`stg_redshift`.`zsd_oms_ordtrkhi`", "created_at": 1658834103.6335166}}, "macros": {"macro.dbt_datanl_prod.generate_schema_name": {"unique_id": "macro.dbt_datanl_prod.generate_schema_name", "package_name": "dbt_datanl_prod", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is none -%}\r\n\r\n        {{ default_schema }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_schema_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.453246}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4622505}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4632506}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4642508}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4642508}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.465251}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4662514}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4662514}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4662514}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.467252}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.467252}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.467252}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.467252}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4682517}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4682517}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4682517}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.469252}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.469252}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.469252}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.470252}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.470252}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.471258}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4722543}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4722543}, "macro.dbt_bigquery.bigquery__upload_file": {"unique_id": "macro.dbt_bigquery.bigquery__upload_file", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4732544}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4782586}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4802594}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4802594}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4812596}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\copy.sql", "original_file_path": "macros\\materializations\\copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter's copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4842598}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, sql) %}\n\n  {% if '_dbt_max_partition' in sql %}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4872606}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4882607}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4902616}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4922626}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(\n        declare_dbt_max_partition(this, partition_by, sql) + create_table_as(True, tmp_relation, sql)\n      ) %}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.496263}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4982634}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4982634}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.4992635}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5012639}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5012639}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5012639}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5052648}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5062652}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5072656}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5102658}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5102658}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.511278}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.511278}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5122683}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5122683}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5132685}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5142686}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5152688}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5172691}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5172691}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5182695}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5182695}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.52027}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.52027}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.52027}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5212703}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5232706}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5242712}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5242712}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5242712}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5252712}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5252712}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5262716}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5262716}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5262716}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5272715}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.528272}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.529272}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.529272}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.530272}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.530272}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5312724}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5345218}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5345218}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5345218}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.535522}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.535522}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.535522}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5365222}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5365222}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5375228}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5375228}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.538523}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.538523}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5405235}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5405235}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5405235}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5415237}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.544525}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.546525}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.547525}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.548525}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5515258}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5525262}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5535262}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5555277}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.556035}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5570312}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5590332}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5610323}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5610323}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5620325}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5630329}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.564033}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5650332}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5650332}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5670335}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5670335}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5680337}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5710344}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5710344}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5710344}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5710344}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.572035}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5740352}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5750365}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5760362}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                  schema=schema,\n                                                                  database=database) %}\n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5840373}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5860379}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5920396}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.59504}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.59504}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5970416}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5970416}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.5985448}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6045463}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6065466}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6080928}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.610089}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6110895}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6110895}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.61209}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.61209}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.618091}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.621697}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6230922}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6230922}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6230922}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6241057}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6251009}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6251009}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.631103}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6371033}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6391034}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6391034}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6401036}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6401036}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6401036}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6401036}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.641109}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.641109}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6421068}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6441064}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6491082}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6551094}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6551094}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6551094}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6551094}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6561096}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6561096}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6561096}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6576178}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6586149}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6586149}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6596143}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.667616}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.66959}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.66959}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6760929}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6760929}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6760929}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6770942}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6770942}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6780941}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6790943}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6790943}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6810946}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6840959}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.686096}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.686096}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6900969}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6920974}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.693097}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.694098}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6950982}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6950982}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6950982}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\refresh_external_table.sql", "original_file_path": "macros\\common\\refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6970983}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\refresh_external_table.sql", "original_file_path": "macros\\common\\refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.6970983}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\get_external_build_plan.sql", "original_file_path": "macros\\common\\get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.bigquery__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.698098}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\get_external_build_plan.sql", "original_file_path": "macros\\common\\get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.698098}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\stage_external_sources.sql", "original_file_path": "macros\\common\\stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7061007}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\create_external_table.sql", "original_file_path": "macros\\common\\create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.bigquery__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7081006}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\create_external_table.sql", "original_file_path": "macros\\common\\create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7081006}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\dropif.sql", "original_file_path": "macros\\common\\helpers\\dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7091005}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\dropif.sql", "original_file_path": "macros\\common\\helpers\\dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7091005}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\transaction.sql", "original_file_path": "macros\\common\\helpers\\transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7111015}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\transaction.sql", "original_file_path": "macros\\common\\helpers\\transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7111015}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\bigquery\\create_external_table.sql", "original_file_path": "macros\\plugins\\bigquery\\create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7151022}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\bigquery\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\bigquery\\get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.718103}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\spark\\get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\n    {% if recover_partitions|length > 0 %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.spark__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7201035}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\create_external_table.sql", "original_file_path": "macros\\plugins\\spark\\create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7241042}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\refresh_external_table.sql", "original_file_path": "macros\\plugins\\spark\\refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7251043}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql", "original_file_path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {% set ddl %}\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n    {%- endif -%}\n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7271047}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\helpers\\dropif.sql", "original_file_path": "macros\\plugins\\spark\\helpers\\dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7281053}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\refresh_external_table.sql", "original_file_path": "macros\\plugins\\snowflake\\refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7301056}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\create_external_table.sql", "original_file_path": "macros\\plugins\\snowflake\\create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7351067}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\snowflake\\get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7381074}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\helpers\\is_csv.sql", "original_file_path": "macros\\plugins\\snowflake\\helpers\\is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7431087}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\refresh_snowpipe.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.745109}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\create_empty_table.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7461092}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\create_snowpipe.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7481096}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\get_copy_sql.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7511103}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\create_external_table.sql", "original_file_path": "macros\\plugins\\redshift\\create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7545996}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\redshift\\get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7566001}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\refresh_external_table.sql", "original_file_path": "macros\\plugins\\redshift\\refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7634327}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\paths.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7644322}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\paths.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7654328}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\paths.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7654328}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\transaction.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7664328}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\add_partitions.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7694337}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\render_macro.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7724342}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\is_ext_tbl.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7744353}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\dropif.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7754345}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\sqlserver\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\sqlserver\\get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.778436}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\sqlserver\\create_external_table.sql", "original_file_path": "macros\\plugins\\sqlserver\\create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7814367}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\sqlserver\\helpers\\dropif.sql", "original_file_path": "macros\\plugins\\sqlserver\\helpers\\dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7824366}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.784437}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.785437}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.785437}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.786438}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7874382}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7884386}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7884386}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7954397}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7964401}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7974405}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.7974405}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.805442}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8084424}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.811443}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8134434}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.814444}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8164444}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8174443}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8189483}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.819949}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8209488}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8219495}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8229492}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8239493}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.82695}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8299515}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8319516}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8329515}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8349524}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8359523}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8369532}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8369532}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8389535}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8399532}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8399532}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8409605}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.842956}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8449566}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8459568}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.846957}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8489578}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.849958}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8519583}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8519583}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8519583}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8519583}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8539588}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8539588}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8559592}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8559592}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8572972}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8592951}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8632963}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8632963}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8642964}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8642964}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8642964}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8652964}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8662965}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8672967}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8702967}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.876299}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8782995}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8792996}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8823001}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8823001}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8833005}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8843014}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8883018}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8913023}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8923028}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8933027}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.894303}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8953032}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8963037}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8973038}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8993042}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.8993042}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9013042}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9013042}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9023044}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9033048}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9043052}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9043052}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9063056}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9063056}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.908306}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.908306}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9103062}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9113069}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9123073}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9133074}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9153078}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9153078}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9173079}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.918308}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9203088}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9203088}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9223092}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9223092}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9243097}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9253097}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9273102}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9283113}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9283113}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.929311}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\_is_ephemeral.sql", "original_file_path": "macros\\cross_db_utils\\_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9313114}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9323118}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9333115}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9333115}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9333115}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.934312}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.937314}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9378216}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9378216}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9388177}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9408178}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.941818}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.941818}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9428184}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9428184}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9438183}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.944819}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.944819}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9458194}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9458194}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9458194}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.94882}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.94882}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9498205}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9498205}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9508204}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9508204}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.952821}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.952821}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.952821}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.952821}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.954821}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.954821}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.954821}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9558215}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9568214}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9568214}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9578214}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9578214}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9589813}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9589813}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9589813}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.960974}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.960974}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.960974}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9619744}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9619744}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9619744}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.963975}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.963975}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9649749}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9649749}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9649749}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9659746}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9659746}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9679754}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9679754}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9679754}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.969976}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.969976}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.969976}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9712346}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9722323}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9722323}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9722323}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9742327}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9742327}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9742327}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9742327}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9742327}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9752328}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9752328}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9752328}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9752328}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9762332}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9762332}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9762332}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9762332}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9762332}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9772334}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9772334}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9772334}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9772334}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9772334}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9772334}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9782336}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9792354}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9792354}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.980234}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.981234}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.984235}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.985235}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.985235}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9882357}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.989236}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\_is_relation.sql", "original_file_path": "macros\\cross_db_utils\\_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9902368}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9912367}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.992237}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.992237}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.992237}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.993237}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9942372}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9942372}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9942372}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9962375}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9962375}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9962375}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9972374}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9972374}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9982383}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9982383}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9992383}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834102.9992383}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.0002384}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.001239}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.001239}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.0022388}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.0022388}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.003239}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.003239}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.003239}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.003239}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.003239}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.004239}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.004239}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.0052397}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.0062397}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.0082402}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.0082402}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.0092404}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "H:\\My Drive\\SQL\\GitHub\\dbt_datanl_prod\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658834103.0102406}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\Users\\kspigt17\\Miniconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_datanl_prod.d_business_unit": ["source.dbt_datanl_prod.stg_redshift.d_business_unit"], "model.dbt_datanl_prod.d_customer_channel_type": ["source.dbt_datanl_prod.stg_redshift.d_customer_channel_type"], "model.dbt_datanl_prod.d_customers": ["source.dbt_datanl_prod.stg_redshift.d_customers"], "model.dbt_datanl_prod.d_day": ["source.dbt_datanl_prod.stg_redshift.d_day"], "model.dbt_datanl_prod.d_delivery_type": ["source.dbt_datanl_prod.stg_redshift.d_delivery_type"], "model.dbt_datanl_prod.d_department": ["source.dbt_datanl_prod.stg_redshift.d_department"], "model.dbt_datanl_prod.d_family": ["source.dbt_datanl_prod.stg_redshift.d_family"], "model.dbt_datanl_prod.d_freight_method": ["source.dbt_datanl_prod.stg_redshift.d_freight_method"], "model.dbt_datanl_prod.d_label": ["source.dbt_datanl_prod.stg_redshift.d_label"], "model.dbt_datanl_prod.d_merchandise_hierarchy": ["source.dbt_datanl_prod.stg_redshift.d_merchandise_hierarchy"], "model.dbt_datanl_prod.d_mkp_product": ["source.dbt_datanl_prod.stg_redshift.d_mkp_product"], "model.dbt_datanl_prod.d_model": ["source.dbt_datanl_prod.stg_redshift.d_model"], "model.dbt_datanl_prod.d_product_nature": ["source.dbt_datanl_prod.stg_redshift.d_product_nature"], "model.dbt_datanl_prod.d_reallocated_digital_type": ["source.dbt_datanl_prod.stg_redshift.d_reallocated_digital_type"], "model.dbt_datanl_prod.d_return_reason": ["source.dbt_datanl_prod.stg_redshift.d_return_reason"], "model.dbt_datanl_prod.d_return_type": ["source.dbt_datanl_prod.stg_redshift.d_return_type"], "model.dbt_datanl_prod.d_shipping_type": ["source.dbt_datanl_prod.stg_redshift.d_shipping_type"], "model.dbt_datanl_prod.d_sku": ["source.dbt_datanl_prod.stg_redshift.d_sku"], "model.dbt_datanl_prod.d_sport_dpt": ["source.dbt_datanl_prod.stg_redshift.d_sport_dpt"], "model.dbt_datanl_prod.d_touchpoint_channel_type": ["source.dbt_datanl_prod.stg_redshift.d_touchpoint_channel_type"], "model.dbt_datanl_prod.d_week": ["source.dbt_datanl_prod.stg_redshift.d_week"], "model.dbt_datanl_prod.f_delivery_detail_2019": ["source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2019"], "model.dbt_datanl_prod.f_delivery_detail_2020": ["source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2020"], "model.dbt_datanl_prod.f_delivery_detail_2021": ["source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2021"], "model.dbt_datanl_prod.f_delivery_detail_current": ["source.dbt_datanl_prod.stg_redshift.f_delivery_detail_current"], "model.dbt_datanl_prod.f_delivery_header_2019": ["source.dbt_datanl_prod.stg_redshift.f_delivery_header_2019"], "model.dbt_datanl_prod.f_delivery_header_2020": ["source.dbt_datanl_prod.stg_redshift.f_delivery_header_2020"], "model.dbt_datanl_prod.f_delivery_header_2021": ["source.dbt_datanl_prod.stg_redshift.f_delivery_header_2021"], "model.dbt_datanl_prod.f_delivery_header_current": ["source.dbt_datanl_prod.stg_redshift.f_delivery_header_current"], "model.dbt_datanl_prod.f_mkp_transaction_detail": ["source.dbt_datanl_prod.stg_redshift.f_mkp_transaction_detail"], "model.dbt_datanl_prod.f_postnl_year": ["source.dbt_datanl_prod.stg_redshift.f_postnl_year"], "model.dbt_datanl_prod.f_supply_vc4r_retbox": ["source.dbt_datanl_prod.stg_redshift.f_supply_vc4r_retbox"], "model.dbt_datanl_prod.f_transaction_detail_2019": ["source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2019"], "model.dbt_datanl_prod.f_transaction_detail_2020": ["source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2020"], "model.dbt_datanl_prod.f_transaction_detail_2021": ["source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2021"], "model.dbt_datanl_prod.f_transaction_detail_current": ["source.dbt_datanl_prod.stg_redshift.f_transaction_detail_current"], "model.dbt_datanl_prod.f_transaction_header_2019": ["source.dbt_datanl_prod.stg_redshift.f_transaction_header_2019"], "model.dbt_datanl_prod.f_transaction_header_2020": ["source.dbt_datanl_prod.stg_redshift.f_transaction_header_2020"], "model.dbt_datanl_prod.f_transaction_header_2021": ["source.dbt_datanl_prod.stg_redshift.f_transaction_header_2021"], "model.dbt_datanl_prod.f_transaction_header_current": ["source.dbt_datanl_prod.stg_redshift.f_transaction_header_current"], "model.dbt_datanl_prod.f_transaction_sustainable_2019": ["source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2019"], "model.dbt_datanl_prod.f_transaction_sustainable_2020": ["source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2020"], "model.dbt_datanl_prod.f_transaction_sustainable_2021": ["source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2021"], "model.dbt_datanl_prod.f_transaction_sustainable_current": ["source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_current"], "model.dbt_datanl_prod.needs_car_autoflow": ["source.dbt_datanl_prod.stg_redshift.needs_car_autoflow"], "model.dbt_datanl_prod.lib_web_order_status": ["source.dbt_datanl_prod.stg_redshift.lib_web_order_status"], "model.dbt_datanl_prod.opv_customer__personal_data": ["source.dbt_datanl_prod.stg_redshift.opv_customer__personal_data"], "model.dbt_datanl_prod.opv_review__review": ["source.dbt_datanl_prod.stg_redshift.opv_review__review"], "model.dbt_datanl_prod.opv_user__author": ["source.dbt_datanl_prod.stg_redshift.opv_user__author"], "model.dbt_datanl_prod.physical_stock_snapshot": ["source.dbt_datanl_prod.stg_redshift.physical_stock_snapshot"], "model.dbt_datanl_prod.weight_dimension_finish_product": ["source.dbt_datanl_prod.stg_redshift.weight_dimension_finish_product"], "model.dbt_datanl_prod.zsd_oms_ordtrkhi": ["source.dbt_datanl_prod.stg_redshift.zsd_oms_ordtrkhi"], "model.dbt_datanl_prod.f_availability_rate": ["source.dbt_datanl_prod.stg_redshift.f_availability_rate"], "model.dbt_datanl_prod.PRO_Helped_Orders": [], "model.dbt_datanl_prod.CO2_Extraction": [], "model.dbt_datanl_prod.Sustainability_Awareness_Scores": [], "model.dbt_datanl_prod.zendesk_customf": ["source.dbt_datanl_prod.stg_zendesk.zendesk_customf"], "model.dbt_datanl_prod.zendesk_tickets": ["source.dbt_datanl_prod.stg_zendesk.zendesk_tickets"], "model.dbt_datanl_prod.f_delivery_detail_last_four_years": ["model.dbt_datanl_prod.f_delivery_detail_2019", "model.dbt_datanl_prod.f_delivery_detail_2020", "model.dbt_datanl_prod.f_delivery_detail_2021", "model.dbt_datanl_prod.f_delivery_detail_current"], "model.dbt_datanl_prod.f_transaction_detail_last_two_years": ["model.dbt_datanl_prod.f_transaction_detail_2021", "model.dbt_datanl_prod.f_transaction_detail_current"], "model.dbt_datanl_prod.f_transaction_detail_last_four_years": ["model.dbt_datanl_prod.f_transaction_detail_2019", "model.dbt_datanl_prod.f_transaction_detail_2020", "model.dbt_datanl_prod.f_transaction_detail_2021", "model.dbt_datanl_prod.f_transaction_detail_current"], "model.dbt_datanl_prod.f_delivery_detail_last_two_years": ["model.dbt_datanl_prod.f_delivery_detail_2021", "model.dbt_datanl_prod.f_delivery_detail_current"], "model.dbt_datanl_prod.f_delivery_header_last_two_years": ["model.dbt_datanl_prod.f_delivery_header_2021", "model.dbt_datanl_prod.f_delivery_header_current"], "model.dbt_datanl_prod.f_transaction_sustainable_last_two_years": ["model.dbt_datanl_prod.f_transaction_sustainable_2021", "model.dbt_datanl_prod.f_transaction_sustainable_current"], "model.dbt_datanl_prod.stg_transactions": ["model.dbt_datanl_prod.PRO_Helped_Orders", "model.dbt_datanl_prod.d_sku", "model.dbt_datanl_prod.f_delivery_detail_last_two_years", "model.dbt_datanl_prod.f_delivery_header_last_two_years", "model.dbt_datanl_prod.f_transaction_detail_last_two_years", "model.dbt_datanl_prod.f_transaction_sustainable_last_two_years"], "test.dbt_datanl_prod.unique_d_sku_sku_idr_sku.990f81e976": ["model.dbt_datanl_prod.d_sku"], "test.dbt_datanl_prod.not_null_d_sku_sku_idr_sku.f05fb4ac17": ["model.dbt_datanl_prod.d_sku"], "test.dbt_datanl_prod.unique_zendesk_tickets_ticket_id.033781ea12": ["model.dbt_datanl_prod.zendesk_tickets"], "test.dbt_datanl_prod.not_null_zendesk_tickets_ticket_id.3e2640a89b": ["model.dbt_datanl_prod.zendesk_tickets"], "test.dbt_datanl_prod.unique_zendesk_customf_id.36444af5c9": ["model.dbt_datanl_prod.zendesk_customf"], "test.dbt_datanl_prod.not_null_zendesk_customf_id.0077092197": ["model.dbt_datanl_prod.zendesk_customf"], "source.dbt_datanl_prod.stg_gsheet_Promise.CO2_Extraction": [], "source.dbt_datanl_prod.stg_gsheet_Promise.PRO_Helped_Orders": [], "source.dbt_datanl_prod.stg_gsheet_Sustainability.Sustainability_Awareness_Scores": [], "source.dbt_datanl_prod.stg_zendesk.zendesk_tickets": [], "source.dbt_datanl_prod.stg_zendesk.zendesk_customf": [], "source.dbt_datanl_prod.stg_redshift.d_business_unit": [], "source.dbt_datanl_prod.stg_redshift.d_customer_channel_type": [], "source.dbt_datanl_prod.stg_redshift.d_customers": [], "source.dbt_datanl_prod.stg_redshift.d_day": [], "source.dbt_datanl_prod.stg_redshift.d_delivery_type": [], "source.dbt_datanl_prod.stg_redshift.d_department": [], "source.dbt_datanl_prod.stg_redshift.d_family": [], "source.dbt_datanl_prod.stg_redshift.d_freight_method": [], "source.dbt_datanl_prod.stg_redshift.d_label": [], "source.dbt_datanl_prod.stg_redshift.d_merchandise_hierarchy": [], "source.dbt_datanl_prod.stg_redshift.d_mkp_product": [], "source.dbt_datanl_prod.stg_redshift.d_model": [], "source.dbt_datanl_prod.stg_redshift.d_product_nature": [], "source.dbt_datanl_prod.stg_redshift.d_reallocated_digital_type": [], "source.dbt_datanl_prod.stg_redshift.logical_stock_snapshot": [], "source.dbt_datanl_prod.stg_redshift.d_return_reason": [], "source.dbt_datanl_prod.stg_redshift.d_return_type": [], "source.dbt_datanl_prod.stg_redshift.d_shipping_type": [], "source.dbt_datanl_prod.stg_redshift.d_sku": [], "source.dbt_datanl_prod.stg_redshift.d_sport_dpt": [], "source.dbt_datanl_prod.stg_redshift.d_touchpoint_channel_type": [], "source.dbt_datanl_prod.stg_redshift.d_week": [], "source.dbt_datanl_prod.stg_redshift.f_availability_rate": [], "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2019": [], "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2020": [], "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2021": [], "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_current": [], "source.dbt_datanl_prod.stg_redshift.f_delivery_header_2019": [], "source.dbt_datanl_prod.stg_redshift.f_delivery_header_2020": [], "source.dbt_datanl_prod.stg_redshift.f_delivery_header_2021": [], "source.dbt_datanl_prod.stg_redshift.f_delivery_header_current": [], "source.dbt_datanl_prod.stg_redshift.f_mkp_transaction_detail": [], "source.dbt_datanl_prod.stg_redshift.f_postnl_year": [], "source.dbt_datanl_prod.stg_redshift.f_supply_vc4r_retbox": [], "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2019": [], "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2020": [], "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2021": [], "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_current": [], "source.dbt_datanl_prod.stg_redshift.f_transaction_header_2019": [], "source.dbt_datanl_prod.stg_redshift.f_transaction_header_2020": [], "source.dbt_datanl_prod.stg_redshift.f_transaction_header_2021": [], "source.dbt_datanl_prod.stg_redshift.f_transaction_header_current": [], "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2019": [], "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2020": [], "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2021": [], "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_current": [], "source.dbt_datanl_prod.stg_redshift.lib_web_order_status": [], "source.dbt_datanl_prod.stg_redshift.needs_car_autoflow": [], "source.dbt_datanl_prod.stg_redshift.opv_customer__personal_data": [], "source.dbt_datanl_prod.stg_redshift.opv_review__review": [], "source.dbt_datanl_prod.stg_redshift.opv_user__author": [], "source.dbt_datanl_prod.stg_redshift.physical_stock_snapshot": [], "source.dbt_datanl_prod.stg_redshift.weight_dimension_finish_product": [], "source.dbt_datanl_prod.stg_redshift.zsd_oms_ordtrkhi": []}, "child_map": {"model.dbt_datanl_prod.d_business_unit": [], "model.dbt_datanl_prod.d_customer_channel_type": [], "model.dbt_datanl_prod.d_customers": [], "model.dbt_datanl_prod.d_day": [], "model.dbt_datanl_prod.d_delivery_type": [], "model.dbt_datanl_prod.d_department": [], "model.dbt_datanl_prod.d_family": [], "model.dbt_datanl_prod.d_freight_method": [], "model.dbt_datanl_prod.d_label": [], "model.dbt_datanl_prod.d_merchandise_hierarchy": [], "model.dbt_datanl_prod.d_mkp_product": [], "model.dbt_datanl_prod.d_model": [], "model.dbt_datanl_prod.d_product_nature": [], "model.dbt_datanl_prod.d_reallocated_digital_type": [], "model.dbt_datanl_prod.d_return_reason": [], "model.dbt_datanl_prod.d_return_type": [], "model.dbt_datanl_prod.d_shipping_type": [], "model.dbt_datanl_prod.d_sku": ["model.dbt_datanl_prod.stg_transactions", "test.dbt_datanl_prod.not_null_d_sku_sku_idr_sku.f05fb4ac17", "test.dbt_datanl_prod.unique_d_sku_sku_idr_sku.990f81e976"], "model.dbt_datanl_prod.d_sport_dpt": [], "model.dbt_datanl_prod.d_touchpoint_channel_type": [], "model.dbt_datanl_prod.d_week": [], "model.dbt_datanl_prod.f_delivery_detail_2019": ["model.dbt_datanl_prod.f_delivery_detail_last_four_years"], "model.dbt_datanl_prod.f_delivery_detail_2020": ["model.dbt_datanl_prod.f_delivery_detail_last_four_years"], "model.dbt_datanl_prod.f_delivery_detail_2021": ["model.dbt_datanl_prod.f_delivery_detail_last_four_years", "model.dbt_datanl_prod.f_delivery_detail_last_two_years"], "model.dbt_datanl_prod.f_delivery_detail_current": ["model.dbt_datanl_prod.f_delivery_detail_last_four_years", "model.dbt_datanl_prod.f_delivery_detail_last_two_years"], "model.dbt_datanl_prod.f_delivery_header_2019": [], "model.dbt_datanl_prod.f_delivery_header_2020": [], "model.dbt_datanl_prod.f_delivery_header_2021": ["model.dbt_datanl_prod.f_delivery_header_last_two_years"], "model.dbt_datanl_prod.f_delivery_header_current": ["model.dbt_datanl_prod.f_delivery_header_last_two_years"], "model.dbt_datanl_prod.f_mkp_transaction_detail": [], "model.dbt_datanl_prod.f_postnl_year": [], "model.dbt_datanl_prod.f_supply_vc4r_retbox": [], "model.dbt_datanl_prod.f_transaction_detail_2019": ["model.dbt_datanl_prod.f_transaction_detail_last_four_years"], "model.dbt_datanl_prod.f_transaction_detail_2020": ["model.dbt_datanl_prod.f_transaction_detail_last_four_years"], "model.dbt_datanl_prod.f_transaction_detail_2021": ["model.dbt_datanl_prod.f_transaction_detail_last_four_years", "model.dbt_datanl_prod.f_transaction_detail_last_two_years"], "model.dbt_datanl_prod.f_transaction_detail_current": ["model.dbt_datanl_prod.f_transaction_detail_last_four_years", "model.dbt_datanl_prod.f_transaction_detail_last_two_years"], "model.dbt_datanl_prod.f_transaction_header_2019": [], "model.dbt_datanl_prod.f_transaction_header_2020": [], "model.dbt_datanl_prod.f_transaction_header_2021": [], "model.dbt_datanl_prod.f_transaction_header_current": [], "model.dbt_datanl_prod.f_transaction_sustainable_2019": [], "model.dbt_datanl_prod.f_transaction_sustainable_2020": [], "model.dbt_datanl_prod.f_transaction_sustainable_2021": ["model.dbt_datanl_prod.f_transaction_sustainable_last_two_years"], "model.dbt_datanl_prod.f_transaction_sustainable_current": ["model.dbt_datanl_prod.f_transaction_sustainable_last_two_years"], "model.dbt_datanl_prod.needs_car_autoflow": [], "model.dbt_datanl_prod.lib_web_order_status": [], "model.dbt_datanl_prod.opv_customer__personal_data": [], "model.dbt_datanl_prod.opv_review__review": [], "model.dbt_datanl_prod.opv_user__author": [], "model.dbt_datanl_prod.physical_stock_snapshot": [], "model.dbt_datanl_prod.weight_dimension_finish_product": [], "model.dbt_datanl_prod.zsd_oms_ordtrkhi": [], "model.dbt_datanl_prod.f_availability_rate": [], "model.dbt_datanl_prod.PRO_Helped_Orders": ["model.dbt_datanl_prod.stg_transactions"], "model.dbt_datanl_prod.CO2_Extraction": [], "model.dbt_datanl_prod.Sustainability_Awareness_Scores": [], "model.dbt_datanl_prod.zendesk_customf": ["test.dbt_datanl_prod.not_null_zendesk_customf_id.0077092197", "test.dbt_datanl_prod.unique_zendesk_customf_id.36444af5c9"], "model.dbt_datanl_prod.zendesk_tickets": ["test.dbt_datanl_prod.not_null_zendesk_tickets_ticket_id.3e2640a89b", "test.dbt_datanl_prod.unique_zendesk_tickets_ticket_id.033781ea12"], "model.dbt_datanl_prod.f_delivery_detail_last_four_years": [], "model.dbt_datanl_prod.f_transaction_detail_last_two_years": ["model.dbt_datanl_prod.stg_transactions"], "model.dbt_datanl_prod.f_transaction_detail_last_four_years": [], "model.dbt_datanl_prod.f_delivery_detail_last_two_years": ["model.dbt_datanl_prod.stg_transactions"], "model.dbt_datanl_prod.f_delivery_header_last_two_years": ["model.dbt_datanl_prod.stg_transactions"], "model.dbt_datanl_prod.f_transaction_sustainable_last_two_years": ["model.dbt_datanl_prod.stg_transactions"], "model.dbt_datanl_prod.stg_transactions": [], "test.dbt_datanl_prod.unique_d_sku_sku_idr_sku.990f81e976": [], "test.dbt_datanl_prod.not_null_d_sku_sku_idr_sku.f05fb4ac17": [], "test.dbt_datanl_prod.unique_zendesk_tickets_ticket_id.033781ea12": [], "test.dbt_datanl_prod.not_null_zendesk_tickets_ticket_id.3e2640a89b": [], "test.dbt_datanl_prod.unique_zendesk_customf_id.36444af5c9": [], "test.dbt_datanl_prod.not_null_zendesk_customf_id.0077092197": [], "source.dbt_datanl_prod.stg_gsheet_Promise.CO2_Extraction": [], "source.dbt_datanl_prod.stg_gsheet_Promise.PRO_Helped_Orders": [], "source.dbt_datanl_prod.stg_gsheet_Sustainability.Sustainability_Awareness_Scores": [], "source.dbt_datanl_prod.stg_zendesk.zendesk_tickets": ["model.dbt_datanl_prod.zendesk_tickets"], "source.dbt_datanl_prod.stg_zendesk.zendesk_customf": ["model.dbt_datanl_prod.zendesk_customf"], "source.dbt_datanl_prod.stg_redshift.d_business_unit": ["model.dbt_datanl_prod.d_business_unit"], "source.dbt_datanl_prod.stg_redshift.d_customer_channel_type": ["model.dbt_datanl_prod.d_customer_channel_type"], "source.dbt_datanl_prod.stg_redshift.d_customers": ["model.dbt_datanl_prod.d_customers"], "source.dbt_datanl_prod.stg_redshift.d_day": ["model.dbt_datanl_prod.d_day"], "source.dbt_datanl_prod.stg_redshift.d_delivery_type": ["model.dbt_datanl_prod.d_delivery_type"], "source.dbt_datanl_prod.stg_redshift.d_department": ["model.dbt_datanl_prod.d_department"], "source.dbt_datanl_prod.stg_redshift.d_family": ["model.dbt_datanl_prod.d_family"], "source.dbt_datanl_prod.stg_redshift.d_freight_method": ["model.dbt_datanl_prod.d_freight_method"], "source.dbt_datanl_prod.stg_redshift.d_label": ["model.dbt_datanl_prod.d_label"], "source.dbt_datanl_prod.stg_redshift.d_merchandise_hierarchy": ["model.dbt_datanl_prod.d_merchandise_hierarchy"], "source.dbt_datanl_prod.stg_redshift.d_mkp_product": ["model.dbt_datanl_prod.d_mkp_product"], "source.dbt_datanl_prod.stg_redshift.d_model": ["model.dbt_datanl_prod.d_model"], "source.dbt_datanl_prod.stg_redshift.d_product_nature": ["model.dbt_datanl_prod.d_product_nature"], "source.dbt_datanl_prod.stg_redshift.d_reallocated_digital_type": ["model.dbt_datanl_prod.d_reallocated_digital_type"], "source.dbt_datanl_prod.stg_redshift.logical_stock_snapshot": [], "source.dbt_datanl_prod.stg_redshift.d_return_reason": ["model.dbt_datanl_prod.d_return_reason"], "source.dbt_datanl_prod.stg_redshift.d_return_type": ["model.dbt_datanl_prod.d_return_type"], "source.dbt_datanl_prod.stg_redshift.d_shipping_type": ["model.dbt_datanl_prod.d_shipping_type"], "source.dbt_datanl_prod.stg_redshift.d_sku": ["model.dbt_datanl_prod.d_sku"], "source.dbt_datanl_prod.stg_redshift.d_sport_dpt": ["model.dbt_datanl_prod.d_sport_dpt"], "source.dbt_datanl_prod.stg_redshift.d_touchpoint_channel_type": ["model.dbt_datanl_prod.d_touchpoint_channel_type"], "source.dbt_datanl_prod.stg_redshift.d_week": ["model.dbt_datanl_prod.d_week"], "source.dbt_datanl_prod.stg_redshift.f_availability_rate": ["model.dbt_datanl_prod.f_availability_rate"], "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2019": ["model.dbt_datanl_prod.f_delivery_detail_2019"], "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2020": ["model.dbt_datanl_prod.f_delivery_detail_2020"], "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_2021": ["model.dbt_datanl_prod.f_delivery_detail_2021"], "source.dbt_datanl_prod.stg_redshift.f_delivery_detail_current": ["model.dbt_datanl_prod.f_delivery_detail_current"], "source.dbt_datanl_prod.stg_redshift.f_delivery_header_2019": ["model.dbt_datanl_prod.f_delivery_header_2019"], "source.dbt_datanl_prod.stg_redshift.f_delivery_header_2020": ["model.dbt_datanl_prod.f_delivery_header_2020"], "source.dbt_datanl_prod.stg_redshift.f_delivery_header_2021": ["model.dbt_datanl_prod.f_delivery_header_2021"], "source.dbt_datanl_prod.stg_redshift.f_delivery_header_current": ["model.dbt_datanl_prod.f_delivery_header_current"], "source.dbt_datanl_prod.stg_redshift.f_mkp_transaction_detail": ["model.dbt_datanl_prod.f_mkp_transaction_detail"], "source.dbt_datanl_prod.stg_redshift.f_postnl_year": ["model.dbt_datanl_prod.f_postnl_year"], "source.dbt_datanl_prod.stg_redshift.f_supply_vc4r_retbox": ["model.dbt_datanl_prod.f_supply_vc4r_retbox"], "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2019": ["model.dbt_datanl_prod.f_transaction_detail_2019"], "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2020": ["model.dbt_datanl_prod.f_transaction_detail_2020"], "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_2021": ["model.dbt_datanl_prod.f_transaction_detail_2021"], "source.dbt_datanl_prod.stg_redshift.f_transaction_detail_current": ["model.dbt_datanl_prod.f_transaction_detail_current"], "source.dbt_datanl_prod.stg_redshift.f_transaction_header_2019": ["model.dbt_datanl_prod.f_transaction_header_2019"], "source.dbt_datanl_prod.stg_redshift.f_transaction_header_2020": ["model.dbt_datanl_prod.f_transaction_header_2020"], "source.dbt_datanl_prod.stg_redshift.f_transaction_header_2021": ["model.dbt_datanl_prod.f_transaction_header_2021"], "source.dbt_datanl_prod.stg_redshift.f_transaction_header_current": ["model.dbt_datanl_prod.f_transaction_header_current"], "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2019": ["model.dbt_datanl_prod.f_transaction_sustainable_2019"], "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2020": ["model.dbt_datanl_prod.f_transaction_sustainable_2020"], "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_2021": ["model.dbt_datanl_prod.f_transaction_sustainable_2021"], "source.dbt_datanl_prod.stg_redshift.f_transaction_sustainable_current": ["model.dbt_datanl_prod.f_transaction_sustainable_current"], "source.dbt_datanl_prod.stg_redshift.lib_web_order_status": ["model.dbt_datanl_prod.lib_web_order_status"], "source.dbt_datanl_prod.stg_redshift.needs_car_autoflow": ["model.dbt_datanl_prod.needs_car_autoflow"], "source.dbt_datanl_prod.stg_redshift.opv_customer__personal_data": ["model.dbt_datanl_prod.opv_customer__personal_data"], "source.dbt_datanl_prod.stg_redshift.opv_review__review": ["model.dbt_datanl_prod.opv_review__review"], "source.dbt_datanl_prod.stg_redshift.opv_user__author": ["model.dbt_datanl_prod.opv_user__author"], "source.dbt_datanl_prod.stg_redshift.physical_stock_snapshot": ["model.dbt_datanl_prod.physical_stock_snapshot"], "source.dbt_datanl_prod.stg_redshift.weight_dimension_finish_product": ["model.dbt_datanl_prod.weight_dimension_finish_product"], "source.dbt_datanl_prod.stg_redshift.zsd_oms_ordtrkhi": ["model.dbt_datanl_prod.zsd_oms_ordtrkhi"]}}