{
    "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v5.json",
        "dbt_version": "1.1.1",
        "generated_at": "2022-08-12T14:47:05.216735Z",
        "invocation_id": "2f34c992-8c96-4a5f-87b1-eac5c0aa0229",
        "env": {},
        "project_id": "48fb1ee707c9926559649fd1c4fcf290",
        "user_id": "867f54ad-df3b-44e0-8080-63d74654bac6",
        "send_anonymous_usage_stats": true,
        "adapter_type": "bigquery"
    },
    "nodes": {
        "model.dbt_datanl_prod.fct_crc_tickets": {
            "raw_sql": "-- Extract the contact reasons from the custom fields column\r\n\r\nWITH cr AS (\r\nSELECT ticket_id,\r\nSUBSTR(REGEXP_EXTRACT(custom_fields, \"360014517660, 'value': ['a-zA-Z0-9_]+\"), 24) AS nl_number,\r\nSUBSTR(REGEXP_EXTRACT(custom_fields, \"360015051759, 'value': ['a-zA-Z0-9_]+\"), 24) AS contact_reason,\r\ncustom_fields\r\nFROM {{ ref('zendesk_tickets') }}\r\n# Exclusion criteria (checked with Remco Meinsma)\r\nWHERE status != 'new'\r\nAND via_channel != 'chat' \r\nAND group_id IN (360006734580, 360003637579) -- Only 'Bellers' and 'Support'\r\nAND NOT (via_channel = 'voice' AND via_source_rel = 'outbound')\r\nAND via_source_from_name != 'Reports' -- Remove automated reports\r\nAND NOT (via_channel = 'web' AND via_source_rel != 'web_widget')),\r\n\r\n-- Improve formatting\r\n\r\ncr_formatted AS (\r\nSELECT ticket_id,\r\nTRIM(nl_number, \"'\") AS nl_number,\r\nCASE \r\n    WHEN contact_reason NOT IN (\"''\", \"None\") THEN TRIM(SUBSTR(contact_reason, 16), \"'\")\r\n    ELSE contact_reason\r\n    END AS contact_reason,\r\ncustom_fields\r\nFROM cr\r\n# Exclude the remaining tickets with no contact reason because they are related to employee error (Checked with Remco Meinsma)\r\nWHERE contact_reason NOT IN (\"''\", \"None\")),\r\n\r\n--- Extract contact reason subcategories\r\n\r\ncr_detail AS (\r\nSELECT ticket_id,\r\nnl_number,\r\ncontact_reason,\r\nCASE \r\n    WHEN contact_reason = 'overig' THEN SUBSTR(REGEXP_EXTRACT(custom_fields, \"360015074300, 'value': ['a-zA-Z0-9_]+\"), 24)\r\n    WHEN contact_reason = 'probleem' THEN SUBSTR(REGEXP_EXTRACT(custom_fields, \"360015040239, 'value': ['a-zA-Z0-9_]+\"), 24)\r\n    WHEN contact_reason = 'informatie' THEN SUBSTR(REGEXP_EXTRACT(custom_fields, \"360015039739, 'value': ['a-zA-Z0-9_]+\"), 24)\r\n    WHEN contact_reason = 'retourneren' THEN SUBSTR(REGEXP_EXTRACT(custom_fields, \"360015074280, 'value': ['a-zA-Z0-9_]+\"), 24) -- Contains values \"None\" and \"''\"\r\n    WHEN contact_reason = 'pro' THEN SUBSTR(REGEXP_EXTRACT(custom_fields, \"360015038759, 'value': ['a-zA-Z0-9_]+\"), 24)\r\n    WHEN contact_reason = 'bestelling' THEN SUBSTR(REGEXP_EXTRACT(custom_fields, \"360015074240, 'value': ['a-zA-Z0-9_]+\"), 36)\r\n    WHEN contact_reason = 'betaling' THEN SUBSTR(REGEXP_EXTRACT(custom_fields, \"360015074220, 'value': ['a-zA-Z0-9_]+\"), 34)\r\n    WHEN contact_reason = 'ontvangen' THEN SUBSTR(REGEXP_EXTRACT(custom_fields, \"360015074460, 'value': ['a-zA-Z0-9_]+\"), 24)\r\n    WHEN contact_reason = 'zakelijk' THEN SUBSTR(REGEXP_EXTRACT(custom_fields, \"360015039779, 'value': ['a-zA-Z0-9_]+\"), 24)\r\n    WHEN contact_reason = 'bezorging' THEN SUBSTR(REGEXP_EXTRACT(custom_fields, \"360015038799, 'value': ['a-zA-Z0-9_]+\"), 35)\r\n    ELSE 'No Contact Reason'\r\n    END AS contact_reason_sub\r\nFROM cr_formatted)\r\n\r\n-- Improve formatting\r\n\r\nSELECT ticket_id,\r\nnl_number,\r\nINITCAP(contact_reason) as contact_reason,\r\nTRIM(REGEXP_REPLACE(contact_reason_sub, 'overig_|probleem_|informatie_|retourneren_|pro_|bestelling_|betaling_|ontvangen_|zakelijk_|bezorging_', ''), \"'1\") as contact_reason_sub\r\nFROM cr_detail",
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_datanl_prod.zendesk_tickets"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "fct_crc_tickets"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_crc_tickets",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\fct_crc_tickets.sql",
            "original_file_path": "models\\Datamart\\fct_crc_tickets.sql",
            "name": "fct_crc_tickets",
            "alias": "fct_crc_tickets",
            "checksum": {
                "name": "sha256",
                "checksum": "5867399ea2a93e1b3c5ef822b85d79b1d623caf2d82dde2c29790a5ba20d38f5"
            },
            "tags": [],
            "refs": [
                [
                    "zendesk_tickets"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660305773.8789902
        },
        "model.dbt_datanl_prod.zendesk_customf": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('zendesk', 'src_zendesk_customf') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.zendesk.src_zendesk_customf"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "zendesk",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "zendesk",
            "fqn": [
                "dbt_datanl_prod",
                "zendesk",
                "zendesk_customf"
            ],
            "unique_id": "model.dbt_datanl_prod.zendesk_customf",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "zendesk\\zendesk_customf.sql",
            "original_file_path": "models\\zendesk\\zendesk_customf.sql",
            "name": "zendesk_customf",
            "alias": "zendesk_customf",
            "checksum": {
                "name": "sha256",
                "checksum": "e422601427404f903adb8bbba53fe44adcce4ec79193ac1a9ba7f97b4cfc9318"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "zendesk",
                    "src_zendesk_customf"
                ]
            ],
            "description": "A test dbt customf model",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "The primary key for this table",
                    "meta": {
                        "project_name": "zendesk",
                        "maturity": "dev",
                        "version": 0.2
                    },
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "dbt_datanl_prod://models\\zendesk\\index.yml",
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\zendesk\\zendesk_customf.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\zendesk\\zendesk_customf.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "zendesk",
                "materialized": "table"
            },
            "created_at": 1660305774.1795087,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`zendesk`.`src_zendesk_customf`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`zendesk`.`zendesk_customf`"
        },
        "model.dbt_datanl_prod.zendesk_tickets": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('zendesk', 'src_zendesk_tickets') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.zendesk.src_zendesk_tickets"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "zendesk",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "zendesk",
            "fqn": [
                "dbt_datanl_prod",
                "zendesk",
                "zendesk_tickets"
            ],
            "unique_id": "model.dbt_datanl_prod.zendesk_tickets",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "zendesk\\zendesk_tickets.sql",
            "original_file_path": "models\\zendesk\\zendesk_tickets.sql",
            "name": "zendesk_tickets",
            "alias": "zendesk_tickets",
            "checksum": {
                "name": "sha256",
                "checksum": "c26dc56e5c71c53b734147972355ac4cffb4490be1b5c2d6adc00d122dded89e"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "zendesk",
                    "src_zendesk_tickets"
                ]
            ],
            "description": "A test dbt model for zendesk tickets",
            "columns": {
                "ticket_id": {
                    "name": "ticket_id",
                    "description": "The primary key for this table",
                    "meta": {
                        "project_name": "zendesk",
                        "maturity": "dev",
                        "version": 0.2
                    },
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "dbt_datanl_prod://models\\zendesk\\index.yml",
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\zendesk\\zendesk_tickets.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\zendesk\\zendesk_tickets.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "zendesk",
                "materialized": "table"
            },
            "created_at": 1660305774.1785128,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`zendesk`.`src_zendesk_tickets`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`zendesk`.`zendesk_tickets`"
        },
        "test.dbt_datanl_prod.unique_zendesk_tickets_ticket_id.033781ea12": {
            "raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "ticket_id",
                    "model": "{{ get_where_subquery(ref('zendesk_tickets')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.zendesk_tickets"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "datanl-prod-fy0d",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_datanl_prod",
                "zendesk",
                "unique_zendesk_tickets_ticket_id"
            ],
            "unique_id": "test.dbt_datanl_prod.unique_zendesk_tickets_ticket_id.033781ea12",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "unique_zendesk_tickets_ticket_id.sql",
            "original_file_path": "models\\zendesk\\index.yml",
            "name": "unique_zendesk_tickets_ticket_id",
            "alias": "unique_zendesk_tickets_ticket_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "zendesk_tickets"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1660305774.1805115,
            "column_name": "ticket_id",
            "file_key_name": "models.zendesk_tickets"
        },
        "test.dbt_datanl_prod.not_null_zendesk_tickets_ticket_id.3e2640a89b": {
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "ticket_id",
                    "model": "{{ get_where_subquery(ref('zendesk_tickets')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.zendesk_tickets"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "datanl-prod-fy0d",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_datanl_prod",
                "zendesk",
                "not_null_zendesk_tickets_ticket_id"
            ],
            "unique_id": "test.dbt_datanl_prod.not_null_zendesk_tickets_ticket_id.3e2640a89b",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "not_null_zendesk_tickets_ticket_id.sql",
            "original_file_path": "models\\zendesk\\index.yml",
            "name": "not_null_zendesk_tickets_ticket_id",
            "alias": "not_null_zendesk_tickets_ticket_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "zendesk_tickets"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1660305774.1833696,
            "column_name": "ticket_id",
            "file_key_name": "models.zendesk_tickets"
        },
        "test.dbt_datanl_prod.unique_zendesk_customf_id.36444af5c9": {
            "raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(ref('zendesk_customf')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.zendesk_customf"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "datanl-prod-fy0d",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_datanl_prod",
                "zendesk",
                "unique_zendesk_customf_id"
            ],
            "unique_id": "test.dbt_datanl_prod.unique_zendesk_customf_id.36444af5c9",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "unique_zendesk_customf_id.sql",
            "original_file_path": "models\\zendesk\\index.yml",
            "name": "unique_zendesk_customf_id",
            "alias": "unique_zendesk_customf_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "zendesk_customf"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1660305774.1861129,
            "column_name": "id",
            "file_key_name": "models.zendesk_customf"
        },
        "test.dbt_datanl_prod.not_null_zendesk_customf_id.0077092197": {
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(ref('zendesk_customf')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.zendesk_customf"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "datanl-prod-fy0d",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_datanl_prod",
                "zendesk",
                "not_null_zendesk_customf_id"
            ],
            "unique_id": "test.dbt_datanl_prod.not_null_zendesk_customf_id.0077092197",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "not_null_zendesk_customf_id.sql",
            "original_file_path": "models\\zendesk\\index.yml",
            "name": "not_null_zendesk_customf_id",
            "alias": "not_null_zendesk_customf_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "zendesk_customf"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1660305774.1889222,
            "column_name": "id",
            "file_key_name": "models.zendesk_customf"
        },
        "model.dbt_datanl_prod.stg_f_delivery_header_2021": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_delivery_header_2021') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_delivery_header_2021"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_delivery_header_2021"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_delivery_header_2021",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_delivery_header_2021.sql",
            "original_file_path": "models\\redshift\\stg_f_delivery_header_2021.sql",
            "name": "stg_f_delivery_header_2021",
            "alias": "stg_f_delivery_header_2021",
            "checksum": {
                "name": "sha256",
                "checksum": "71a246430f936981d5cf828c17a2dcc0e0c17c1a4151bc90aaec78a28dbc7132"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_delivery_header_2021"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_header_2021.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_header_2021.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.423108,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_delivery_header_2021`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_delivery_header_2021`"
        },
        "model.dbt_datanl_prod.stg_f_transaction_sustainable_current": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_transaction_sustainable_current') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_current"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_transaction_sustainable_current"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_transaction_sustainable_current",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_transaction_sustainable_current.sql",
            "original_file_path": "models\\redshift\\stg_f_transaction_sustainable_current.sql",
            "name": "stg_f_transaction_sustainable_current",
            "alias": "stg_f_transaction_sustainable_current",
            "checksum": {
                "name": "sha256",
                "checksum": "c95a1d7092097d0a54d06090cba6b8b4cd2a5b8e114b11ff5825d5d2d411c301"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_transaction_sustainable_current"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_sustainable_current.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_sustainable_current.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.437014,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_transaction_sustainable_current`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_transaction_sustainable_current`"
        },
        "model.dbt_datanl_prod.stg_physical_stock_snapshot": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_physical_stock_snapshot') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_physical_stock_snapshot"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_physical_stock_snapshot"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_physical_stock_snapshot",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_physical_stock_snapshot.sql",
            "original_file_path": "models\\redshift\\stg_physical_stock_snapshot.sql",
            "name": "stg_physical_stock_snapshot",
            "alias": "stg_physical_stock_snapshot",
            "checksum": {
                "name": "sha256",
                "checksum": "16be166a434877fb758748bb819a2469c9678fda4c0b8d65fe1ca678a62d1a39"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_physical_stock_snapshot"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_physical_stock_snapshot.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_physical_stock_snapshot.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.4405074,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_physical_stock_snapshot`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_physical_stock_snapshot`"
        },
        "model.dbt_datanl_prod.stg_d_week": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_week') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_week"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_week"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_week",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_week.sql",
            "original_file_path": "models\\redshift\\stg_d_week.sql",
            "name": "stg_d_week",
            "alias": "stg_d_week",
            "checksum": {
                "name": "sha256",
                "checksum": "1cc103d2daa79812f019321cd757615c745fd4545f10d0275f047926469de452"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_week"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_week.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_week.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.445617,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_week`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_week`"
        },
        "model.dbt_datanl_prod.stg_d_business_unit": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_business_unit') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_business_unit"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_business_unit"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_business_unit",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_business_unit.sql",
            "original_file_path": "models\\redshift\\stg_d_business_unit.sql",
            "name": "stg_d_business_unit",
            "alias": "stg_d_business_unit",
            "checksum": {
                "name": "sha256",
                "checksum": "b25de2ed3b33d781f6e6f708450f103202749be754834f4a7203bea2b3f43add"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_business_unit"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_business_unit.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_business_unit.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.448587,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_business_unit`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_business_unit`"
        },
        "model.dbt_datanl_prod.stg_d_return_reason": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_return_reason') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_return_reason"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_return_reason"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_return_reason",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_return_reason.sql",
            "original_file_path": "models\\redshift\\stg_d_return_reason.sql",
            "name": "stg_d_return_reason",
            "alias": "stg_d_return_reason",
            "checksum": {
                "name": "sha256",
                "checksum": "8e1b8fcdfc3e82686997a9de79ceac1296c232af37dcb9014a711dfb1f00b4b1"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_return_reason"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_return_reason.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_return_reason.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.451266,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_return_reason`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_return_reason`"
        },
        "model.dbt_datanl_prod.stg_weight_dimension_finish_product": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_weight_dimension_finish_product') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_weight_dimension_finish_product"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_weight_dimension_finish_product"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_weight_dimension_finish_product",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_weight_dimension_finish_product.sql",
            "original_file_path": "models\\redshift\\stg_weight_dimension_finish_product.sql",
            "name": "stg_weight_dimension_finish_product",
            "alias": "stg_weight_dimension_finish_product",
            "checksum": {
                "name": "sha256",
                "checksum": "3cd3df66ca5415179fa2c35721eb36fc4279cc9f962938edf0117ffd3564fc70"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_weight_dimension_finish_product"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_weight_dimension_finish_product.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_weight_dimension_finish_product.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.45428,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_weight_dimension_finish_product`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_weight_dimension_finish_product`"
        },
        "model.dbt_datanl_prod.stg_d_sku": {
            "raw_sql": "{{\r\n  config(\r\n    materialized = 'table',\r\n    )\r\n}}\r\n\r\nselect *\r\n\r\nfrom {{ source('redshift', 'src_d_sku') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_sku"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_sku"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_sku",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_sku.sql",
            "original_file_path": "models\\redshift\\stg_d_sku.sql",
            "name": "stg_d_sku",
            "alias": "stg_d_sku",
            "checksum": {
                "name": "sha256",
                "checksum": "5b3e4cf88039d11dd40ce90e04a8feaa803560ee2a116a3235738cea8afcbd93"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_sku"
                ]
            ],
            "description": "A test dbt model",
            "columns": {
                "sku_idr_sku": {
                    "name": "sku_idr_sku",
                    "description": "The primary key for this table",
                    "meta": {
                        "project_name": "Promise",
                        "maturity": "dev",
                        "version": 0.2
                    },
                    "data_type": null,
                    "quote": null,
                    "tags": [
                        "dbt 1",
                        "Internal db1",
                        "External db2"
                    ]
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "dbt_datanl_prod://models\\redshift\\stg_d_sku.yml",
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_sku.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_sku.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.6779506,
            "compiled_sql": "\n\nselect *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_sku`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_sku`"
        },
        "model.dbt_datanl_prod.stg_f_transaction_header_2021": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_transaction_header_2021') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_transaction_header_2021"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_transaction_header_2021"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_transaction_header_2021",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_transaction_header_2021.sql",
            "original_file_path": "models\\redshift\\stg_f_transaction_header_2021.sql",
            "name": "stg_f_transaction_header_2021",
            "alias": "stg_f_transaction_header_2021",
            "checksum": {
                "name": "sha256",
                "checksum": "78d4c5570712e818c93dde6a4bde8fd6ffbee4dbeca36740b06131264a2f627d"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_transaction_header_2021"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_header_2021.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_header_2021.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.4605346,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_transaction_header_2021`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_transaction_header_2021`"
        },
        "model.dbt_datanl_prod.stg_d_mkp_product": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_mkp_product') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_mkp_product"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_mkp_product"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_mkp_product",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_mkp_product.sql",
            "original_file_path": "models\\redshift\\stg_d_mkp_product.sql",
            "name": "stg_d_mkp_product",
            "alias": "stg_d_mkp_product",
            "checksum": {
                "name": "sha256",
                "checksum": "0858cd7a5b28c4de3d6557e2f88d38a46cdee5247527c57785cb15c680061fbe"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_mkp_product"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_mkp_product.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_mkp_product.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.4632797,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_mkp_product`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_mkp_product`"
        },
        "model.dbt_datanl_prod.stg_d_sport_dpt": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_sport_dpt') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_sport_dpt"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_sport_dpt"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_sport_dpt",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_sport_dpt.sql",
            "original_file_path": "models\\redshift\\stg_d_sport_dpt.sql",
            "name": "stg_d_sport_dpt",
            "alias": "stg_d_sport_dpt",
            "checksum": {
                "name": "sha256",
                "checksum": "50dadeb6d3426f56da17b14bb28e8fb330937a9a6cfda44ef0c5a7364fe1112e"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_sport_dpt"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_sport_dpt.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_sport_dpt.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.4648366,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_sport_dpt`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_sport_dpt`"
        },
        "model.dbt_datanl_prod.stg_opv_review__review": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_opv_review__review') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_opv_review__review"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_opv_review__review"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_opv_review__review",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_opv_review__review.sql",
            "original_file_path": "models\\redshift\\stg_opv_review__review.sql",
            "name": "stg_opv_review__review",
            "alias": "stg_opv_review__review",
            "checksum": {
                "name": "sha256",
                "checksum": "33c22504a5fbbbe421f86fd2f428aa5c326b0107d1d40a48933e61fa9419c91d"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_opv_review__review"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_opv_review__review.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_opv_review__review.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.4679773,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_opv_review__review`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_opv_review__review`"
        },
        "model.dbt_datanl_prod.stg_lib_web_order_status": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_lib_web_order_status') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_lib_web_order_status"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_lib_web_order_status"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_lib_web_order_status",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_lib_web_order_status.sql",
            "original_file_path": "models\\redshift\\stg_lib_web_order_status.sql",
            "name": "stg_lib_web_order_status",
            "alias": "stg_lib_web_order_status",
            "checksum": {
                "name": "sha256",
                "checksum": "a38d7c591bbd292b057cf60d7f1fe5ac2bb8f6f770784140147d2abc8874378c"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_lib_web_order_status"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_lib_web_order_status.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_lib_web_order_status.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.4705873,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_lib_web_order_status`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_lib_web_order_status`"
        },
        "model.dbt_datanl_prod.stg_f_transaction_detail_2020": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_transaction_detail_2020') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2020"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_transaction_detail_2020"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_transaction_detail_2020",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_transaction_detail_2020.sql",
            "original_file_path": "models\\redshift\\stg_f_transaction_detail_2020.sql",
            "name": "stg_f_transaction_detail_2020",
            "alias": "stg_f_transaction_detail_2020",
            "checksum": {
                "name": "sha256",
                "checksum": "268f50ffea53387c953874ae474ee4f3a7d9b34cba2e841fd90fc4913e8cc2ec"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_transaction_detail_2020"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_detail_2020.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_detail_2020.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.47358,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_transaction_detail_2020`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_transaction_detail_2020`"
        },
        "model.dbt_datanl_prod.stg_f_delivery_detail_2019": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_delivery_detail_2019') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2019"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_delivery_detail_2019"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_delivery_detail_2019",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_delivery_detail_2019.sql",
            "original_file_path": "models\\redshift\\stg_f_delivery_detail_2019.sql",
            "name": "stg_f_delivery_detail_2019",
            "alias": "stg_f_delivery_detail_2019",
            "checksum": {
                "name": "sha256",
                "checksum": "2781ec12b039878e0cab4d056a8907abe1bc4a8ddf01f93669055e8e0fe99526"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_delivery_detail_2019"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_detail_2019.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_detail_2019.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.4768796,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_delivery_detail_2019`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_delivery_detail_2019`"
        },
        "model.dbt_datanl_prod.stg_f_transaction_header_current": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_transaction_header_current') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_transaction_header_current"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_transaction_header_current"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_transaction_header_current",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_transaction_header_current.sql",
            "original_file_path": "models\\redshift\\stg_f_transaction_header_current.sql",
            "name": "stg_f_transaction_header_current",
            "alias": "stg_f_transaction_header_current",
            "checksum": {
                "name": "sha256",
                "checksum": "ce2d0e61109a290e6897e9f44ff5eac5d382d7846f4524d067efadd84f6f6a34"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_transaction_header_current"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_header_current.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_header_current.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.478942,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_transaction_header_current`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_transaction_header_current`"
        },
        "model.dbt_datanl_prod.stg_f_transaction_sustainable_2021": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_transaction_sustainable_2021') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2021"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_transaction_sustainable_2021"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_transaction_sustainable_2021",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_transaction_sustainable_2021.sql",
            "original_file_path": "models\\redshift\\stg_f_transaction_sustainable_2021.sql",
            "name": "stg_f_transaction_sustainable_2021",
            "alias": "stg_f_transaction_sustainable_2021",
            "checksum": {
                "name": "sha256",
                "checksum": "5005f62981bc0491bb7967d3fe101cd2e3e166624f9d3409e4269e7dff052773"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_transaction_sustainable_2021"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_sustainable_2021.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_sustainable_2021.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.482098,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_transaction_sustainable_2021`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_transaction_sustainable_2021`"
        },
        "model.dbt_datanl_prod.stg_zsd_oms_ordtrkhi": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_zsd_oms_ordtrkhi') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_zsd_oms_ordtrkhi"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_zsd_oms_ordtrkhi"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_zsd_oms_ordtrkhi",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_zsd_oms_ordtrkhi.sql",
            "original_file_path": "models\\redshift\\stg_zsd_oms_ordtrkhi.sql",
            "name": "stg_zsd_oms_ordtrkhi",
            "alias": "stg_zsd_oms_ordtrkhi",
            "checksum": {
                "name": "sha256",
                "checksum": "3f89eb7cc0049dfcc73cd61e0770bf6c9856042108c8f45f3a1783b75838d424"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_zsd_oms_ordtrkhi"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_zsd_oms_ordtrkhi.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_zsd_oms_ordtrkhi.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.4849875,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_zsd_oms_ordtrkhi`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_zsd_oms_ordtrkhi`"
        },
        "model.dbt_datanl_prod.stg_f_transaction_sustainable_2019": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_transaction_sustainable_2019') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2019"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_transaction_sustainable_2019"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_transaction_sustainable_2019",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_transaction_sustainable_2019.sql",
            "original_file_path": "models\\redshift\\stg_f_transaction_sustainable_2019.sql",
            "name": "stg_f_transaction_sustainable_2019",
            "alias": "stg_f_transaction_sustainable_2019",
            "checksum": {
                "name": "sha256",
                "checksum": "a7df73d3f5fc1550e20b48ec694d1bcc4eaebf935e2ee78295da771466c60807"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_transaction_sustainable_2019"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_sustainable_2019.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_sustainable_2019.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.488276,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_transaction_sustainable_2019`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_transaction_sustainable_2019`"
        },
        "model.dbt_datanl_prod.stg_d_shipping_type": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_shipping_type') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_shipping_type"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_shipping_type"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_shipping_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_shipping_type.sql",
            "original_file_path": "models\\redshift\\stg_d_shipping_type.sql",
            "name": "stg_d_shipping_type",
            "alias": "stg_d_shipping_type",
            "checksum": {
                "name": "sha256",
                "checksum": "23c74049d9326752692858b5ac1f54305685e5a804f056b7996fe449ca932268"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_shipping_type"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_shipping_type.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_shipping_type.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.4913743,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_shipping_type`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_shipping_type`"
        },
        "model.dbt_datanl_prod.stg_f_supply_vc4r_retbox": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_supply_vc4r_retbox') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_supply_vc4r_retbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_supply_vc4r_retbox"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_supply_vc4r_retbox",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_supply_vc4r_retbox.sql",
            "original_file_path": "models\\redshift\\stg_f_supply_vc4r_retbox.sql",
            "name": "stg_f_supply_vc4r_retbox",
            "alias": "stg_f_supply_vc4r_retbox",
            "checksum": {
                "name": "sha256",
                "checksum": "657cad38617525fb9c000681890f60d9bfa15cd35bc843d6363783ee33915057"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_supply_vc4r_retbox"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_supply_vc4r_retbox.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_supply_vc4r_retbox.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.4949663,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_supply_vc4r_retbox`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_supply_vc4r_retbox`"
        },
        "model.dbt_datanl_prod.stg_d_merchandise_hierarchy": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_merchandise_hierarchy') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_merchandise_hierarchy"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_merchandise_hierarchy"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_merchandise_hierarchy",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_merchandise_hierarchy.sql",
            "original_file_path": "models\\redshift\\stg_d_merchandise_hierarchy.sql",
            "name": "stg_d_merchandise_hierarchy",
            "alias": "stg_d_merchandise_hierarchy",
            "checksum": {
                "name": "sha256",
                "checksum": "69ccbdb5fa5b79337003e71523e334637c82de6229d1eedfd7fb23b05e2d1a37"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_merchandise_hierarchy"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_merchandise_hierarchy.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_merchandise_hierarchy.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.4984164,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_merchandise_hierarchy`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_merchandise_hierarchy`"
        },
        "model.dbt_datanl_prod.stg_d_family": {
            "raw_sql": "select *\r\n\r\n\r\nfrom {{ source('redshift', 'src_d_family') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_family"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_family"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_family",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_family.sql",
            "original_file_path": "models\\redshift\\stg_d_family.sql",
            "name": "stg_d_family",
            "alias": "stg_d_family",
            "checksum": {
                "name": "sha256",
                "checksum": "78287fda2410675c8e50fd2a95da24118c42ad6fa5d406bd50f5416f453a9bb4"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_family"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_family.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_family.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5015972,
            "compiled_sql": "select *\n\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_family`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_family`"
        },
        "model.dbt_datanl_prod.stg_f_delivery_detail_2020": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_delivery_detail_2020') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2020"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_delivery_detail_2020"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_delivery_detail_2020",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_delivery_detail_2020.sql",
            "original_file_path": "models\\redshift\\stg_f_delivery_detail_2020.sql",
            "name": "stg_f_delivery_detail_2020",
            "alias": "stg_f_delivery_detail_2020",
            "checksum": {
                "name": "sha256",
                "checksum": "70d4eb4f19dce9505670b11db84f0f48ddb230771dda919d300d72f6072a17d7"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_delivery_detail_2020"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_detail_2020.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_detail_2020.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.505263,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_delivery_detail_2020`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_delivery_detail_2020`"
        },
        "model.dbt_datanl_prod.stg_d_label": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_label') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_label"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_label"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_label",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_label.sql",
            "original_file_path": "models\\redshift\\stg_d_label.sql",
            "name": "stg_d_label",
            "alias": "stg_d_label",
            "checksum": {
                "name": "sha256",
                "checksum": "4ef23e08ea00e59fff4f01327fa35e0733898de4949fccf2822017738c87987d"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_label"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_label.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_label.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.50898,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_label`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_label`"
        },
        "model.dbt_datanl_prod.stg_f_delivery_header_current": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_delivery_header_current') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_delivery_header_current"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_delivery_header_current"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_delivery_header_current",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_delivery_header_current.sql",
            "original_file_path": "models\\redshift\\stg_f_delivery_header_current.sql",
            "name": "stg_f_delivery_header_current",
            "alias": "stg_f_delivery_header_current",
            "checksum": {
                "name": "sha256",
                "checksum": "23846502caf76504bb0f0668a7c59da040e54f815699406cf065c4ec3dcebee2"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_delivery_header_current"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_header_current.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_header_current.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5123222,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_delivery_header_current`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_delivery_header_current`"
        },
        "model.dbt_datanl_prod.stg_opv_user__author": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_opv_user__author') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_opv_user__author"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_opv_user__author"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_opv_user__author",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_opv_user__author.sql",
            "original_file_path": "models\\redshift\\stg_opv_user__author.sql",
            "name": "stg_opv_user__author",
            "alias": "stg_opv_user__author",
            "checksum": {
                "name": "sha256",
                "checksum": "6bdb24ba45952b11a40300b04c0a10b897bae76c0ec5567e7fb8bc6b15fae3ab"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_opv_user__author"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_opv_user__author.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_opv_user__author.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.514843,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_opv_user__author`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_opv_user__author`"
        },
        "model.dbt_datanl_prod.stg_needs_car_autoflow": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_needs_car_autoflow') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_needs_car_autoflow"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_needs_car_autoflow"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_needs_car_autoflow",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_needs_car_autoflow.sql",
            "original_file_path": "models\\redshift\\stg_needs_car_autoflow.sql",
            "name": "stg_needs_car_autoflow",
            "alias": "stg_needs_car_autoflow",
            "checksum": {
                "name": "sha256",
                "checksum": "d4a9d8b891f8934e8597426be666b28354d1f05766eba3faf588efd2e93d9dd8"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_needs_car_autoflow"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_needs_car_autoflow.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_needs_car_autoflow.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.517202,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_needs_car_autoflow`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_needs_car_autoflow`"
        },
        "model.dbt_datanl_prod.stg_f_delivery_detail_2021": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_delivery_detail_2021') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2021"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_delivery_detail_2021"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_delivery_detail_2021",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_delivery_detail_2021.sql",
            "original_file_path": "models\\redshift\\stg_f_delivery_detail_2021.sql",
            "name": "stg_f_delivery_detail_2021",
            "alias": "stg_f_delivery_detail_2021",
            "checksum": {
                "name": "sha256",
                "checksum": "4c649292131614287e869c1f80cd6140c26f02d363d38dae51a68a50e1da1217"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_delivery_detail_2021"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_detail_2021.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_detail_2021.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5197747,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_delivery_detail_2021`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_delivery_detail_2021`"
        },
        "model.dbt_datanl_prod.stg_f_delivery_header_2020": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_delivery_header_2020') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_delivery_header_2020"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_delivery_header_2020"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_delivery_header_2020",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_delivery_header_2020.sql",
            "original_file_path": "models\\redshift\\stg_f_delivery_header_2020.sql",
            "name": "stg_f_delivery_header_2020",
            "alias": "stg_f_delivery_header_2020",
            "checksum": {
                "name": "sha256",
                "checksum": "4e984cf50f8e7daad6939a0be15ffc999065819383e1723e1df3812eb985429f"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_delivery_header_2020"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_header_2020.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_header_2020.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5221376,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_delivery_header_2020`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_delivery_header_2020`"
        },
        "model.dbt_datanl_prod.stg_f_transaction_header_2019": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_transaction_header_2019') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_transaction_header_2019"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_transaction_header_2019"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_transaction_header_2019",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_transaction_header_2019.sql",
            "original_file_path": "models\\redshift\\stg_f_transaction_header_2019.sql",
            "name": "stg_f_transaction_header_2019",
            "alias": "stg_f_transaction_header_2019",
            "checksum": {
                "name": "sha256",
                "checksum": "ed077eda2d6738e18a6e06a9e8f2c05cf6cf6be57ef9022738bfaa1be1e2bfa9"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_transaction_header_2019"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_header_2019.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_header_2019.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5248308,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_transaction_header_2019`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_transaction_header_2019`"
        },
        "model.dbt_datanl_prod.stg_d_customers": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_customers') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_customers"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_customers"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_customers",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_customers.sql",
            "original_file_path": "models\\redshift\\stg_d_customers.sql",
            "name": "stg_d_customers",
            "alias": "stg_d_customers",
            "checksum": {
                "name": "sha256",
                "checksum": "c750d7db29c318a1f2911e816a973feac2791886c63bf473e18b7bcf643c612f"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_customers"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_customers.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_customers.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5272264,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_customers`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_customers`"
        },
        "model.dbt_datanl_prod.stg_f_mkp_transaction_detail": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_mkp_transaction_detail') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_mkp_transaction_detail"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_mkp_transaction_detail"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_mkp_transaction_detail",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_mkp_transaction_detail.sql",
            "original_file_path": "models\\redshift\\stg_f_mkp_transaction_detail.sql",
            "name": "stg_f_mkp_transaction_detail",
            "alias": "stg_f_mkp_transaction_detail",
            "checksum": {
                "name": "sha256",
                "checksum": "2bfffd451edea1dfd5e0d8d8abd2f2dbf94ceccea2a345e743889399ec200d95"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_mkp_transaction_detail"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_mkp_transaction_detail.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_mkp_transaction_detail.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5297637,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_mkp_transaction_detail`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_mkp_transaction_detail`"
        },
        "model.dbt_datanl_prod.stg_d_department": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_department') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_department"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_department"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_department",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_department.sql",
            "original_file_path": "models\\redshift\\stg_d_department.sql",
            "name": "stg_d_department",
            "alias": "stg_d_department",
            "checksum": {
                "name": "sha256",
                "checksum": "6c11e6254a0ad3bce302e5507a45809e2e588c0add6a5964e03a941e5f8c19f9"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_department"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_department.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_department.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.532711,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_department`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_department`"
        },
        "model.dbt_datanl_prod.stg_d_freight_method": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_freight_method') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_freight_method"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_freight_method"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_freight_method",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_freight_method.sql",
            "original_file_path": "models\\redshift\\stg_d_freight_method.sql",
            "name": "stg_d_freight_method",
            "alias": "stg_d_freight_method",
            "checksum": {
                "name": "sha256",
                "checksum": "4d7e2656d86cee6d16cbc895d44f1d9639cd66dade34b51b091898bd20f387f1"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_freight_method"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_freight_method.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_freight_method.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5362043,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_freight_method`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_freight_method`"
        },
        "model.dbt_datanl_prod.stg_d_reallocated_digital_type": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_reallocated_digital_type') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_reallocated_digital_type"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_reallocated_digital_type"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_reallocated_digital_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_reallocated_digital_type.sql",
            "original_file_path": "models\\redshift\\stg_d_reallocated_digital_type.sql",
            "name": "stg_d_reallocated_digital_type",
            "alias": "stg_d_reallocated_digital_type",
            "checksum": {
                "name": "sha256",
                "checksum": "efcf850f8da75a8a594a3d3f624ccfee737e6f05dea29b0c565d80eb58bc867c"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_reallocated_digital_type"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_reallocated_digital_type.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_reallocated_digital_type.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5413136,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_reallocated_digital_type`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_reallocated_digital_type`"
        },
        "model.dbt_datanl_prod.stg_d_customer_channel_type": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_customer_channel_type') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_customer_channel_type"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_customer_channel_type"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_customer_channel_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_customer_channel_type.sql",
            "original_file_path": "models\\redshift\\stg_d_customer_channel_type.sql",
            "name": "stg_d_customer_channel_type",
            "alias": "stg_d_customer_channel_type",
            "checksum": {
                "name": "sha256",
                "checksum": "6d59ee1235d5789f333f9c8fd68e9d2c44572618c24fa7d64e2d2085aa43c8c0"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_customer_channel_type"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_customer_channel_type.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_customer_channel_type.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5435688,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_customer_channel_type`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_customer_channel_type`"
        },
        "model.dbt_datanl_prod.stg_d_touchpoint_channel_type": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_touchpoint_channel_type') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_touchpoint_channel_type"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_touchpoint_channel_type"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_touchpoint_channel_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_touchpoint_channel_type.sql",
            "original_file_path": "models\\redshift\\stg_d_touchpoint_channel_type.sql",
            "name": "stg_d_touchpoint_channel_type",
            "alias": "stg_d_touchpoint_channel_type",
            "checksum": {
                "name": "sha256",
                "checksum": "243099bcc0cdd762590ae4db8cd9e8d33d2aa10ee0ccc583d2a1eb352fd6a6a9"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_touchpoint_channel_type"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_touchpoint_channel_type.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_touchpoint_channel_type.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5476515,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_touchpoint_channel_type`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_touchpoint_channel_type`"
        },
        "model.dbt_datanl_prod.stg_f_delivery_detail_current": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_delivery_detail_current') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_delivery_detail_current"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_delivery_detail_current"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_delivery_detail_current",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_delivery_detail_current.sql",
            "original_file_path": "models\\redshift\\stg_f_delivery_detail_current.sql",
            "name": "stg_f_delivery_detail_current",
            "alias": "stg_f_delivery_detail_current",
            "checksum": {
                "name": "sha256",
                "checksum": "0d915408130c830000a4479796ce73eecd9401d875f65568fc567092d61c8457"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_delivery_detail_current"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_detail_current.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_detail_current.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5506418,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_delivery_detail_current`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_delivery_detail_current`"
        },
        "model.dbt_datanl_prod.stg_d_product_nature": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_product_nature') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_product_nature"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_product_nature"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_product_nature",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_product_nature.sql",
            "original_file_path": "models\\redshift\\stg_d_product_nature.sql",
            "name": "stg_d_product_nature",
            "alias": "stg_d_product_nature",
            "checksum": {
                "name": "sha256",
                "checksum": "91b15d00969b6599ddc8c759dd2744318f0737014ba244108592e139507137b0"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_product_nature"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_product_nature.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_product_nature.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5537252,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_product_nature`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_product_nature`"
        },
        "model.dbt_datanl_prod.stg_f_transaction_detail_2021": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_transaction_detail_2021') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2021"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_transaction_detail_2021"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_transaction_detail_2021",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_transaction_detail_2021.sql",
            "original_file_path": "models\\redshift\\stg_f_transaction_detail_2021.sql",
            "name": "stg_f_transaction_detail_2021",
            "alias": "stg_f_transaction_detail_2021",
            "checksum": {
                "name": "sha256",
                "checksum": "ae2eda3da9332910d5823bcdf92d7d8365750bc79537b8f53da9c17892d370d9"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_transaction_detail_2021"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_detail_2021.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_detail_2021.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5570753,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_transaction_detail_2021`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_transaction_detail_2021`"
        },
        "model.dbt_datanl_prod.stg_d_return_type": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_return_type') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_return_type"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_return_type"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_return_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_return_type.sql",
            "original_file_path": "models\\redshift\\stg_d_return_type.sql",
            "name": "stg_d_return_type",
            "alias": "stg_d_return_type",
            "checksum": {
                "name": "sha256",
                "checksum": "f177e8e83cec0987846b1742eecba8e22784023851a2083c4389d777ae58a056"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_return_type"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_return_type.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_return_type.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5611155,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_return_type`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_return_type`"
        },
        "model.dbt_datanl_prod.stg_opv_customer__personal_data": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_opv_customer__personal_data') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_opv_customer__personal_data"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_opv_customer__personal_data"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_opv_customer__personal_data",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_opv_customer__personal_data.sql",
            "original_file_path": "models\\redshift\\stg_opv_customer__personal_data.sql",
            "name": "stg_opv_customer__personal_data",
            "alias": "stg_opv_customer__personal_data",
            "checksum": {
                "name": "sha256",
                "checksum": "85e42cb60d27e04913e97e314e16e242d4c53fac7db4289f491fd1a667652cd0"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_opv_customer__personal_data"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_opv_customer__personal_data.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_opv_customer__personal_data.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5641186,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_opv_customer__personal_data`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_opv_customer__personal_data`"
        },
        "model.dbt_datanl_prod.stg_f_transaction_header_2020": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_transaction_header_2020') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_transaction_header_2020"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_transaction_header_2020"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_transaction_header_2020",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_transaction_header_2020.sql",
            "original_file_path": "models\\redshift\\stg_f_transaction_header_2020.sql",
            "name": "stg_f_transaction_header_2020",
            "alias": "stg_f_transaction_header_2020",
            "checksum": {
                "name": "sha256",
                "checksum": "67d42cc5aea0b9aec9b0910ccceb75bc8da290d53976d2cc12de330028e2f34c"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_transaction_header_2020"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_header_2020.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_header_2020.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5671115,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_transaction_header_2020`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_transaction_header_2020`"
        },
        "model.dbt_datanl_prod.stg_f_transaction_sustainable_2020": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_transaction_sustainable_2020') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2020"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_transaction_sustainable_2020"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_transaction_sustainable_2020",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_transaction_sustainable_2020.sql",
            "original_file_path": "models\\redshift\\stg_f_transaction_sustainable_2020.sql",
            "name": "stg_f_transaction_sustainable_2020",
            "alias": "stg_f_transaction_sustainable_2020",
            "checksum": {
                "name": "sha256",
                "checksum": "643fefad1c4d279914f3d8e4a6b832007ee432d9a143aafd9848997df1051fc2"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_transaction_sustainable_2020"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_sustainable_2020.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_sustainable_2020.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.570033,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_transaction_sustainable_2020`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_transaction_sustainable_2020`"
        },
        "model.dbt_datanl_prod.stg_f_availability_rate": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_availability_rate') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_availability_rate"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_availability_rate"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_availability_rate",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_availability_rate.sql",
            "original_file_path": "models\\redshift\\stg_f_availability_rate.sql",
            "name": "stg_f_availability_rate",
            "alias": "stg_f_availability_rate",
            "checksum": {
                "name": "sha256",
                "checksum": "198b7e3d049dfd76c78e3e5f7defc137bf4681684c4aef3448e25fc8198e386e"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_availability_rate"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_availability_rate.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_availability_rate.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5725212,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_availability_rate`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_availability_rate`"
        },
        "model.dbt_datanl_prod.stg_d_delivery_type": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_delivery_type') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_delivery_type"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_delivery_type"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_delivery_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_delivery_type.sql",
            "original_file_path": "models\\redshift\\stg_d_delivery_type.sql",
            "name": "stg_d_delivery_type",
            "alias": "stg_d_delivery_type",
            "checksum": {
                "name": "sha256",
                "checksum": "3b909568eb1962d8c50bdc9fad95830c6da481b61af0aaebd3ae49416e3685fb"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_delivery_type"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_delivery_type.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_delivery_type.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5762477,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_delivery_type`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_delivery_type`"
        },
        "model.dbt_datanl_prod.stg_f_delivery_header_2019": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_delivery_header_2019') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_delivery_header_2019"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_delivery_header_2019"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_delivery_header_2019",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_delivery_header_2019.sql",
            "original_file_path": "models\\redshift\\stg_f_delivery_header_2019.sql",
            "name": "stg_f_delivery_header_2019",
            "alias": "stg_f_delivery_header_2019",
            "checksum": {
                "name": "sha256",
                "checksum": "6e6267334fbef387b54d10766b3db3dac1d2e4a078161cbc7ed1e58eded7b5c6"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_delivery_header_2019"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_header_2019.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_delivery_header_2019.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5792375,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_delivery_header_2019`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_delivery_header_2019`"
        },
        "model.dbt_datanl_prod.stg_d_day": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_day') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_day"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_day"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_day",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_day.sql",
            "original_file_path": "models\\redshift\\stg_d_day.sql",
            "name": "stg_d_day",
            "alias": "stg_d_day",
            "checksum": {
                "name": "sha256",
                "checksum": "ddabc4231751d371bcbb8028161f4afe341cfe714dc22108011696c36751addb"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_day"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_day.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_day.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5822444,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_day`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_day`"
        },
        "model.dbt_datanl_prod.stg_f_transaction_detail_2019": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_transaction_detail_2019') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2019"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_transaction_detail_2019"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_transaction_detail_2019",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_transaction_detail_2019.sql",
            "original_file_path": "models\\redshift\\stg_f_transaction_detail_2019.sql",
            "name": "stg_f_transaction_detail_2019",
            "alias": "stg_f_transaction_detail_2019",
            "checksum": {
                "name": "sha256",
                "checksum": "ff30da1c2ed3d3ec28dfaccf12a8da1e41e1b0c84620da0be6e0e739448d7678"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_transaction_detail_2019"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_detail_2019.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_detail_2019.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5866203,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_transaction_detail_2019`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_transaction_detail_2019`"
        },
        "model.dbt_datanl_prod.stg_d_model": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_d_model') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_d_model"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_d_model"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_d_model",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_d_model.sql",
            "original_file_path": "models\\redshift\\stg_d_model.sql",
            "name": "stg_d_model",
            "alias": "stg_d_model",
            "checksum": {
                "name": "sha256",
                "checksum": "16e52530b61c8b268722ae151efee95312ecbe129d808d166c494a58c259d77a"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_d_model"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_d_model.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_d_model.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.59061,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_d_model`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_d_model`"
        },
        "model.dbt_datanl_prod.stg_f_transaction_detail_current": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_transaction_detail_current') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_transaction_detail_current"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_transaction_detail_current"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_transaction_detail_current",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_transaction_detail_current.sql",
            "original_file_path": "models\\redshift\\stg_f_transaction_detail_current.sql",
            "name": "stg_f_transaction_detail_current",
            "alias": "stg_f_transaction_detail_current",
            "checksum": {
                "name": "sha256",
                "checksum": "54ddcf8a80e76c7e952dce1f105491e649b97d1b76a2d7fdda8bc570cfa7bb87"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_transaction_detail_current"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_detail_current.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_transaction_detail_current.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5946064,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_transaction_detail_current`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_transaction_detail_current`"
        },
        "model.dbt_datanl_prod.stg_f_postnl_year": {
            "raw_sql": "select *\r\n\r\nfrom {{ source('redshift', 'src_f_postnl_year') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.redshift.src_f_postnl_year"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "redshift",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "stg_f_postnl_year"
            ],
            "unique_id": "model.dbt_datanl_prod.stg_f_postnl_year",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "redshift\\stg_f_postnl_year.sql",
            "original_file_path": "models\\redshift\\stg_f_postnl_year.sql",
            "name": "stg_f_postnl_year",
            "alias": "stg_f_postnl_year",
            "checksum": {
                "name": "sha256",
                "checksum": "1c16bc1638c64c22486a277630c45f0c10c010a19d1e1747cd50293a77456594"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "redshift",
                    "src_f_postnl_year"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\redshift\\stg_f_postnl_year.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\redshift\\stg_f_postnl_year.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "redshift",
                "materialized": "table"
            },
            "created_at": 1660314703.5975885,
            "compiled_sql": "select *\n\nfrom `datanl-prod-fy0d`.`redshift`.`src_f_postnl_year`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`stg_f_postnl_year`"
        },
        "model.dbt_datanl_prod.fct_products": {
            "raw_sql": "-------------------------------------------------------------------------------------------------------------\r\n-------------------------------------------------------------------------------------------------------------\r\n-- View: stg_products\r\n-- Transformations: joins d_sku with d_sport_dpt to create a general products table\r\n-------------------------------------------------------------------------------------------------------------\r\n-------------------------------------------------------------------------------------------------------------\r\n\r\n-- Subquery: gets the correct data from d_sport_dpt to specify the DSL sport definition\r\nWITH dsl_sport_definition AS(\r\n  SELECT * \r\n  FROM {{ ref('stg_d_sport_dpt') }}\r\n  WHERE type != 2\r\n),\r\n\r\n-- Subquery: skus in transaction data to select only those\r\ntrans_sku_ids AS (\r\n  SELECT DISTINCT sku_idr_sku FROM {{ ref('fct_transaction_detail_last_four_years') }}\r\n)\r\n\r\n-- Main Query\r\nSELECT dsk.*,\r\n  dsd.sport AS dsl_sport,\r\n  dsd.traffic_campaign_sport AS dsl_traffic_campaign_sport\r\n-- Joins were checked for duplicates\r\nFROM {{ ref('stg_d_sku') }} AS dsk\r\nLEFT JOIN (SELECT * FROM dsl_sport_definition) AS dsd ON dsk.dpt_num_department = dsd.dpt\r\nWHERE sku_idr_sku IN (SELECT * FROM trans_sku_ids)",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_d_sport_dpt",
                    "model.dbt_datanl_prod.fct_transaction_detail_last_four_years",
                    "model.dbt_datanl_prod.stg_d_sku"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "fct_products"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_products",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\fct_products.sql",
            "original_file_path": "models\\Datamart\\fct_products.sql",
            "name": "fct_products",
            "alias": "fct_products",
            "checksum": {
                "name": "sha256",
                "checksum": "f765be3e892c491a11b188531940426e8232f740ed0fcb78263329b84f18266c"
            },
            "tags": [],
            "refs": [
                [
                    "stg_d_sport_dpt"
                ],
                [
                    "fct_transaction_detail_last_four_years"
                ],
                [
                    "stg_d_sku"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\fct_products.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\fct_products.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.601585,
            "compiled_sql": "-------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------\n-- View: stg_products\n-- Transformations: joins d_sku with d_sport_dpt to create a general products table\n-------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------\n\n-- Subquery: gets the correct data from d_sport_dpt to specify the DSL sport definition\nWITH dsl_sport_definition AS(\n  SELECT * \n  FROM `datanl-prod-fy0d`.`redshift`.`stg_d_sport_dpt`\n  WHERE type != 2\n),\n\n-- Subquery: skus in transaction data to select only those\ntrans_sku_ids AS (\n  SELECT DISTINCT sku_idr_sku FROM `datanl-prod-fy0d`.`Datamart`.`fct_transaction_detail_last_four_years`\n)\n\n-- Main Query\nSELECT dsk.*,\n  dsd.sport AS dsl_sport,\n  dsd.traffic_campaign_sport AS dsl_traffic_campaign_sport\n-- Joins were checked for duplicates\nFROM `datanl-prod-fy0d`.`redshift`.`stg_d_sku` AS dsk\nLEFT JOIN (SELECT * FROM dsl_sport_definition) AS dsd ON dsk.dpt_num_department = dsd.dpt\nWHERE sku_idr_sku IN (SELECT * FROM trans_sku_ids)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`fct_products`"
        },
        "model.dbt_datanl_prod.dim_return_type": {
            "raw_sql": "SELECT rty_idr_return_type, \r\nSUBSTRING(rty_return_type_code, 5) AS rty_return_type_code,\r\nrs_technical_date, \r\nrs_technical_flow \r\nFROM {{ ref('stg_d_return_type') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_d_return_type"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "dim_return_type"
            ],
            "unique_id": "model.dbt_datanl_prod.dim_return_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\dim_return_type.sql",
            "original_file_path": "models\\Datamart\\dim_return_type.sql",
            "name": "dim_return_type",
            "alias": "dim_return_type",
            "checksum": {
                "name": "sha256",
                "checksum": "3aa2bd736f6b2feaedf1efe9c7c1ec2dd95715bc1597d7ac79704afabef0ce49"
            },
            "tags": [],
            "refs": [
                [
                    "stg_d_return_type"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\dim_return_type.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\dim_return_type.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.6095502,
            "compiled_sql": "SELECT rty_idr_return_type, \nSUBSTRING(rty_return_type_code, 5) AS rty_return_type_code,\nrs_technical_date, \nrs_technical_flow \nFROM `datanl-prod-fy0d`.`redshift`.`stg_d_return_type`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`dim_return_type`"
        },
        "model.dbt_datanl_prod.fct_transaction_sustainable_last_four_years ": {
            "raw_sql": "SELECT * FROM {{ ref('stg_f_transaction_sustainable_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_transaction_sustainable_2021') }}\r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_transaction_sustainable_2020') }}\r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_transaction_sustainable_2019') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_f_transaction_sustainable_current",
                    "model.dbt_datanl_prod.stg_f_transaction_sustainable_2021",
                    "model.dbt_datanl_prod.stg_f_transaction_sustainable_2020",
                    "model.dbt_datanl_prod.stg_f_transaction_sustainable_2019"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "fct_transaction_sustainable_last_four_years "
            ],
            "unique_id": "model.dbt_datanl_prod.fct_transaction_sustainable_last_four_years ",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\fct_transaction_sustainable_last_four_years .sql",
            "original_file_path": "models\\Datamart\\fct_transaction_sustainable_last_four_years .sql",
            "name": "fct_transaction_sustainable_last_four_years ",
            "alias": "fct_transaction_sustainable_last_four_years",
            "checksum": {
                "name": "sha256",
                "checksum": "d3165ed9299ddd3c3abe80a89456e0ac6b73ae315f86d6691f5edbec728c890f"
            },
            "tags": [],
            "refs": [
                [
                    "stg_f_transaction_sustainable_current"
                ],
                [
                    "stg_f_transaction_sustainable_2021"
                ],
                [
                    "stg_f_transaction_sustainable_2020"
                ],
                [
                    "stg_f_transaction_sustainable_2019"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\fct_transaction_sustainable_last_four_years .sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\fct_transaction_sustainable_last_four_years .sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.6125624,
            "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_transaction_sustainable_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_transaction_sustainable_2021`\n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_transaction_sustainable_2020`\n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_transaction_sustainable_2019`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`fct_transaction_sustainable_last_four_years`"
        },
        "model.dbt_datanl_prod.fct_transaction_sustainable_last_two_years": {
            "raw_sql": "SELECT * FROM {{ ref('stg_f_transaction_sustainable_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_transaction_sustainable_2021') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_f_transaction_sustainable_current",
                    "model.dbt_datanl_prod.stg_f_transaction_sustainable_2021"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "fct_transaction_sustainable_last_two_years"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_transaction_sustainable_last_two_years",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\fct_transaction_sustainable_last_two_years.sql",
            "original_file_path": "models\\Datamart\\fct_transaction_sustainable_last_two_years.sql",
            "name": "fct_transaction_sustainable_last_two_years",
            "alias": "fct_transaction_sustainable_last_two_years",
            "checksum": {
                "name": "sha256",
                "checksum": "59a679b0c7839f246f236d0c703c82a239ce62ba7f843415290e3a1ece112fc1"
            },
            "tags": [],
            "refs": [
                [
                    "stg_f_transaction_sustainable_current"
                ],
                [
                    "stg_f_transaction_sustainable_2021"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\fct_transaction_sustainable_last_two_years.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\fct_transaction_sustainable_last_two_years.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.6165352,
            "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_transaction_sustainable_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_transaction_sustainable_2021`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`fct_transaction_sustainable_last_two_years`"
        },
        "model.dbt_datanl_prod.fct_retbox": {
            "raw_sql": "-------------------------------------------------------------------------------------------------------------------\r\n-------------------------------------------------------------------------------------------------------------------\r\n-- Name: retbox\r\n-- Transformations: \r\n--      - This script transforms the table 'f_supply_vc4r_retbox' to make it joinable with the transaction table \r\n-------------------------------------------------------------------------------------------------------------------\r\n-------------------------------------------------------------------------------------------------------------------\r\n\r\n-- Get the unique combinations of necessary columns from retbox table\r\nWITH retbox AS(\r\n  SELECT DISTINCT order_number, product_code, destination_reason, sorting_key FROM {{ ref('stg_f_supply_vc4r_retbox') }} WHERE order_number IS NOT NULL\r\n),\r\n\r\n-- Find which order_number and product_code combinations have multiple values, and therefore cause duplicates\r\nrows_with_multiple_values AS (\r\n  SELECT order_number, product_code, COUNT(*) AS cnt FROM retbox GROUP BY 1,2 HAVING cnt > 1\r\n)\r\n\r\n-- Reassign destination_reason and sorting_key to 'multiple' if combinations of them have multiple values\r\nSELECT DISTINCT order_number, \r\n  product_code, \r\n  'return' AS tdt_type_detail,\r\n  CASE \r\n    WHEN order_number IN (SELECT order_number FROM rows_with_multiple_values) AND product_code IN (SELECT product_code FROM rows_with_multiple_values) THEN NULL\r\n    ELSE destination_reason\r\n  END AS destination_reason,\r\n  CASE \r\n    WHEN order_number IN (SELECT order_number FROM rows_with_multiple_values) AND product_code IN (SELECT product_code FROM rows_with_multiple_values) THEN NULL \r\n    ELSE sorting_key \r\n  END AS sorting_key\r\nFROM retbox",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_f_supply_vc4r_retbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "fct_retbox"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_retbox",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\fct_retbox.sql",
            "original_file_path": "models\\Datamart\\fct_retbox.sql",
            "name": "fct_retbox",
            "alias": "fct_retbox",
            "checksum": {
                "name": "sha256",
                "checksum": "53e642dd003297c4f1ab20fc3cea5476505d92f4e651800bb9a5911ece53c3b2"
            },
            "tags": [],
            "refs": [
                [
                    "stg_f_supply_vc4r_retbox"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\fct_retbox.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\fct_retbox.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.6210556,
            "compiled_sql": "-------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------\n-- Name: retbox\n-- Transformations: \n--      - This script transforms the table 'f_supply_vc4r_retbox' to make it joinable with the transaction table \n-------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------\n\n-- Get the unique combinations of necessary columns from retbox table\nWITH retbox AS(\n  SELECT DISTINCT order_number, product_code, destination_reason, sorting_key FROM `datanl-prod-fy0d`.`redshift`.`stg_f_supply_vc4r_retbox` WHERE order_number IS NOT NULL\n),\n\n-- Find which order_number and product_code combinations have multiple values, and therefore cause duplicates\nrows_with_multiple_values AS (\n  SELECT order_number, product_code, COUNT(*) AS cnt FROM retbox GROUP BY 1,2 HAVING cnt > 1\n)\n\n-- Reassign destination_reason and sorting_key to 'multiple' if combinations of them have multiple values\nSELECT DISTINCT order_number, \n  product_code, \n  'return' AS tdt_type_detail,\n  CASE \n    WHEN order_number IN (SELECT order_number FROM rows_with_multiple_values) AND product_code IN (SELECT product_code FROM rows_with_multiple_values) THEN NULL\n    ELSE destination_reason\n  END AS destination_reason,\n  CASE \n    WHEN order_number IN (SELECT order_number FROM rows_with_multiple_values) AND product_code IN (SELECT product_code FROM rows_with_multiple_values) THEN NULL \n    ELSE sorting_key \n  END AS sorting_key\nFROM retbox",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`fct_retbox`"
        },
        "model.dbt_datanl_prod.dim_business_unit_receiver": {
            "raw_sql": "-- Subquery: skus in transaction data to select only those\r\nWITH del_bu_ids AS (\r\n  SELECT DISTINCT but_idr_business_unit_receiver FROM {{ ref('fct_delivery_detail_last_four_years') }} \r\n)\r\n\r\n-- Business Unit Dimension for business unit stock origin --\r\nSELECT  but_idr_business_unit AS but_idr_business_unit_receiver,\r\n        but_name_business_unit AS but_name_business_unit_receiver,    \r\n        but_short_name AS but_short_name_receiver,    \r\n        but_city AS but_city_receiver,    \r\n        but_store_detail AS but_store_detail_receiver,    \r\n        warehouse_type AS warehouse_type_receiver\r\nFROM {{ ref('stg_d_business_unit') }}\r\nWHERE but_idr_business_unit IN (SELECT * FROM del_bu_ids)",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.fct_delivery_detail_last_four_years",
                    "model.dbt_datanl_prod.stg_d_business_unit"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "dim_business_unit_receiver"
            ],
            "unique_id": "model.dbt_datanl_prod.dim_business_unit_receiver",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\dim_business_unit_receiver.sql",
            "original_file_path": "models\\Datamart\\dim_business_unit_receiver.sql",
            "name": "dim_business_unit_receiver",
            "alias": "dim_business_unit_receiver",
            "checksum": {
                "name": "sha256",
                "checksum": "cc69f49e3cd919d897623618a7cb66f3952a2275d34b984d466af09c286a6cc3"
            },
            "tags": [],
            "refs": [
                [
                    "fct_delivery_detail_last_four_years"
                ],
                [
                    "stg_d_business_unit"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\dim_business_unit_receiver.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\dim_business_unit_receiver.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.624346,
            "compiled_sql": "-- Subquery: skus in transaction data to select only those\nWITH del_bu_ids AS (\n  SELECT DISTINCT but_idr_business_unit_receiver FROM `datanl-prod-fy0d`.`Datamart`.`fct_delivery_detail_last_four_years` \n)\n\n-- Business Unit Dimension for business unit stock origin --\nSELECT  but_idr_business_unit AS but_idr_business_unit_receiver,\n        but_name_business_unit AS but_name_business_unit_receiver,    \n        but_short_name AS but_short_name_receiver,    \n        but_city AS but_city_receiver,    \n        but_store_detail AS but_store_detail_receiver,    \n        warehouse_type AS warehouse_type_receiver\nFROM `datanl-prod-fy0d`.`redshift`.`stg_d_business_unit`\nWHERE but_idr_business_unit IN (SELECT * FROM del_bu_ids)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`dim_business_unit_receiver`"
        },
        "model.dbt_datanl_prod.dim_business_unit_sender": {
            "raw_sql": "-- Subquery: skus in transaction data to select only those\r\nWITH del_bu_ids AS (\r\n  SELECT DISTINCT but_idr_business_unit_sender FROM {{ ref('fct_delivery_detail_last_four_years') }}\r\n)\r\n\r\n\r\n-- Business Unit Dimension for business unit sender --\r\nSELECT  but_idr_business_unit AS but_idr_business_unit_sender,\r\n  but_name_business_unit AS but_name_business_unit_sender,    \r\n  but_short_name AS but_short_name_sender,    \r\n  but_city AS but_city_sender,    \r\n  but_store_detail AS but_store_detail_sender,    \r\n  warehouse_type AS warehouse_type_sender,\r\n  CASE WHEN but_idr_business_unit IN (1092632,35044,34975,35016,35073,35023,348094,35095) THEN but_name_business_unit\r\n       ELSE 'STORE C&C 1HR'\r\n  END AS warehouse\r\nFROM {{ ref('stg_d_business_unit') }}\r\nWHERE but_idr_business_unit IN (SELECT * FROM del_bu_ids)",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.fct_delivery_detail_last_four_years",
                    "model.dbt_datanl_prod.stg_d_business_unit"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "dim_business_unit_sender"
            ],
            "unique_id": "model.dbt_datanl_prod.dim_business_unit_sender",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\dim_business_unit_sender.sql",
            "original_file_path": "models\\Datamart\\dim_business_unit_sender.sql",
            "name": "dim_business_unit_sender",
            "alias": "dim_business_unit_sender",
            "checksum": {
                "name": "sha256",
                "checksum": "2fce599189d146062d1346d8d333f977dd71bf86e746d98e2c136bf58cafe015"
            },
            "tags": [],
            "refs": [
                [
                    "fct_delivery_detail_last_four_years"
                ],
                [
                    "stg_d_business_unit"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\dim_business_unit_sender.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\dim_business_unit_sender.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.6272664,
            "compiled_sql": "-- Subquery: skus in transaction data to select only those\nWITH del_bu_ids AS (\n  SELECT DISTINCT but_idr_business_unit_sender FROM `datanl-prod-fy0d`.`Datamart`.`fct_delivery_detail_last_four_years`\n)\n\n\n-- Business Unit Dimension for business unit sender --\nSELECT  but_idr_business_unit AS but_idr_business_unit_sender,\n  but_name_business_unit AS but_name_business_unit_sender,    \n  but_short_name AS but_short_name_sender,    \n  but_city AS but_city_sender,    \n  but_store_detail AS but_store_detail_sender,    \n  warehouse_type AS warehouse_type_sender,\n  CASE WHEN but_idr_business_unit IN (1092632,35044,34975,35016,35073,35023,348094,35095) THEN but_name_business_unit\n       ELSE 'STORE C&C 1HR'\n  END AS warehouse\nFROM `datanl-prod-fy0d`.`redshift`.`stg_d_business_unit`\nWHERE but_idr_business_unit IN (SELECT * FROM del_bu_ids)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`dim_business_unit_sender`"
        },
        "model.dbt_datanl_prod.dim_business_unit_stock_origin": {
            "raw_sql": "-- Subquery: skus in transaction data to select only those\r\nWITH del_bu_ids AS (\r\n  SELECT DISTINCT but_idr_business_unit_stock_origin FROM {{ ref('fct_delivery_detail_last_four_years') }}\r\n)\r\n\r\n-- Business Unit Dimension for business unit stock origin --\r\nSELECT  but_idr_business_unit AS but_idr_business_unit_stock_origin,\r\n        but_name_business_unit AS but_name_business_unit_stock_origin,    \r\n        but_short_name AS but_short_name_stock_origin,    \r\n        but_city AS but_city_stock_origin,    \r\n        but_store_detail AS but_store_detail_stock_origin,    \r\n        warehouse_type AS warehouse_type_stock_origin,\r\n        CASE WHEN warehouse_type IN ('CAC','CAR') THEN warehouse_type\r\n             WHEN but_idr_business_unit = 348094 THEN 'EXT'\r\n             ELSE 'STORE C&C 1HR'\r\n        END AS warehouse_type_origin\r\nFROM {{ ref('stg_d_business_unit') }}\r\nWHERE but_idr_business_unit IN (SELECT * FROM del_bu_ids)",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.fct_delivery_detail_last_four_years",
                    "model.dbt_datanl_prod.stg_d_business_unit"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "dim_business_unit_stock_origin"
            ],
            "unique_id": "model.dbt_datanl_prod.dim_business_unit_stock_origin",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\dim_business_unit_stock_origin.sql",
            "original_file_path": "models\\Datamart\\dim_business_unit_stock_origin.sql",
            "name": "dim_business_unit_stock_origin",
            "alias": "dim_business_unit_stock_origin",
            "checksum": {
                "name": "sha256",
                "checksum": "59477e596efb392c3de667bbb261c0f06d80ea55f92e9416e3f43d5e7cf48e5e"
            },
            "tags": [],
            "refs": [
                [
                    "fct_delivery_detail_last_four_years"
                ],
                [
                    "stg_d_business_unit"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\dim_business_unit_stock_origin.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\dim_business_unit_stock_origin.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.630322,
            "compiled_sql": "-- Subquery: skus in transaction data to select only those\nWITH del_bu_ids AS (\n  SELECT DISTINCT but_idr_business_unit_stock_origin FROM `datanl-prod-fy0d`.`Datamart`.`fct_delivery_detail_last_four_years`\n)\n\n-- Business Unit Dimension for business unit stock origin --\nSELECT  but_idr_business_unit AS but_idr_business_unit_stock_origin,\n        but_name_business_unit AS but_name_business_unit_stock_origin,    \n        but_short_name AS but_short_name_stock_origin,    \n        but_city AS but_city_stock_origin,    \n        but_store_detail AS but_store_detail_stock_origin,    \n        warehouse_type AS warehouse_type_stock_origin,\n        CASE WHEN warehouse_type IN ('CAC','CAR') THEN warehouse_type\n             WHEN but_idr_business_unit = 348094 THEN 'EXT'\n             ELSE 'STORE C&C 1HR'\n        END AS warehouse_type_origin\nFROM `datanl-prod-fy0d`.`redshift`.`stg_d_business_unit`\nWHERE but_idr_business_unit IN (SELECT * FROM del_bu_ids)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`dim_business_unit_stock_origin`"
        },
        "model.dbt_datanl_prod.fct_delivery_detail_last_four_years": {
            "raw_sql": "SELECT * FROM {{ ref('stg_f_delivery_detail_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_delivery_detail_2021') }}\r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_delivery_detail_2020') }}\r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_delivery_detail_2019') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_f_delivery_detail_current",
                    "model.dbt_datanl_prod.stg_f_delivery_detail_2021",
                    "model.dbt_datanl_prod.stg_f_delivery_detail_2020",
                    "model.dbt_datanl_prod.stg_f_delivery_detail_2019"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "fct_delivery_detail_last_four_years"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_delivery_detail_last_four_years",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\fct_delivery_detail_last_four_years.sql",
            "original_file_path": "models\\Datamart\\fct_delivery_detail_last_four_years.sql",
            "name": "fct_delivery_detail_last_four_years",
            "alias": "fct_delivery_detail_last_four_years",
            "checksum": {
                "name": "sha256",
                "checksum": "24e610cd13209c015a137eb084db04e34bbd361fcfc35f61b33207086ab05645"
            },
            "tags": [],
            "refs": [
                [
                    "stg_f_delivery_detail_current"
                ],
                [
                    "stg_f_delivery_detail_2021"
                ],
                [
                    "stg_f_delivery_detail_2020"
                ],
                [
                    "stg_f_delivery_detail_2019"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\fct_delivery_detail_last_four_years.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\fct_delivery_detail_last_four_years.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.6340146,
            "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_delivery_detail_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_delivery_detail_2021`\n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_delivery_detail_2020`\n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_delivery_detail_2019`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`fct_delivery_detail_last_four_years`"
        },
        "model.dbt_datanl_prod.dim_business_unit": {
            "raw_sql": "-- Subquery: skus in transaction data to select only those\r\nWITH trans_bu_ids AS (\r\n  SELECT DISTINCT but_idr_business_unit FROM {{ ref('fct_transaction_detail_last_four_years') }})\r\n-- Main Query:\r\nSELECT * \r\nFROM {{ ref('stg_d_business_unit') }}\r\nWHERE but_idr_business_unit IN (SELECT * FROM trans_bu_ids)",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.fct_transaction_detail_last_four_years",
                    "model.dbt_datanl_prod.stg_d_business_unit"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "dim_business_unit"
            ],
            "unique_id": "model.dbt_datanl_prod.dim_business_unit",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\dim_business_unit.sql",
            "original_file_path": "models\\Datamart\\dim_business_unit.sql",
            "name": "dim_business_unit",
            "alias": "dim_business_unit",
            "checksum": {
                "name": "sha256",
                "checksum": "0ec48965e688378644538b63446f169377a4c6bca1e7fa7be9c0714a24099dbb"
            },
            "tags": [],
            "refs": [
                [
                    "fct_transaction_detail_last_four_years"
                ],
                [
                    "stg_d_business_unit"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\dim_business_unit.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\dim_business_unit.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.6375813,
            "compiled_sql": "-- Subquery: skus in transaction data to select only those\nWITH trans_bu_ids AS (\n  SELECT DISTINCT but_idr_business_unit FROM `datanl-prod-fy0d`.`Datamart`.`fct_transaction_detail_last_four_years`)\n-- Main Query:\nSELECT * \nFROM `datanl-prod-fy0d`.`redshift`.`stg_d_business_unit`\nWHERE but_idr_business_unit IN (SELECT * FROM trans_bu_ids)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`dim_business_unit`"
        },
        "model.dbt_datanl_prod.fct_transaction_detail_last_four_years": {
            "raw_sql": "SELECT * FROM {{ ref('stg_f_transaction_detail_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_transaction_detail_2021') }}\r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_transaction_detail_2020') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_transaction_detail_2019') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_f_transaction_detail_current",
                    "model.dbt_datanl_prod.stg_f_transaction_detail_2021",
                    "model.dbt_datanl_prod.stg_f_transaction_detail_2020",
                    "model.dbt_datanl_prod.stg_f_transaction_detail_2019"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "fct_transaction_detail_last_four_years"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_transaction_detail_last_four_years",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\fct_transaction_detail_last_four_years.sql",
            "original_file_path": "models\\Datamart\\fct_transaction_detail_last_four_years.sql",
            "name": "fct_transaction_detail_last_four_years",
            "alias": "fct_transaction_detail_last_four_years",
            "checksum": {
                "name": "sha256",
                "checksum": "908ead232fb0d585bb470aa9bac017dda2ecabb7297870b5f6d36b1c8e42fe76"
            },
            "tags": [],
            "refs": [
                [
                    "stg_f_transaction_detail_current"
                ],
                [
                    "stg_f_transaction_detail_2021"
                ],
                [
                    "stg_f_transaction_detail_2020"
                ],
                [
                    "stg_f_transaction_detail_2019"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\fct_transaction_detail_last_four_years.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\fct_transaction_detail_last_four_years.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.6407871,
            "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_transaction_detail_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_transaction_detail_2021`\n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_transaction_detail_2020` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_transaction_detail_2019`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`fct_transaction_detail_last_four_years`"
        },
        "model.dbt_datanl_prod.fct_transaction_detail_last_two_years": {
            "raw_sql": "SELECT * FROM {{ ref('stg_f_transaction_detail_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_transaction_detail_2021') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_f_transaction_detail_current",
                    "model.dbt_datanl_prod.stg_f_transaction_detail_2021"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "fct_transaction_detail_last_two_years"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_transaction_detail_last_two_years",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\fct_transaction_detail_last_two_years.sql",
            "original_file_path": "models\\Datamart\\fct_transaction_detail_last_two_years.sql",
            "name": "fct_transaction_detail_last_two_years",
            "alias": "fct_transaction_detail_last_two_years",
            "checksum": {
                "name": "sha256",
                "checksum": "90a5d3ac9c3e6f021f401ffd6692e13cbc655417630eb35b672ea89b4e0920fa"
            },
            "tags": [],
            "refs": [
                [
                    "stg_f_transaction_detail_current"
                ],
                [
                    "stg_f_transaction_detail_2021"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\fct_transaction_detail_last_two_years.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\fct_transaction_detail_last_two_years.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.644762,
            "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_transaction_detail_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_transaction_detail_2021`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`fct_transaction_detail_last_two_years`"
        },
        "model.dbt_datanl_prod.dim_return_reason": {
            "raw_sql": "SELECT rrn_idr_return_reason, \r\nrrn_category_number, \r\nSUBSTRING(rrn_category_id, 5) AS rrn_category_id,\r\nrrn_category_group, \r\nrs_technical_date, \r\nrs_technical_flow \r\nFROM {{ ref('stg_d_return_reason') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_d_return_reason"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "dim_return_reason"
            ],
            "unique_id": "model.dbt_datanl_prod.dim_return_reason",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\dim_return_reason.sql",
            "original_file_path": "models\\Datamart\\dim_return_reason.sql",
            "name": "dim_return_reason",
            "alias": "dim_return_reason",
            "checksum": {
                "name": "sha256",
                "checksum": "052f61aea79a47a4ae903f77289da992256733067135d5d4dd33e22a9ab890a9"
            },
            "tags": [],
            "refs": [
                [
                    "stg_d_return_reason"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\dim_return_reason.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\dim_return_reason.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.6504812,
            "compiled_sql": "SELECT rrn_idr_return_reason, \nrrn_category_number, \nSUBSTRING(rrn_category_id, 5) AS rrn_category_id,\nrrn_category_group, \nrs_technical_date, \nrs_technical_flow \nFROM `datanl-prod-fy0d`.`redshift`.`stg_d_return_reason`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`dim_return_reason`"
        },
        "model.dbt_datanl_prod.dim_calendar": {
            "raw_sql": "--DECLARE TODAY DATE DEFAULT CURRENT_DATE();\r\n--\r\n--DECLARE CY INT64 DEFAULT EXTRACT(YEAR FROM TODAY);\r\n--DECLARE LY INT64 DEFAULT (EXTRACT(YEAR FROM TODAY) - 1);\r\n--\r\n--DECLARE CM INT64 DEFAULT EXTRACT(MONTH FROM TODAY);\r\n--DECLARE LM INT64 DEFAULT (EXTRACT(MONTH FROM TODAY) - 1);\r\n\r\n{{ config(tags = ['sustainablity','Promise', 'Returns']) }}\r\n\r\nSELECT \r\nd.day_id_day,\r\nd.day_id_day_comp,\r\nd.day_num_weekday,\r\nd.wee_id_week,\r\nd.wee_id_week_comp,\r\nd.wee_num_week,\r\nd.mon_id_month,\r\nd.mon_id_month_comp,\r\nd.mon_num_month,\r\nd.str_id_semestre,\r\nd.str_id_semestre_comp,\r\nd.str_num_semestre,\r\nd.yea_id_year,\r\n\r\n--Qlik sense dimension (Attributes)--\r\n\r\nSUBSTR(wee_id_week, 1, 4) || '-' || SUBSTR(wee_id_week, 5, 6)     AS YrWk,\r\nSUBSTR(mon_id_month, 1, 4) || '-' || SUBSTR(mon_id_month, 5, 6)   AS YrMth,\r\n'Q'||str_num_semestre                                             AS Quarter,\r\nyea_id_year||'-'||'Q'||str_num_semestre                           AS YrQtr,\r\n\r\n--Qlik Sense indicators--\r\n\r\nCASE WHEN d.day_id_day = CURRENT_DATE() THEN 1 ELSE 0 END        AS _indToday,\r\n\r\n--year\r\nCASE WHEN EXTRACT(YEAR FROM d.day_id_day) = EXTRACT(YEAR FROM CURRENT_DATE()) THEN 1 ELSE 0 END         AS _indCY,\r\nCASE WHEN EXTRACT(YEAR FROM d.day_id_day) = (EXTRACT(YEAR FROM CURRENT_DATE()) - 1) THEN 1 ELSE 0 END   AS _indLY,\r\n\r\n--month\r\nCASE WHEN EXTRACT(MONTH FROM d.day_id_day) = EXTRACT(MONTH FROM CURRENT_DATE()) THEN 1 ELSE 0 END                AS _indCM,\r\nCASE WHEN d.mon_num_month = format_date('%m' ,DATE_ADD(CURRENT_DATE(), INTERVAL -1 MONTH)) THEN 1 ELSE 0 END    AS _indLM,\r\n\r\n\r\n--week\r\nCASE WHEN d.wee_id_week = format_date('%G%V', CURRENT_DATE()) THEN 1 ELSE 0 END     AS _indCW,\r\nCASE WHEN d.wee_id_week = format_date('%G%V', CURRENT_DATE()-7) THEN 1 ELSE 0 END   AS _indLW,\r\n\r\n--All weeks\r\nCASE WHEN d.wee_id_week <= format_date('%G%V', CURRENT_DATE()) THEN 1 ELSE 0 END    AS _indAW,\r\nCASE WHEN d.wee_id_week < format_date('%G%V', CURRENT_DATE()) THEN 1 ELSE 0 END     AS _indAPW,\r\n\r\n\r\n--All months \r\nCASE WHEN d.mon_id_month <= format_date('%G%m', CURRENT_DATE()) THEN 1 ELSE 0 END                                AS _indAM,\r\nCASE WHEN d.mon_id_month < format_date('%G%m', CURRENT_DATE()) THEN 1 ELSE 0 END                                 AS _indAPM,\r\n\r\n--YTD\r\nCASE WHEN format_date('%m%d', d.day_id_day) <= format_date('%m%d', CURRENT_DATE()) THEN 1 ELSE 0 END                AS _indYTD,\r\nCASE WHEN d.wee_num_week <= format_date('%V', CURRENT_DATE()) THEN 1 ELSE 0 END                                    AS _indYTW,\r\nCASE WHEN d.wee_num_week <= format_date('%V', CURRENT_DATE()-7) THEN 1 ELSE 0 END                                  AS _indYTPW,\r\nCASE WHEN d.mon_num_month <= format_date('%m', CURRENT_DATE()) THEN 1 ELSE 0 END                                   AS _indYTM,\r\nCASE WHEN d.mon_num_month < format_date('%m', CURRENT_DATE()) THEN 1 ELSE 0 END                                    AS _indYTPM,\r\n\r\n\r\n\r\n--Rolling\r\n\r\nCASE WHEN d.wee_id_week > format_date('%G%V',DATE_ADD(CURRENT_DATE(), INTERVAL -53 WEEK))\r\n          AND d.wee_id_week < format_date('%G%V',CURRENT_DATE()) \r\n    THEN 1 ELSE 0 END   _indR52W,\r\nCASE WHEN d.mon_id_month > format_date('%G%m',DATE_ADD(CURRENT_DATE(), INTERVAL -13 MONTH))\r\n          AND d.mon_id_month < format_date('%G%m',CURRENT_DATE()) \r\n    THEN 1 ELSE 0 END   _indR12M\r\n\r\nFROM {{ ref('stg_d_day') }} d\r\nWHERE EXTRACT(YEAR FROM d.day_id_day) >= EXTRACT(YEAR FROM CURRENT_DATE())-3\r\nORDER BY day_id_day\r\n\r\n\r\n-- Add Year Quanter\r\n-- Add till today\r\n\r\n-- SUM(sales) / SUM(sales)",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_d_day"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [
                    "sustainablity",
                    "Promise",
                    "Returns"
                ],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "dim_calendar"
            ],
            "unique_id": "model.dbt_datanl_prod.dim_calendar",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\dim_calendar.sql",
            "original_file_path": "models\\Datamart\\dim_calendar.sql",
            "name": "dim_calendar",
            "alias": "dim_calendar",
            "checksum": {
                "name": "sha256",
                "checksum": "82fb6dbc2001273ebcfcbc26d3c866d4102d20968dabd853702d79dc559b1548"
            },
            "tags": [
                "sustainablity",
                "Promise",
                "Returns"
            ],
            "refs": [
                [
                    "stg_d_day"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\dim_calendar.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\dim_calendar.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view",
                "tags": [
                    "sustainablity",
                    "Promise",
                    "Returns"
                ]
            },
            "created_at": 1660314703.6590827,
            "compiled_sql": "--DECLARE TODAY DATE DEFAULT CURRENT_DATE();\n--\n--DECLARE CY INT64 DEFAULT EXTRACT(YEAR FROM TODAY);\n--DECLARE LY INT64 DEFAULT (EXTRACT(YEAR FROM TODAY) - 1);\n--\n--DECLARE CM INT64 DEFAULT EXTRACT(MONTH FROM TODAY);\n--DECLARE LM INT64 DEFAULT (EXTRACT(MONTH FROM TODAY) - 1);\n\n\n\nSELECT \nd.day_id_day,\nd.day_id_day_comp,\nd.day_num_weekday,\nd.wee_id_week,\nd.wee_id_week_comp,\nd.wee_num_week,\nd.mon_id_month,\nd.mon_id_month_comp,\nd.mon_num_month,\nd.str_id_semestre,\nd.str_id_semestre_comp,\nd.str_num_semestre,\nd.yea_id_year,\n\n--Qlik sense dimension (Attributes)--\n\nSUBSTR(wee_id_week, 1, 4) || '-' || SUBSTR(wee_id_week, 5, 6)     AS YrWk,\nSUBSTR(mon_id_month, 1, 4) || '-' || SUBSTR(mon_id_month, 5, 6)   AS YrMth,\n'Q'||str_num_semestre                                             AS Quarter,\nyea_id_year||'-'||'Q'||str_num_semestre                           AS YrQtr,\n\n--Qlik Sense indicators--\n\nCASE WHEN d.day_id_day = CURRENT_DATE() THEN 1 ELSE 0 END        AS _indToday,\n\n--year\nCASE WHEN EXTRACT(YEAR FROM d.day_id_day) = EXTRACT(YEAR FROM CURRENT_DATE()) THEN 1 ELSE 0 END         AS _indCY,\nCASE WHEN EXTRACT(YEAR FROM d.day_id_day) = (EXTRACT(YEAR FROM CURRENT_DATE()) - 1) THEN 1 ELSE 0 END   AS _indLY,\n\n--month\nCASE WHEN EXTRACT(MONTH FROM d.day_id_day) = EXTRACT(MONTH FROM CURRENT_DATE()) THEN 1 ELSE 0 END                AS _indCM,\nCASE WHEN d.mon_num_month = format_date('%m' ,DATE_ADD(CURRENT_DATE(), INTERVAL -1 MONTH)) THEN 1 ELSE 0 END    AS _indLM,\n\n\n--week\nCASE WHEN d.wee_id_week = format_date('%G%V', CURRENT_DATE()) THEN 1 ELSE 0 END     AS _indCW,\nCASE WHEN d.wee_id_week = format_date('%G%V', CURRENT_DATE()-7) THEN 1 ELSE 0 END   AS _indLW,\n\n--All weeks\nCASE WHEN d.wee_id_week <= format_date('%G%V', CURRENT_DATE()) THEN 1 ELSE 0 END    AS _indAW,\nCASE WHEN d.wee_id_week < format_date('%G%V', CURRENT_DATE()) THEN 1 ELSE 0 END     AS _indAPW,\n\n\n--All months \nCASE WHEN d.mon_id_month <= format_date('%G%m', CURRENT_DATE()) THEN 1 ELSE 0 END                                AS _indAM,\nCASE WHEN d.mon_id_month < format_date('%G%m', CURRENT_DATE()) THEN 1 ELSE 0 END                                 AS _indAPM,\n\n--YTD\nCASE WHEN format_date('%m%d', d.day_id_day) <= format_date('%m%d', CURRENT_DATE()) THEN 1 ELSE 0 END                AS _indYTD,\nCASE WHEN d.wee_num_week <= format_date('%V', CURRENT_DATE()) THEN 1 ELSE 0 END                                    AS _indYTW,\nCASE WHEN d.wee_num_week <= format_date('%V', CURRENT_DATE()-7) THEN 1 ELSE 0 END                                  AS _indYTPW,\nCASE WHEN d.mon_num_month <= format_date('%m', CURRENT_DATE()) THEN 1 ELSE 0 END                                   AS _indYTM,\nCASE WHEN d.mon_num_month < format_date('%m', CURRENT_DATE()) THEN 1 ELSE 0 END                                    AS _indYTPM,\n\n\n\n--Rolling\n\nCASE WHEN d.wee_id_week > format_date('%G%V',DATE_ADD(CURRENT_DATE(), INTERVAL -53 WEEK))\n          AND d.wee_id_week < format_date('%G%V',CURRENT_DATE()) \n    THEN 1 ELSE 0 END   _indR52W,\nCASE WHEN d.mon_id_month > format_date('%G%m',DATE_ADD(CURRENT_DATE(), INTERVAL -13 MONTH))\n          AND d.mon_id_month < format_date('%G%m',CURRENT_DATE()) \n    THEN 1 ELSE 0 END   _indR12M\n\nFROM `datanl-prod-fy0d`.`redshift`.`stg_d_day` d\nWHERE EXTRACT(YEAR FROM d.day_id_day) >= EXTRACT(YEAR FROM CURRENT_DATE())-3\nORDER BY day_id_day\n\n\n-- Add Year Quanter\n-- Add till today\n\n-- SUM(sales) / SUM(sales)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`dim_calendar`"
        },
        "model.dbt_datanl_prod.fct_delivery_header_last_two_years": {
            "raw_sql": "SELECT * FROM {{ ref('stg_f_delivery_header_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_delivery_header_2021') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_f_delivery_header_current",
                    "model.dbt_datanl_prod.stg_f_delivery_header_2021"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "fct_delivery_header_last_two_years"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_delivery_header_last_two_years",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\fct_delivery_header_last_two_years.sql",
            "original_file_path": "models\\Datamart\\fct_delivery_header_last_two_years.sql",
            "name": "fct_delivery_header_last_two_years",
            "alias": "fct_delivery_header_last_two_years",
            "checksum": {
                "name": "sha256",
                "checksum": "9f7eb7ea0646bfe8744b4c6864f5ca1662a424c3e6305dd37634f6ce1ad1e65c"
            },
            "tags": [],
            "refs": [
                [
                    "stg_f_delivery_header_current"
                ],
                [
                    "stg_f_delivery_header_2021"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\fct_delivery_header_last_two_years.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\fct_delivery_header_last_two_years.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.6633162,
            "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_delivery_header_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_delivery_header_2021`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`fct_delivery_header_last_two_years`"
        },
        "model.dbt_datanl_prod.fct_delivery_detail_last_two_years": {
            "raw_sql": "SELECT * FROM {{ ref('stg_f_delivery_detail_current') }} \r\n\r\nUNION ALL\r\n\r\nSELECT * FROM {{ ref('stg_f_delivery_detail_2021') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_f_delivery_detail_current",
                    "model.dbt_datanl_prod.stg_f_delivery_detail_2021"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "fct_delivery_detail_last_two_years"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_delivery_detail_last_two_years",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\fct_delivery_detail_last_two_years.sql",
            "original_file_path": "models\\Datamart\\fct_delivery_detail_last_two_years.sql",
            "name": "fct_delivery_detail_last_two_years",
            "alias": "fct_delivery_detail_last_two_years",
            "checksum": {
                "name": "sha256",
                "checksum": "098a68eb01e9601f09587a9fa17d9d71a5bca68f71814ed411a291bdb1c851e6"
            },
            "tags": [],
            "refs": [
                [
                    "stg_f_delivery_detail_current"
                ],
                [
                    "stg_f_delivery_detail_2021"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\fct_delivery_detail_last_two_years.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\fct_delivery_detail_last_two_years.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660314703.6660407,
            "compiled_sql": "SELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_delivery_detail_current` \n\nUNION ALL\n\nSELECT * FROM `datanl-prod-fy0d`.`redshift`.`stg_f_delivery_detail_2021`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`fct_delivery_detail_last_two_years`"
        },
        "test.dbt_datanl_prod.unique_stg_d_sku_sku_idr_sku.a81c1c9976": {
            "raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "sku_idr_sku",
                    "model": "{{ get_where_subquery(ref('stg_d_sku')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_d_sku"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "datanl-prod-fy0d",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "unique_stg_d_sku_sku_idr_sku"
            ],
            "unique_id": "test.dbt_datanl_prod.unique_stg_d_sku_sku_idr_sku.a81c1c9976",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "unique_stg_d_sku_sku_idr_sku.sql",
            "original_file_path": "models\\redshift\\stg_d_sku.yml",
            "name": "unique_stg_d_sku_sku_idr_sku",
            "alias": "unique_stg_d_sku_sku_idr_sku",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "External db2",
                "Internal db1",
                "dbt 1"
            ],
            "refs": [
                [
                    "stg_d_sku"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1660314703.6859875,
            "column_name": "sku_idr_sku",
            "file_key_name": "models.stg_d_sku"
        },
        "test.dbt_datanl_prod.not_null_stg_d_sku_sku_idr_sku.dba62eec8a": {
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "sku_idr_sku",
                    "model": "{{ get_where_subquery(ref('stg_d_sku')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.stg_d_sku"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "datanl-prod-fy0d",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "not_null_stg_d_sku_sku_idr_sku"
            ],
            "unique_id": "test.dbt_datanl_prod.not_null_stg_d_sku_sku_idr_sku.dba62eec8a",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "not_null_stg_d_sku_sku_idr_sku.sql",
            "original_file_path": "models\\redshift\\stg_d_sku.yml",
            "name": "not_null_stg_d_sku_sku_idr_sku",
            "alias": "not_null_stg_d_sku_sku_idr_sku",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "External db2",
                "Internal db1",
                "dbt 1"
            ],
            "refs": [
                [
                    "stg_d_sku"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1660314703.6890469,
            "column_name": "sku_idr_sku",
            "file_key_name": "models.stg_d_sku"
        },
        "model.dbt_datanl_prod.fct_PRO_Helped_Orders": {
            "raw_sql": "{{ config(\r\n    materialized='table'\r\n)}}\r\nselect *\r\n\r\nfrom {{ source('Datamart_Promise', 'src_PRO_Helped_Orders') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.Datamart_Promise.src_PRO_Helped_Orders"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart_Promise",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart_Promise",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart_Promise",
                "fct_PRO_Helped_Orders"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_PRO_Helped_Orders",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart_Promise\\fct_PRO_Helped_Orders.sql",
            "original_file_path": "models\\Datamart_Promise\\fct_PRO_Helped_Orders.sql",
            "name": "fct_PRO_Helped_Orders",
            "alias": "fct_PRO_Helped_Orders",
            "checksum": {
                "name": "sha256",
                "checksum": "a816b4b68d663b8a7e139e7678a508b4100a66f02a30541bca1956534e097e79"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "Datamart_Promise",
                    "src_PRO_Helped_Orders"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart_Promise\\fct_PRO_Helped_Orders.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart_Promise\\fct_PRO_Helped_Orders.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart_Promise",
                "materialized": "table"
            },
            "created_at": 1660315626.5546618,
            "compiled_sql": "\nselect *\n\nfrom `datanl-prod-fy0d`.`Datamart_Promise`.`src_PRO_Helped_Orders`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart_Promise`.`fct_PRO_Helped_Orders`"
        },
        "model.dbt_datanl_prod.fct_Sustainability_Awareness_Scores": {
            "raw_sql": "{{ config(\r\n    materialized='table'\r\n)}}\r\nselect *\r\n\r\nfrom {{ source('Datamart_Sustainability', 'src_Sustainability_Awareness_Scores') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.Datamart_Sustainability.src_Sustainability_Awareness_Scores"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart_Sustainability",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart_Sustainability",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart_Sustainability",
                "fct_Sustainability_Awareness_Scores"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_Sustainability_Awareness_Scores",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart_Sustainability\\fct_Sustainability_Awareness_Scores.sql",
            "original_file_path": "models\\Datamart_Sustainability\\fct_Sustainability_Awareness_Scores.sql",
            "name": "fct_Sustainability_Awareness_Scores",
            "alias": "fct_Sustainability_Awareness_Scores",
            "checksum": {
                "name": "sha256",
                "checksum": "57a75386e7e0912effe5bfc8174f4f84fe8714198b59ce3dbd759da49b726c92"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "Datamart_Sustainability",
                    "src_Sustainability_Awareness_Scores"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart_Sustainability\\fct_Sustainability_Awareness_Scores.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart_Sustainability\\fct_Sustainability_Awareness_Scores.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart_Sustainability",
                "materialized": "table"
            },
            "created_at": 1660315626.5665252,
            "compiled_sql": "\nselect *\n\nfrom `datanl-prod-fy0d`.`Datamart_Sustainability`.`src_Sustainability_Awareness_Scores`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart_Sustainability`.`fct_Sustainability_Awareness_Scores`"
        },
        "model.dbt_datanl_prod.fct_CO2_Extraction": {
            "raw_sql": "{{ config(\r\n    materialized='table'\r\n)}}\r\nselect *\r\n\r\nfrom {{ source('Datamart_Promise', 'src_CO2_Extraction') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "source.dbt_datanl_prod.Datamart_Promise.src_CO2_Extraction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart_Promise",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart_Promise",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart_Promise",
                "fct_CO2_Extraction"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_CO2_Extraction",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart_Promise\\fct_CO2_Extraction.sql",
            "original_file_path": "models\\Datamart_Promise\\fct_CO2_Extraction.sql",
            "name": "fct_CO2_Extraction",
            "alias": "fct_CO2_Extraction",
            "checksum": {
                "name": "sha256",
                "checksum": "8c79ec0d254250066ab29eabd52bc225c14a73dc7156bf8074c6dc04da717268"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "Datamart_Promise",
                    "src_CO2_Extraction"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart_Promise\\fct_CO2_Extraction.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart_Promise\\fct_CO2_Extraction.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart_Promise",
                "materialized": "table"
            },
            "created_at": 1660315626.571191,
            "compiled_sql": "\nselect *\n\nfrom `datanl-prod-fy0d`.`Datamart_Promise`.`src_CO2_Extraction`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart_Promise`.`fct_CO2_Extraction`"
        },
        "model.dbt_datanl_prod.fct_transactions": {
            "raw_sql": "{{ config(tags = ['Promise', 'Returns']) }}\r\n\r\n-------------------------------------------------------------------------------------------------------------------\r\n-------------------------------------------------------------------------------------------------------------------\r\n-- View: stg_transactions\r\n-- Transformations: \r\n--    - select relevant columns, \r\n--    - reassign digital in store to offline\r\n--    - add columns from f_delivery_detail and f_delivery_header\r\n--    - add sustainable grouping from f_transaction_sustainable\r\n--    - handle offline return dates\r\n--    - calculate shipping delay\r\n-------------------------------------------------------------------------------------------------------------------\r\n-------------------------------------------------------------------------------------------------------------------\r\n\r\nWITH fdd AS (\r\n  SELECT the_transaction_id, \r\n    dyh_delivery_id,\r\n    dyh_num_line_delivery,\r\n    tdt_num_line, \r\n    dyh_date_canceled,\t\r\n    dyh_date_ready_for_pickup,\t\r\n    dyh_date_expected_delivery,\t\r\n    dyh_date_actual_delivery,\t\r\n    dyh_date_expected_shipment,\t\r\n    dyh_date_actual_shipment,\r\n    dyh_date_stock_shortage,\r\n    dyh_date_invoiced,\r\n    dyh_date_return_received,\r\n    dyh_date_ready_for_picking,\r\n    but_idr_business_unit_fiscal,\t\r\n    but_idr_business_unit_economical,\t\r\n    but_idr_business_unit_sender,\t\r\n    but_idr_business_unit_clic_n_collect,\t\r\n    but_idr_business_unit_receiver,\r\n    but_idr_business_unit_stock_origin,\r\n    rdt_idr_reallocated_digital_type,\r\n    frm_idr_freight_method,\r\n    frm_delivery_type,\r\n    dyd_purchase_order_number,\r\n    dyh_shipping_type,\r\n    sht_idr_shipping_type,\r\n    dyh_tracking_number,\r\n    cct_idr_customer_channel_type,\r\n    dyh_zip_code,\r\n    f_margin_real,\r\n    rs_technical_date\r\n  FROM {{ ref('fct_delivery_detail_last_two_years') }}\r\n),\r\n\r\n-- Subquery: gets sku ids that belong to rental products from sku table\r\nrental_sku_ids AS (\r\n  SELECT sku_idr_sku \r\n  FROM {{ ref('stg_d_sku') }}\r\n  WHERE mdl_num_model_r3 IN (8618395,8664824,8664825,8664828,8618397)\r\n),\r\n\r\n-- Subquery: gets relevant data from PRO_Helped_Orders sheet\r\nfph AS (\r\n  SELECT DISTINCT LOWER(NB_shipping_group) AS dyh_delivery_id\r\n  FROM {{ ref('fct_PRO_Helped_Orders') }}\r\n),\r\n\r\n-- Subquery: gets relevant sale info in a way they can be joined correctly with returns\r\nfsr AS(\r\n  SELECT tdt_order_number, \r\n  sku_idr_sku, \r\n  tdt_item_type, 'return' AS tdt_type_detail, \r\n  but_idr_business_unit_stock_origin AS but_idr_business_unit_stock_origin_sale, \r\n  frm_idr_freight_method AS frm_idr_freight_method_sale\r\n  FROM {{ ref('fct_delivery_detail_last_two_years') }}\r\n  WHERE tdt_type_detail = 'sale'\r\n  AND tdt_item_id != '2102120'\r\n  AND frm_idr_freight_method != 0\r\n)\r\n\r\n-- Main Query\r\nSELECT ftd.the_transaction_id,\r\n  ftd.tdt_num_line,\r\n  fdd.dyh_delivery_id,\r\n  fdd.dyh_num_line_delivery,\r\n  ftd.the_date_transaction,\r\n  -- Replace the_date_authorized of offline returns with null\r\n  CASE \r\n    WHEN ftd.the_to_type = 'offline' AND ftd.tdt_type_detail = 'return' THEN NULL \r\n    ELSE ftd.the_date_authorized\r\n  END AS the_date_authorized,\r\n  ftd.tdt_date_to_ordered,\r\n  ftd.tdt_date_to_returned,\r\n  fdd.dyh_date_canceled,\t\r\n  fdd.dyh_date_ready_for_pickup,\t\r\n  fdd.dyh_date_expected_delivery,\t\r\n  fdd.dyh_date_actual_delivery,\t\r\n  fdd.dyh_date_expected_shipment,\t\r\n  fdd.dyh_date_actual_shipment,\r\n  fdd.dyh_date_stock_shortage,\r\n  fdd.dyh_date_invoiced,\r\n  -- Replace dyh_date_return_received of offline returns with the_date_authorized\r\n  CASE \r\n    WHEN ftd.the_to_type = 'offline' AND ftd.tdt_type_detail = 'return' THEN ftd.tdt_date_event\r\n    ELSE fdd.dyh_date_return_received\r\n  END AS dyh_date_return_received,\r\n  fdd.dyh_date_ready_for_picking,\r\n  -- Calculate warehouse shipping delay and grouping\r\n  DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) AS shipping_delay,\r\n  CASE\r\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) > 0 THEN 'Delayed'\r\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) = 0 THEN 'On Time'\r\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) < 0 THEN 'Early'\r\n    ELSE NULL\r\n  END AS shipping_delay_grouping,\r\n  ftd.the_transaction_status,\r\n  ftd.sku_idr_sku,\r\n  ftd.tdt_item_id,\r\n  ftd.mhy_idr_merchandise_hie,\r\n  ftd.tdt_type_detail,\r\n  -- Replace decathlon.nl with the relevant store for digital in store transactions\r\n  CASE \r\n    WHEN fdd.rdt_idr_reallocated_digital_type IN (2,6,7,8) THEN fdd.but_idr_business_unit_economical \r\n    ELSE ftd.but_idr_business_unit \r\n  END AS but_idr_business_unit,\r\n  fdd.but_idr_business_unit_fiscal,\t\r\n  fdd.but_idr_business_unit_economical,\t\r\n  fdd.but_idr_business_unit_sender,\t\r\n  fdd.but_idr_business_unit_clic_n_collect,\t\r\n  fdd.but_idr_business_unit_receiver,\r\n  -- Replace stock origin of returns with the sale stock origin\r\n  CASE \r\n    WHEN ftd.tdt_type_detail = 'sale' THEN fdd.but_idr_business_unit_stock_origin\r\n    WHEN ftd.tdt_type_detail = 'return' THEN fsr.but_idr_business_unit_stock_origin_sale\r\n    ELSE NULL\r\n  END AS but_idr_business_unit_stock_origin,\r\n  -- Replace the digital type null values of offline transactions with 0 (Phsyical)\r\n  CASE \r\n    WHEN ftd.the_to_type = 'offline' THEN 0\r\n    ELSE fdd.rdt_idr_reallocated_digital_type\r\n  END AS rdt_idr_reallocated_digital_type,\r\n  ftd.cnt_idr_country,\r\n  ftd.tpc_idr_touchpoint_channel_type,\r\n  ftd.cur_idr_currency,\r\n  ftd.rrn_idr_return_reason,\r\n  ftd.rty_idr_return_type,\r\n  -- Replace freight method of returns with the sale freight method\r\n  CASE \r\n    WHEN ftd.tdt_type_detail = 'sale' THEN fdd.frm_idr_freight_method\r\n    WHEN ftd.tdt_type_detail = 'return' THEN fsr.frm_idr_freight_method_sale\r\n    ELSE NULL\r\n  END AS frm_idr_freight_method,\r\n  fdd.frm_delivery_type,\r\n  fdd.dyd_purchase_order_number,\r\n  fdd.dyh_shipping_type,\r\n  fdd.sht_idr_shipping_type,\r\n  fdd.dyh_tracking_number,\r\n  fdd.cct_idr_customer_channel_type,\r\n  ftd.ctm_customer_id,\r\n  ftd.ctm_zip_code,\r\n  fdd.dyh_zip_code,\r\n  -- Replace online with offline for digital in store transactions\r\n  CASE \r\n    WHEN fdd.rdt_idr_reallocated_digital_type IN (2,6,7,8) THEN 'offline' \r\n    ELSE ftd.the_to_type \r\n  END AS the_to_type,\r\n  ftd.tdt_item_type,\r\n  ftd.the_order_number,\r\n  ftd.tdt_serial_number_sku,\r\n  ftd.f_pri_regular_sales_unit,\r\n  ftd.f_to_tax_in,\r\n  ftd.f_to_tax_ex,\r\n  ftd.f_amt_discount,\r\n  ftd.f_qty_item,\r\n  ftd.f_pri_unit_cost_price,\r\n  -- Replace margin estimate by margin real if we have margin real\r\n  CASE \r\n    WHEN fdd.f_margin_real IS NOT NULL THEN fdd.f_margin_real \r\n    ELSE ftd.f_margin_estimate \r\n  END AS f_margin,\r\n  ftd.f_amt_tax,\r\n  -- Replace sustainable sales categories with labels\r\n  CASE \r\n    WHEN fts.tds_top_second_life = 1 THEN 'Second Life'\r\n    WHEN fts.tds_top_buy_back = 1 THEN 'BuyBack' \r\n    WHEN fts.tds_top_workshop = 1 THEN 'Workshop'\r\n    WHEN ftd.sku_idr_sku IN (SELECT * FROM rental_sku_ids) THEN 'Rental'\r\n    WHEN fts.tds_top_eco_conception = 1 THEN 'Ecodesign'\r\n    ELSE NULL\r\n  END AS sustainable_group,\r\n  -- Add pro_helped\r\n  CASE \r\n    WHEN fdd.dyh_delivery_id IN (SELECT dyh_delivery_id FROM fph) THEN 1 \r\n    ELSE 0 \r\n  END AS pro_helped,\r\n  -- Calculate difference in days between purchase and return received\r\n  DATE_DIFF(DATE(fdd.dyh_date_return_received), DATE(ftd.the_date_authorized), DAY) AS diff_purchased_return_received,\r\n  CASE\r\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_return_received), DATE(ftd.the_date_authorized), DAY) < 14 THEN '< 14 days'\r\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_return_received), DATE(ftd.the_date_authorized), DAY) < 30 THEN '14-29 days'\r\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_return_received), DATE(ftd.the_date_authorized), DAY) < 60 THEN '30-59 days'\r\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_return_received), DATE(ftd.the_date_authorized), DAY) < 90 THEN '60-89 days'\r\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_return_received), DATE(ftd.the_date_authorized), DAY) < 30 THEN '90-365 days'\r\n  END AS diff_purchased_return_received_grouping,\r\n  CASE \r\n    WHEN ftd.the_to_type = 'offline' THEN ftd.the_date_authorized\r\n    WHEN ftd.the_to_type = 'online' AND ftd.tdt_type_detail = 'return' THEN fdd.dyh_date_return_received\r\n    WHEN ftd.the_to_type = 'online' AND ftd.tdt_type_detail = 'sale' THEN ftd.the_date_authorized\r\n    ELSE NULL\r\n  END AS date_authorized_or_return_received,\r\n  CONCAT(ftd.the_transaction_id,'-',ftd.tdt_num_line) AS the_transaction_id_num_line,\r\n  ftd.rs_technical_date,\r\n  ret.destination_reason,\r\n  ret.sorting_key\r\nFROM {{ ref('fct_transaction_detail_last_two_years') }} ftd \r\n-- Joins were checked for duplicates\r\nLEFT JOIN fdd \r\n  ON ftd.the_transaction_id = fdd.the_transaction_id AND ftd.tdt_num_line = fdd.tdt_num_line\r\nLEFT JOIN {{ ref('fct_transaction_sustainable_last_two_years') }} fts \r\n  ON ftd.the_transaction_id = fts.the_transaction_id AND ftd.tdt_num_line = fts.tdt_num_line\r\nLEFT JOIN {{ ref('fct_retbox') }} ret \r\n  ON ftd.tdt_order_number = ret.order_number AND ftd.tdt_item_id = ret.product_code AND ftd.tdt_type_detail = ret.tdt_type_detail\r\nLEFT JOIN fsr \r\n  ON ftd.tdt_order_number = fsr.tdt_order_number AND ftd.sku_idr_sku = fsr.sku_idr_sku AND ftd.tdt_type_detail = fsr.tdt_type_detail",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.fct_delivery_detail_last_two_years",
                    "model.dbt_datanl_prod.stg_d_sku",
                    "model.dbt_datanl_prod.fct_PRO_Helped_Orders",
                    "model.dbt_datanl_prod.fct_delivery_detail_last_two_years",
                    "model.dbt_datanl_prod.fct_transaction_detail_last_two_years",
                    "model.dbt_datanl_prod.fct_transaction_sustainable_last_two_years",
                    "model.dbt_datanl_prod.fct_retbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [
                    "Promise",
                    "Returns"
                ],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "fct_transactions"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_transactions",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\fct_transactions.sql",
            "original_file_path": "models\\Datamart\\fct_transactions.sql",
            "name": "fct_transactions",
            "alias": "fct_transactions",
            "checksum": {
                "name": "sha256",
                "checksum": "ce4d930cf0eb24709c0b9c1985788aaed26755ebe11bf627869fc6439b76c678"
            },
            "tags": [
                "Promise",
                "Returns"
            ],
            "refs": [
                [
                    "fct_delivery_detail_last_two_years"
                ],
                [
                    "stg_d_sku"
                ],
                [
                    "fct_PRO_Helped_Orders"
                ],
                [
                    "fct_delivery_detail_last_two_years"
                ],
                [
                    "fct_transaction_detail_last_two_years"
                ],
                [
                    "fct_transaction_sustainable_last_two_years"
                ],
                [
                    "fct_retbox"
                ]
            ],
            "sources": [],
            "description": "Let's provide stg_transaction with a good description",
            "columns": {
                "the_date_authorized": {
                    "name": "the_date_authorized",
                    "description": "The date purchased",
                    "meta": {
                        "display_name": "Date Purchased"
                    },
                    "data_type": null,
                    "quote": null,
                    "tags": [
                        "Promise",
                        "Returns"
                    ]
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "dbt_datanl_prod://models\\Datamart\\fct_transactions.yml",
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\fct_transactions.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\fct_transactions.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view",
                "tags": [
                    "Promise",
                    "Returns"
                ]
            },
            "created_at": 1660315626.5878344,
            "compiled_sql": "\n\n-------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------\n-- View: stg_transactions\n-- Transformations: \n--    - select relevant columns, \n--    - reassign digital in store to offline\n--    - add columns from f_delivery_detail and f_delivery_header\n--    - add sustainable grouping from f_transaction_sustainable\n--    - handle offline return dates\n--    - calculate shipping delay\n-------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------\n\nWITH fdd AS (\n  SELECT the_transaction_id, \n    dyh_delivery_id,\n    dyh_num_line_delivery,\n    tdt_num_line, \n    dyh_date_canceled,\t\n    dyh_date_ready_for_pickup,\t\n    dyh_date_expected_delivery,\t\n    dyh_date_actual_delivery,\t\n    dyh_date_expected_shipment,\t\n    dyh_date_actual_shipment,\n    dyh_date_stock_shortage,\n    dyh_date_invoiced,\n    dyh_date_return_received,\n    dyh_date_ready_for_picking,\n    but_idr_business_unit_fiscal,\t\n    but_idr_business_unit_economical,\t\n    but_idr_business_unit_sender,\t\n    but_idr_business_unit_clic_n_collect,\t\n    but_idr_business_unit_receiver,\n    but_idr_business_unit_stock_origin,\n    rdt_idr_reallocated_digital_type,\n    frm_idr_freight_method,\n    frm_delivery_type,\n    dyd_purchase_order_number,\n    dyh_shipping_type,\n    sht_idr_shipping_type,\n    dyh_tracking_number,\n    cct_idr_customer_channel_type,\n    dyh_zip_code,\n    f_margin_real,\n    rs_technical_date\n  FROM `datanl-prod-fy0d`.`Datamart`.`fct_delivery_detail_last_two_years`\n),\n\n-- Subquery: gets sku ids that belong to rental products from sku table\nrental_sku_ids AS (\n  SELECT sku_idr_sku \n  FROM `datanl-prod-fy0d`.`redshift`.`stg_d_sku`\n  WHERE mdl_num_model_r3 IN (8618395,8664824,8664825,8664828,8618397)\n),\n\n-- Subquery: gets relevant data from PRO_Helped_Orders sheet\nfph AS (\n  SELECT DISTINCT LOWER(NB_shipping_group) AS dyh_delivery_id\n  FROM `datanl-prod-fy0d`.`Datamart_Promise`.`fct_PRO_Helped_Orders`\n),\n\n-- Subquery: gets relevant sale info in a way they can be joined correctly with returns\nfsr AS(\n  SELECT tdt_order_number, \n  sku_idr_sku, \n  tdt_item_type, 'return' AS tdt_type_detail, \n  but_idr_business_unit_stock_origin AS but_idr_business_unit_stock_origin_sale, \n  frm_idr_freight_method AS frm_idr_freight_method_sale\n  FROM `datanl-prod-fy0d`.`Datamart`.`fct_delivery_detail_last_two_years`\n  WHERE tdt_type_detail = 'sale'\n  AND tdt_item_id != '2102120'\n  AND frm_idr_freight_method != 0\n)\n\n-- Main Query\nSELECT ftd.the_transaction_id,\n  ftd.tdt_num_line,\n  fdd.dyh_delivery_id,\n  fdd.dyh_num_line_delivery,\n  ftd.the_date_transaction,\n  -- Replace the_date_authorized of offline returns with null\n  CASE \n    WHEN ftd.the_to_type = 'offline' AND ftd.tdt_type_detail = 'return' THEN NULL \n    ELSE ftd.the_date_authorized\n  END AS the_date_authorized,\n  ftd.tdt_date_to_ordered,\n  ftd.tdt_date_to_returned,\n  fdd.dyh_date_canceled,\t\n  fdd.dyh_date_ready_for_pickup,\t\n  fdd.dyh_date_expected_delivery,\t\n  fdd.dyh_date_actual_delivery,\t\n  fdd.dyh_date_expected_shipment,\t\n  fdd.dyh_date_actual_shipment,\n  fdd.dyh_date_stock_shortage,\n  fdd.dyh_date_invoiced,\n  -- Replace dyh_date_return_received of offline returns with the_date_authorized\n  CASE \n    WHEN ftd.the_to_type = 'offline' AND ftd.tdt_type_detail = 'return' THEN ftd.tdt_date_event\n    ELSE fdd.dyh_date_return_received\n  END AS dyh_date_return_received,\n  fdd.dyh_date_ready_for_picking,\n  -- Calculate warehouse shipping delay and grouping\n  DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) AS shipping_delay,\n  CASE\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) > 0 THEN 'Delayed'\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) = 0 THEN 'On Time'\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_actual_shipment), DATE(fdd.dyh_date_expected_shipment), DAY) < 0 THEN 'Early'\n    ELSE NULL\n  END AS shipping_delay_grouping,\n  ftd.the_transaction_status,\n  ftd.sku_idr_sku,\n  ftd.tdt_item_id,\n  ftd.mhy_idr_merchandise_hie,\n  ftd.tdt_type_detail,\n  -- Replace decathlon.nl with the relevant store for digital in store transactions\n  CASE \n    WHEN fdd.rdt_idr_reallocated_digital_type IN (2,6,7,8) THEN fdd.but_idr_business_unit_economical \n    ELSE ftd.but_idr_business_unit \n  END AS but_idr_business_unit,\n  fdd.but_idr_business_unit_fiscal,\t\n  fdd.but_idr_business_unit_economical,\t\n  fdd.but_idr_business_unit_sender,\t\n  fdd.but_idr_business_unit_clic_n_collect,\t\n  fdd.but_idr_business_unit_receiver,\n  -- Replace stock origin of returns with the sale stock origin\n  CASE \n    WHEN ftd.tdt_type_detail = 'sale' THEN fdd.but_idr_business_unit_stock_origin\n    WHEN ftd.tdt_type_detail = 'return' THEN fsr.but_idr_business_unit_stock_origin_sale\n    ELSE NULL\n  END AS but_idr_business_unit_stock_origin,\n  -- Replace the digital type null values of offline transactions with 0 (Phsyical)\n  CASE \n    WHEN ftd.the_to_type = 'offline' THEN 0\n    ELSE fdd.rdt_idr_reallocated_digital_type\n  END AS rdt_idr_reallocated_digital_type,\n  ftd.cnt_idr_country,\n  ftd.tpc_idr_touchpoint_channel_type,\n  ftd.cur_idr_currency,\n  ftd.rrn_idr_return_reason,\n  ftd.rty_idr_return_type,\n  -- Replace freight method of returns with the sale freight method\n  CASE \n    WHEN ftd.tdt_type_detail = 'sale' THEN fdd.frm_idr_freight_method\n    WHEN ftd.tdt_type_detail = 'return' THEN fsr.frm_idr_freight_method_sale\n    ELSE NULL\n  END AS frm_idr_freight_method,\n  fdd.frm_delivery_type,\n  fdd.dyd_purchase_order_number,\n  fdd.dyh_shipping_type,\n  fdd.sht_idr_shipping_type,\n  fdd.dyh_tracking_number,\n  fdd.cct_idr_customer_channel_type,\n  ftd.ctm_customer_id,\n  ftd.ctm_zip_code,\n  fdd.dyh_zip_code,\n  -- Replace online with offline for digital in store transactions\n  CASE \n    WHEN fdd.rdt_idr_reallocated_digital_type IN (2,6,7,8) THEN 'offline' \n    ELSE ftd.the_to_type \n  END AS the_to_type,\n  ftd.tdt_item_type,\n  ftd.the_order_number,\n  ftd.tdt_serial_number_sku,\n  ftd.f_pri_regular_sales_unit,\n  ftd.f_to_tax_in,\n  ftd.f_to_tax_ex,\n  ftd.f_amt_discount,\n  ftd.f_qty_item,\n  ftd.f_pri_unit_cost_price,\n  -- Replace margin estimate by margin real if we have margin real\n  CASE \n    WHEN fdd.f_margin_real IS NOT NULL THEN fdd.f_margin_real \n    ELSE ftd.f_margin_estimate \n  END AS f_margin,\n  ftd.f_amt_tax,\n  -- Replace sustainable sales categories with labels\n  CASE \n    WHEN fts.tds_top_second_life = 1 THEN 'Second Life'\n    WHEN fts.tds_top_buy_back = 1 THEN 'BuyBack' \n    WHEN fts.tds_top_workshop = 1 THEN 'Workshop'\n    WHEN ftd.sku_idr_sku IN (SELECT * FROM rental_sku_ids) THEN 'Rental'\n    WHEN fts.tds_top_eco_conception = 1 THEN 'Ecodesign'\n    ELSE NULL\n  END AS sustainable_group,\n  -- Add pro_helped\n  CASE \n    WHEN fdd.dyh_delivery_id IN (SELECT dyh_delivery_id FROM fph) THEN 1 \n    ELSE 0 \n  END AS pro_helped,\n  -- Calculate difference in days between purchase and return received\n  DATE_DIFF(DATE(fdd.dyh_date_return_received), DATE(ftd.the_date_authorized), DAY) AS diff_purchased_return_received,\n  CASE\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_return_received), DATE(ftd.the_date_authorized), DAY) < 14 THEN '< 14 days'\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_return_received), DATE(ftd.the_date_authorized), DAY) < 30 THEN '14-29 days'\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_return_received), DATE(ftd.the_date_authorized), DAY) < 60 THEN '30-59 days'\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_return_received), DATE(ftd.the_date_authorized), DAY) < 90 THEN '60-89 days'\n    WHEN DATE_DIFF(DATE(fdd.dyh_date_return_received), DATE(ftd.the_date_authorized), DAY) < 30 THEN '90-365 days'\n  END AS diff_purchased_return_received_grouping,\n  CASE \n    WHEN ftd.the_to_type = 'offline' THEN ftd.the_date_authorized\n    WHEN ftd.the_to_type = 'online' AND ftd.tdt_type_detail = 'return' THEN fdd.dyh_date_return_received\n    WHEN ftd.the_to_type = 'online' AND ftd.tdt_type_detail = 'sale' THEN ftd.the_date_authorized\n    ELSE NULL\n  END AS date_authorized_or_return_received,\n  CONCAT(ftd.the_transaction_id,'-',ftd.tdt_num_line) AS the_transaction_id_num_line,\n  ftd.rs_technical_date,\n  ret.destination_reason,\n  ret.sorting_key\nFROM `datanl-prod-fy0d`.`Datamart`.`fct_transaction_detail_last_two_years` ftd \n-- Joins were checked for duplicates\nLEFT JOIN fdd \n  ON ftd.the_transaction_id = fdd.the_transaction_id AND ftd.tdt_num_line = fdd.tdt_num_line\nLEFT JOIN `datanl-prod-fy0d`.`Datamart`.`fct_transaction_sustainable_last_two_years` fts \n  ON ftd.the_transaction_id = fts.the_transaction_id AND ftd.tdt_num_line = fts.tdt_num_line\nLEFT JOIN `datanl-prod-fy0d`.`Datamart`.`fct_retbox` ret \n  ON ftd.tdt_order_number = ret.order_number AND ftd.tdt_item_id = ret.product_code AND ftd.tdt_type_detail = ret.tdt_type_detail\nLEFT JOIN fsr \n  ON ftd.tdt_order_number = fsr.tdt_order_number AND ftd.sku_idr_sku = fsr.sku_idr_sku AND ftd.tdt_type_detail = fsr.tdt_type_detail",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`fct_transactions`"
        },
        "model.dbt_datanl_prod.fct_sustainable_awareness_scores": {
            "raw_sql": "-- Subquery:\r\nWITH sust_bu_nums AS (\r\n  SELECT DISTINCT Business_Unit_ID FROM {{ ref('fct_Sustainability_Awareness_Scores') }}\r\n),\r\n\r\n-- Subquery:\r\nsus_bu_ids AS (\r\n  SELECT but_num_business_unit, \r\n  but_idr_business_unit\r\n  FROM {{ ref('stg_d_business_unit') }}\r\n  WHERE but_num_business_unit IN (SELECT * FROM sust_bu_nums)\r\n  AND cnt_idr_country = 144\r\n  AND eln_num_elt_niveau_eln = 1\r\n)\r\n\r\n-- Main Query:\r\nSELECT b.but_idr_business_unit,\r\n  Social_SD_Score AS social_sd_score,\r\n  Planet_SD_Score AS planet_sd_score\r\nFROM {{ ref('fct_Sustainability_Awareness_Scores') }} a\r\nLEFT JOIN sus_bu_ids b ON a.Business_Unit_ID = b.but_num_business_unit",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ],
                "nodes": [
                    "model.dbt_datanl_prod.fct_Sustainability_Awareness_Scores",
                    "model.dbt_datanl_prod.stg_d_business_unit",
                    "model.dbt_datanl_prod.fct_Sustainability_Awareness_Scores"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "Datamart",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "datanl-prod-fy0d",
            "schema": "Datamart",
            "fqn": [
                "dbt_datanl_prod",
                "Datamart",
                "fct_sustainable_awareness_scores"
            ],
            "unique_id": "model.dbt_datanl_prod.fct_sustainable_awareness_scores",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "Datamart\\fct_sustainable_awareness_scores.sql",
            "original_file_path": "models\\Datamart\\fct_sustainable_awareness_scores.sql",
            "name": "fct_sustainable_awareness_scores",
            "alias": "fct_sustainable_awareness_scores",
            "checksum": {
                "name": "sha256",
                "checksum": "74f2e3818149d326af9ea99df4da3811ad3b996e0cbe6733e3b5799dcceb0c60"
            },
            "tags": [],
            "refs": [
                [
                    "fct_Sustainability_Awareness_Scores"
                ],
                [
                    "stg_d_business_unit"
                ],
                [
                    "fct_Sustainability_Awareness_Scores"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "docs\\compiled\\dbt_datanl_prod\\models\\Datamart\\fct_sustainable_awareness_scores.sql",
            "build_path": "docs\\run\\dbt_datanl_prod\\models\\Datamart\\fct_sustainable_awareness_scores.sql",
            "deferred": false,
            "unrendered_config": {
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "schema": "Datamart",
                "materialized": "view"
            },
            "created_at": 1660315626.577615,
            "compiled_sql": "-- Subquery:\nWITH sust_bu_nums AS (\n  SELECT DISTINCT Business_Unit_ID FROM `datanl-prod-fy0d`.`Datamart_Sustainability`.`fct_Sustainability_Awareness_Scores`\n),\n\n-- Subquery:\nsus_bu_ids AS (\n  SELECT but_num_business_unit, \n  but_idr_business_unit\n  FROM `datanl-prod-fy0d`.`redshift`.`stg_d_business_unit`\n  WHERE but_num_business_unit IN (SELECT * FROM sust_bu_nums)\n  AND cnt_idr_country = 144\n  AND eln_num_elt_niveau_eln = 1\n)\n\n-- Main Query:\nSELECT b.but_idr_business_unit,\n  Social_SD_Score AS social_sd_score,\n  Planet_SD_Score AS planet_sd_score\nFROM `datanl-prod-fy0d`.`Datamart_Sustainability`.`fct_Sustainability_Awareness_Scores` a\nLEFT JOIN sus_bu_ids b ON a.Business_Unit_ID = b.but_num_business_unit",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`datanl-prod-fy0d`.`Datamart`.`fct_sustainable_awareness_scores`"
        }
    },
    "sources": {
        "source.dbt_datanl_prod.Datamart_Promise.src_CO2_Extraction": {
            "fqn": [
                "dbt_datanl_prod",
                "Datamart_Promise",
                "src_CO2_Extraction"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "Datamart_Promise",
            "unique_id": "source.dbt_datanl_prod.Datamart_Promise.src_CO2_Extraction",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_gsheet_Promise.yml",
            "original_file_path": "models\\src_gsheet_Promise.yml",
            "name": "src_CO2_Extraction",
            "source_name": "Datamart_Promise",
            "source_description": "",
            "loader": "",
            "identifier": "src_CO2_Extraction",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "https://docs.google.com/spreadsheets/d/1RhiJzGUDy7XE5V00bgLv8dE9lzxH2KS7fpmqnQjgk5k/edit#gid=0",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "GOOGLE_SHEETS",
                    "skip_leading_rows": 1
                }
            },
            "description": "External Google sheet table",
            "columns": {
                "Site": {
                    "name": "Site",
                    "description": "Site ID",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "Year": {
                    "name": "Year",
                    "description": "Year",
                    "meta": {},
                    "data_type": "int",
                    "quote": null,
                    "tags": []
                },
                "Month": {
                    "name": "Month",
                    "description": "Month",
                    "meta": {},
                    "data_type": "int",
                    "quote": null,
                    "tags": []
                },
                "Sum_kg_CO2e": {
                    "name": "Sum_kg_CO2e",
                    "description": "Sum_kg_CO2e",
                    "meta": {},
                    "data_type": "int",
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`Datamart_Promise`.`src_CO2_Extraction`",
            "created_at": 1660305774.190801
        },
        "source.dbt_datanl_prod.Datamart_Promise.src_PRO_Helped_Orders": {
            "fqn": [
                "dbt_datanl_prod",
                "Datamart_Promise",
                "src_PRO_Helped_Orders"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "Datamart_Promise",
            "unique_id": "source.dbt_datanl_prod.Datamart_Promise.src_PRO_Helped_Orders",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_gsheet_Promise.yml",
            "original_file_path": "models\\src_gsheet_Promise.yml",
            "name": "src_PRO_Helped_Orders",
            "source_name": "Datamart_Promise",
            "source_description": "",
            "loader": "",
            "identifier": "src_PRO_Helped_Orders",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "https://docs.google.com/spreadsheets/d/14kKfeXPYPbFPT3d-cXKt9JPTndQWQDBpD7bTj0L39U8/edit#gid=0",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "GOOGLE_SHEETS",
                    "skip_leading_rows": 1
                }
            },
            "description": "External Google sheet table",
            "columns": {
                "Date": {
                    "name": "Date",
                    "description": "Date",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "NB_shipping_group": {
                    "name": "NB_shipping_group",
                    "description": "NB_shipping_group",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`Datamart_Promise`.`src_PRO_Helped_Orders`",
            "created_at": 1660305774.190801
        },
        "source.dbt_datanl_prod.Datamart_Sustainability.src_Sustainability_Awareness_Scores": {
            "fqn": [
                "dbt_datanl_prod",
                "Datamart_Sustainability",
                "src_Sustainability_Awareness_Scores"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "Datamart_Sustainability",
            "unique_id": "source.dbt_datanl_prod.Datamart_Sustainability.src_Sustainability_Awareness_Scores",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_gsheet_Sustainability.yml",
            "original_file_path": "models\\src_gsheet_Sustainability.yml",
            "name": "src_Sustainability_Awareness_Scores",
            "source_name": "Datamart_Sustainability",
            "source_description": "",
            "loader": "",
            "identifier": "src_Sustainability_Awareness_Scores",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "https://docs.google.com/spreadsheets/d/1cPM8lsFK5hiQrkxsnXUCPSAzXubkL1S91PZwTHDtigc/edit#gid=1036531530",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "GOOGLE_SHEETS",
                    "skip_leading_rows": 1
                }
            },
            "description": "External Google sheet table",
            "columns": {
                "Year": {
                    "name": "Year",
                    "description": "Year",
                    "meta": {},
                    "data_type": "int",
                    "quote": null,
                    "tags": []
                },
                "Quarter": {
                    "name": "Quarter",
                    "description": "Quarter",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "Business_Unit_ID": {
                    "name": "Business_Unit_ID",
                    "description": "Business Unit ID",
                    "meta": {},
                    "data_type": "numeric",
                    "quote": null,
                    "tags": []
                },
                "Business_Unit": {
                    "name": "Business_Unit",
                    "description": "Business_Unit",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "Social_SD_Score": {
                    "name": "Social_SD_Score",
                    "description": "SOCIAL SD Assessment Score",
                    "meta": {},
                    "data_type": "numeric",
                    "quote": null,
                    "tags": []
                },
                "Planet_SD_Score": {
                    "name": "Planet_SD_Score",
                    "description": "SOCIAL SD Assessment Score",
                    "meta": {},
                    "data_type": "numeric",
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`Datamart_Sustainability`.`src_Sustainability_Awareness_Scores`",
            "created_at": 1660305774.190801
        },
        "source.dbt_datanl_prod.redshift.src_d_business_unit": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_business_unit"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_business_unit",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_business_unit",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_business_unit",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_business_unit0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_business_unit`",
            "created_at": 1660305774.191804
        },
        "source.dbt_datanl_prod.redshift.src_d_customer_channel_type": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_customer_channel_type"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_customer_channel_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_customer_channel_type",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_customer_channel_type",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_customer_channel_type0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_customer_channel_type`",
            "created_at": 1660305774.191804
        },
        "source.dbt_datanl_prod.redshift.src_d_customers": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_customers"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_customers",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_customers",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_customers",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_customers0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_customers`",
            "created_at": 1660305774.191804
        },
        "source.dbt_datanl_prod.redshift.src_d_day": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_day"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_day",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_day",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_day",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_day0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_day`",
            "created_at": 1660305774.191804
        },
        "source.dbt_datanl_prod.redshift.src_d_delivery_type": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_delivery_type"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_delivery_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_delivery_type",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_delivery_type",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_delivery_type0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_delivery_type`",
            "created_at": 1660305774.191804
        },
        "source.dbt_datanl_prod.redshift.src_d_department": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_department"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_department",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_department",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_department",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_department0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_department`",
            "created_at": 1660305774.191804
        },
        "source.dbt_datanl_prod.redshift.src_d_family": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_family"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_family",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_family",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_family",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_family0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_family`",
            "created_at": 1660305774.191804
        },
        "source.dbt_datanl_prod.redshift.src_d_freight_method": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_freight_method"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_freight_method",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_freight_method",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_freight_method",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_freight_method0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_freight_method`",
            "created_at": 1660305774.1928017
        },
        "source.dbt_datanl_prod.redshift.src_d_label": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_label"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_label",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_label",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_label",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_label0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_label`",
            "created_at": 1660305774.1928017
        },
        "source.dbt_datanl_prod.redshift.src_d_merchandise_hierarchy": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_merchandise_hierarchy"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_merchandise_hierarchy",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_merchandise_hierarchy",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_merchandise_hierarchy",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_merchandise_hierarchy0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_merchandise_hierarchy`",
            "created_at": 1660305774.1928017
        },
        "source.dbt_datanl_prod.redshift.src_d_mkp_product": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_mkp_product"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_mkp_product",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_mkp_product",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_mkp_product",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_mkp_product0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_mkp_product`",
            "created_at": 1660305774.1928017
        },
        "source.dbt_datanl_prod.redshift.src_d_model": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_model"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_model",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_model",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_model",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_model0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_model`",
            "created_at": 1660305774.1928017
        },
        "source.dbt_datanl_prod.redshift.src_d_product_nature": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_product_nature"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_product_nature",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_product_nature",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_product_nature",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_product_nature0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_product_nature`",
            "created_at": 1660305774.1928017
        },
        "source.dbt_datanl_prod.redshift.src_d_reallocated_digital_type": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_reallocated_digital_type"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_reallocated_digital_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_reallocated_digital_type",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_reallocated_digital_type",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_reallocated_digital_type00*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_reallocated_digital_type`",
            "created_at": 1660305774.1928017
        },
        "source.dbt_datanl_prod.redshift.src_logical_stock_snapshot": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_logical_stock_snapshot"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_logical_stock_snapshot",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_logical_stock_snapshot",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_logical_stock_snapshot",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/logical_stock_snapshot00*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_logical_stock_snapshot`",
            "created_at": 1660305774.1937947
        },
        "source.dbt_datanl_prod.redshift.src_d_return_reason": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_return_reason"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_return_reason",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_return_reason",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_return_reason",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_return_reason0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_return_reason`",
            "created_at": 1660305774.1937947
        },
        "source.dbt_datanl_prod.redshift.src_d_return_type": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_return_type"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_return_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_return_type",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_return_type",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_return_type0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_return_type`",
            "created_at": 1660305774.1937947
        },
        "source.dbt_datanl_prod.redshift.src_d_shipping_type": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_shipping_type"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_shipping_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_shipping_type",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_shipping_type",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_shipping_type0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_shipping_type`",
            "created_at": 1660305774.1937947
        },
        "source.dbt_datanl_prod.redshift.src_d_sku": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_sku"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_sku",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_sku",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_sku",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_sku0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_sku`",
            "created_at": 1660305774.1937947
        },
        "source.dbt_datanl_prod.redshift.src_d_sport_dpt": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_sport_dpt"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_sport_dpt",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_sport_dpt",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_sport_dpt",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_sport_dpt0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_sport_dpt`",
            "created_at": 1660305774.1937947
        },
        "source.dbt_datanl_prod.redshift.src_d_touchpoint_channel_type": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_touchpoint_channel_type"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_touchpoint_channel_type",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_touchpoint_channel_type",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_touchpoint_channel_type",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_touchpoint_channel_type0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_touchpoint_channel_type`",
            "created_at": 1660305774.1937947
        },
        "source.dbt_datanl_prod.redshift.src_d_week": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_d_week"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_d_week",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_d_week",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_d_week",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/d_week0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_d_week`",
            "created_at": 1660305774.1947927
        },
        "source.dbt_datanl_prod.redshift.src_f_availability_rate": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_availability_rate"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_availability_rate",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_availability_rate",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_availability_rate",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_availability_rate0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_availability_rate`",
            "created_at": 1660305774.1947927
        },
        "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2019": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_delivery_detail_2019"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2019",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_delivery_detail_2019",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_delivery_detail_2019",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_detail_20190*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_delivery_detail_2019`",
            "created_at": 1660305774.1947927
        },
        "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2020": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_delivery_detail_2020"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2020",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_delivery_detail_2020",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_delivery_detail_2020",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_detail_20200*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_delivery_detail_2020`",
            "created_at": 1660305774.1947927
        },
        "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2021": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_delivery_detail_2021"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2021",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_delivery_detail_2021",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_delivery_detail_2021",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_detail_20210*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_delivery_detail_2021`",
            "created_at": 1660305774.1947927
        },
        "source.dbt_datanl_prod.redshift.src_f_delivery_detail_current": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_delivery_detail_current"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_delivery_detail_current",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_delivery_detail_current",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_delivery_detail_current",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_detail_current0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_delivery_detail_current`",
            "created_at": 1660305774.1947927
        },
        "source.dbt_datanl_prod.redshift.src_f_delivery_header_2019": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_delivery_header_2019"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_delivery_header_2019",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_delivery_header_2019",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_delivery_header_2019",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_header_20190*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_delivery_header_2019`",
            "created_at": 1660305774.1947927
        },
        "source.dbt_datanl_prod.redshift.src_f_delivery_header_2020": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_delivery_header_2020"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_delivery_header_2020",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_delivery_header_2020",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_delivery_header_2020",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_header_20200*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_delivery_header_2020`",
            "created_at": 1660305774.1957886
        },
        "source.dbt_datanl_prod.redshift.src_f_delivery_header_2021": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_delivery_header_2021"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_delivery_header_2021",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_delivery_header_2021",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_delivery_header_2021",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_header_20210*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_delivery_header_2021`",
            "created_at": 1660305774.1957886
        },
        "source.dbt_datanl_prod.redshift.src_f_delivery_header_current": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_delivery_header_current"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_delivery_header_current",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_delivery_header_current",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_delivery_header_current",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_delivery_header_current0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_delivery_header_current`",
            "created_at": 1660305774.1957886
        },
        "source.dbt_datanl_prod.redshift.src_f_mkp_transaction_detail": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_mkp_transaction_detail"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_mkp_transaction_detail",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_mkp_transaction_detail",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_mkp_transaction_detail",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_mkp_transaction_detail0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_mkp_transaction_detail`",
            "created_at": 1660305774.1957886
        },
        "source.dbt_datanl_prod.redshift.src_f_postnl_year": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_postnl_year"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_postnl_year",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_postnl_year",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_postnl_year",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_postnl_year0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_postnl_year`",
            "created_at": 1660305774.1957886
        },
        "source.dbt_datanl_prod.redshift.src_f_supply_vc4r_retbox": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_supply_vc4r_retbox"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_supply_vc4r_retbox",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_supply_vc4r_retbox",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_supply_vc4r_retbox",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_supply_vc4r_retbox0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_supply_vc4r_retbox`",
            "created_at": 1660305774.1957886
        },
        "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2019": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_transaction_detail_2019"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2019",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_transaction_detail_2019",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_transaction_detail_2019",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_detail_20190*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_transaction_detail_2019`",
            "created_at": 1660305774.1957886
        },
        "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2020": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_transaction_detail_2020"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2020",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_transaction_detail_2020",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_transaction_detail_2020",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_detail_20200*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_transaction_detail_2020`",
            "created_at": 1660305774.1957886
        },
        "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2021": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_transaction_detail_2021"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2021",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_transaction_detail_2021",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_transaction_detail_2021",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_detail_20210*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_transaction_detail_2021`",
            "created_at": 1660305774.1957886
        },
        "source.dbt_datanl_prod.redshift.src_f_transaction_detail_current": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_transaction_detail_current"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_transaction_detail_current",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_transaction_detail_current",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_transaction_detail_current",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_detail_current0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_transaction_detail_current`",
            "created_at": 1660305774.196784
        },
        "source.dbt_datanl_prod.redshift.src_f_transaction_header_2019": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_transaction_header_2019"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_transaction_header_2019",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_transaction_header_2019",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_transaction_header_2019",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_header_20190*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_transaction_header_2019`",
            "created_at": 1660305774.196784
        },
        "source.dbt_datanl_prod.redshift.src_f_transaction_header_2020": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_transaction_header_2020"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_transaction_header_2020",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_transaction_header_2020",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_transaction_header_2020",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_header_20200*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_transaction_header_2020`",
            "created_at": 1660305774.196784
        },
        "source.dbt_datanl_prod.redshift.src_f_transaction_header_2021": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_transaction_header_2021"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_transaction_header_2021",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_transaction_header_2021",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_transaction_header_2021",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_header_20210*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_transaction_header_2021`",
            "created_at": 1660305774.196784
        },
        "source.dbt_datanl_prod.redshift.src_f_transaction_header_current": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_transaction_header_current"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_transaction_header_current",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_transaction_header_current",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_transaction_header_current",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_header_current0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_transaction_header_current`",
            "created_at": 1660305774.196784
        },
        "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2019": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_transaction_sustainable_2019"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2019",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_transaction_sustainable_2019",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_transaction_sustainable_2019",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_sustainable_20190*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_transaction_sustainable_2019`",
            "created_at": 1660305774.196784
        },
        "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2020": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_transaction_sustainable_2020"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2020",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_transaction_sustainable_2020",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_transaction_sustainable_2020",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_sustainable_20200*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_transaction_sustainable_2020`",
            "created_at": 1660305774.196784
        },
        "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2021": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_transaction_sustainable_2021"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2021",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_transaction_sustainable_2021",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_transaction_sustainable_2021",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_sustainable_20210*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_transaction_sustainable_2021`",
            "created_at": 1660305774.196784
        },
        "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_current": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_f_transaction_sustainable_current"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_current",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_f_transaction_sustainable_current",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_f_transaction_sustainable_current",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/f_transaction_sustainable_current0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_f_transaction_sustainable_current`",
            "created_at": 1660305774.196784
        },
        "source.dbt_datanl_prod.redshift.src_lib_web_order_status": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_lib_web_order_status"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_lib_web_order_status",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_lib_web_order_status",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_lib_web_order_status",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/lib_web_order_status0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_lib_web_order_status`",
            "created_at": 1660305774.196784
        },
        "source.dbt_datanl_prod.redshift.src_needs_car_autoflow": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_needs_car_autoflow"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_needs_car_autoflow",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_needs_car_autoflow",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_needs_car_autoflow",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/needs_car_autoflow0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_needs_car_autoflow`",
            "created_at": 1660305774.1977804
        },
        "source.dbt_datanl_prod.redshift.src_opv_customer__personal_data": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_opv_customer__personal_data"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_opv_customer__personal_data",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_opv_customer__personal_data",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_opv_customer__personal_data",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/opv_customer__personal_data0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_opv_customer__personal_data`",
            "created_at": 1660305774.1977804
        },
        "source.dbt_datanl_prod.redshift.src_opv_review__review": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_opv_review__review"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_opv_review__review",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_opv_review__review",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_opv_review__review",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/opv_review__review0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_opv_review__review`",
            "created_at": 1660305774.1977804
        },
        "source.dbt_datanl_prod.redshift.src_opv_user__author": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_opv_user__author"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_opv_user__author",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_opv_user__author",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_opv_user__author",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/opv_user__author0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_opv_user__author`",
            "created_at": 1660305774.1977804
        },
        "source.dbt_datanl_prod.redshift.src_physical_stock_snapshot": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_physical_stock_snapshot"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_physical_stock_snapshot",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_physical_stock_snapshot",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_physical_stock_snapshot",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/physical_stock_snapshot0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_physical_stock_snapshot`",
            "created_at": 1660305774.1977804
        },
        "source.dbt_datanl_prod.redshift.src_weight_dimension_finish_product": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_weight_dimension_finish_product"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_weight_dimension_finish_product",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_weight_dimension_finish_product",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_weight_dimension_finish_product",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/weight_dimension_finish_product0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_weight_dimension_finish_product`",
            "created_at": 1660305774.1977804
        },
        "source.dbt_datanl_prod.redshift.src_zsd_oms_ordtrkhi": {
            "fqn": [
                "dbt_datanl_prod",
                "redshift",
                "src_zsd_oms_ordtrkhi"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "redshift",
            "unique_id": "source.dbt_datanl_prod.redshift.src_zsd_oms_ordtrkhi",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_redshift.yml",
            "original_file_path": "models\\src_redshift.yml",
            "name": "src_zsd_oms_ordtrkhi",
            "source_name": "redshift",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_zsd_oms_ordtrkhi",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://datanl-prod-cds/Decathlon_Netherlands/datanl-prod/datanl-prod-cds/zsd_oms_ordtrkhi0*",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "parquet"
                }
            },
            "description": "External Redshift table, stored as Parquet files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`redshift`.`src_zsd_oms_ordtrkhi`",
            "created_at": 1660305774.1977804
        },
        "source.dbt_datanl_prod.zendesk.src_zendesk_tickets": {
            "fqn": [
                "dbt_datanl_prod",
                "zendesk",
                "src_zendesk_tickets"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "zendesk",
            "unique_id": "source.dbt_datanl_prod.zendesk.src_zendesk_tickets",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_zendesk.yml",
            "original_file_path": "models\\src_zendesk.yml",
            "name": "src_zendesk_tickets",
            "source_name": "zendesk",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_zendesk_tickets",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://decathlon_united_redshift_data/Decathlon_Netherlands/DataLake/CRC/zendesk_tickets.csv",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "csv",
                    "allow_jagged_rows": true,
                    "allow_quoted_newlines": true
                }
            },
            "description": "External table of zendesk, stored as CSV files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`zendesk`.`src_zendesk_tickets`",
            "created_at": 1660305774.1977804
        },
        "source.dbt_datanl_prod.zendesk.src_zendesk_customf": {
            "fqn": [
                "dbt_datanl_prod",
                "zendesk",
                "src_zendesk_customf"
            ],
            "database": "datanl-prod-fy0d",
            "schema": "zendesk",
            "unique_id": "source.dbt_datanl_prod.zendesk.src_zendesk_customf",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "models\\src_zendesk.yml",
            "original_file_path": "models\\src_zendesk.yml",
            "name": "src_zendesk_customf",
            "source_name": "zendesk",
            "source_description": "",
            "loader": "gcloud storage",
            "identifier": "src_zendesk_customf",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": {
                "location": "gs://decathlon_united_redshift_data/Decathlon_Netherlands/DataLake/CRC/zendesk_customf.csv",
                "file_format": null,
                "row_format": null,
                "tbl_properties": null,
                "partitions": null,
                "options": {
                    "format": "csv",
                    "allow_jagged_rows": true,
                    "allow_quoted_newlines": true
                }
            },
            "description": "External table of zendesk, stored as CSV files in Cloud Storage",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`datanl-prod-fy0d`.`zendesk`.`src_zendesk_customf`",
            "created_at": 1660305774.1977804
        }
    },
    "macros": {
        "macro.dbt_datanl_prod.generate_schema_name": {
            "unique_id": "macro.dbt_datanl_prod.generate_schema_name",
            "package_name": "dbt_datanl_prod",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod",
            "path": "macros\\generate_schema_name.sql",
            "original_file_path": "macros\\generate_schema_name.sql",
            "name": "generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is none -%}\r\n\r\n        {{ default_schema }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_schema_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.794526
        },
        "macro.dbt_bigquery.partition_by": {
            "unique_id": "macro.dbt_bigquery.partition_by",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "partition_by",
            "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8015025
        },
        "macro.dbt_bigquery.cluster_by": {
            "unique_id": "macro.dbt_bigquery.cluster_by",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "cluster_by",
            "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.802499
        },
        "macro.dbt_bigquery.bigquery_options": {
            "unique_id": "macro.dbt_bigquery.bigquery_options",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery_options",
            "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.802499
        },
        "macro.dbt_bigquery.bigquery_table_options": {
            "unique_id": "macro.dbt_bigquery.bigquery_table_options",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery_table_options",
            "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery_options"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8034956
        },
        "macro.dbt_bigquery.bigquery__create_table_as": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_table_as",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__create_table_as",
            "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.partition_by",
                    "macro.dbt_bigquery.cluster_by",
                    "macro.dbt_bigquery.bigquery_table_options"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8044925
        },
        "macro.dbt_bigquery.bigquery_view_options": {
            "unique_id": "macro.dbt_bigquery.bigquery_view_options",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery_view_options",
            "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery_options"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8044925
        },
        "macro.dbt_bigquery.bigquery__create_view_as": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_view_as",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__create_view_as",
            "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery_view_options"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8055494
        },
        "macro.dbt_bigquery.bigquery__create_schema": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_schema",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__create_schema",
            "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8055494
        },
        "macro.dbt_bigquery.bigquery__drop_schema": {
            "unique_id": "macro.dbt_bigquery.bigquery__drop_schema",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__drop_schema",
            "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8055494
        },
        "macro.dbt_bigquery.bigquery__drop_relation": {
            "unique_id": "macro.dbt_bigquery.bigquery__drop_relation",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__drop_relation",
            "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8065526
        },
        "macro.dbt_bigquery.bigquery__get_columns_in_relation": {
            "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__get_columns_in_relation",
            "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8065526
        },
        "macro.dbt_bigquery.bigquery__list_relations_without_caching": {
            "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__list_relations_without_caching",
            "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8065526
        },
        "macro.dbt_bigquery.bigquery__current_timestamp": {
            "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__current_timestamp",
            "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8065526
        },
        "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {
            "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__snapshot_string_as_time",
            "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.807551
        },
        "macro.dbt_bigquery.bigquery__list_schemas": {
            "unique_id": "macro.dbt_bigquery.bigquery__list_schemas",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__list_schemas",
            "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.807551
        },
        "macro.dbt_bigquery.bigquery__check_schema_exists": {
            "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__check_schema_exists",
            "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.807551
        },
        "macro.dbt_bigquery.bigquery__persist_docs": {
            "unique_id": "macro.dbt_bigquery.bigquery__persist_docs",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__persist_docs",
            "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8085523
        },
        "macro.dbt_bigquery.bigquery__alter_column_comment": {
            "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__alter_column_comment",
            "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8088477
        },
        "macro.dbt_bigquery.bigquery__rename_relation": {
            "unique_id": "macro.dbt_bigquery.bigquery__rename_relation",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__rename_relation",
            "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8088477
        },
        "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {
            "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__alter_relation_add_columns",
            "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8088477
        },
        "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {
            "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__alter_relation_drop_columns",
            "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8100977
        },
        "macro.dbt_bigquery.bigquery__alter_column_type": {
            "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__alter_column_type",
            "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_relation",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8110902
        },
        "macro.dbt_bigquery.bigquery__test_unique": {
            "unique_id": "macro.dbt_bigquery.bigquery__test_unique",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__test_unique",
            "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8110902
        },
        "macro.dbt_bigquery.bigquery__upload_file": {
            "unique_id": "macro.dbt_bigquery.bigquery__upload_file",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "bigquery__upload_file",
            "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8121164
        },
        "macro.dbt_bigquery.bigquery__get_catalog": {
            "unique_id": "macro.dbt_bigquery.bigquery__get_catalog",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\catalog.sql",
            "original_file_path": "macros\\catalog.sql",
            "name": "bigquery__get_catalog",
            "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8170547
        },
        "macro.dbt_bigquery.date_sharded_table": {
            "unique_id": "macro.dbt_bigquery.date_sharded_table",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\etc.sql",
            "original_file_path": "macros\\etc.sql",
            "name": "date_sharded_table",
            "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.818992
        },
        "macro.dbt_bigquery.grant_access_to": {
            "unique_id": "macro.dbt_bigquery.grant_access_to",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\etc.sql",
            "original_file_path": "macros\\etc.sql",
            "name": "grant_access_to",
            "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.818992
        },
        "macro.dbt_bigquery.get_partitions_metadata": {
            "unique_id": "macro.dbt_bigquery.get_partitions_metadata",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\etc.sql",
            "original_file_path": "macros\\etc.sql",
            "name": "get_partitions_metadata",
            "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8200512
        },
        "macro.dbt_bigquery.materialization_copy_bigquery": {
            "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\copy.sql",
            "original_file_path": "macros\\materializations\\copy.sql",
            "name": "materialization_copy_bigquery",
            "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter's copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8220685
        },
        "macro.dbt_bigquery.declare_dbt_max_partition": {
            "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\incremental.sql",
            "original_file_path": "macros\\materializations\\incremental.sql",
            "name": "declare_dbt_max_partition",
            "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, sql) %}\n\n  {% if '_dbt_max_partition' in sql %}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8250566
        },
        "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {
            "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\incremental.sql",
            "original_file_path": "macros\\materializations\\incremental.sql",
            "name": "dbt_bigquery_validate_get_incremental_strategy",
            "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8260314
        },
        "macro.dbt_bigquery.bq_insert_overwrite": {
            "unique_id": "macro.dbt_bigquery.bq_insert_overwrite",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\incremental.sql",
            "original_file_path": "macros\\materializations\\incremental.sql",
            "name": "bq_insert_overwrite",
            "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_overwrite_merge_sql",
                    "macro.dbt_bigquery.declare_dbt_max_partition",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.828022
        },
        "macro.dbt_bigquery.bq_generate_incremental_build_sql": {
            "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\incremental.sql",
            "original_file_path": "macros\\materializations\\incremental.sql",
            "name": "bq_generate_incremental_build_sql",
            "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bq_insert_overwrite",
                    "macro.dbt.get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.830028
        },
        "macro.dbt_bigquery.materialization_incremental_bigquery": {
            "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\incremental.sql",
            "original_file_path": "macros\\materializations\\incremental.sql",
            "name": "materialization_incremental_bigquery",
            "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(\n        declare_dbt_max_partition(this, partition_by, sql) + create_table_as(True, tmp_relation, sql)\n      ) %}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.load_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.run_hooks",
                    "macro.dbt.create_table_as",
                    "macro.dbt.run_query",
                    "macro.dbt_bigquery.declare_dbt_max_partition",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt_bigquery.bq_generate_incremental_build_sql",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8340025
        },
        "macro.dbt_bigquery.bigquery__create_csv_table": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\seed.sql",
            "original_file_path": "macros\\materializations\\seed.sql",
            "name": "bigquery__create_csv_table",
            "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8349879
        },
        "macro.dbt_bigquery.bigquery__reset_csv_table": {
            "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\seed.sql",
            "original_file_path": "macros\\materializations\\seed.sql",
            "name": "bigquery__reset_csv_table",
            "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8349879
        },
        "macro.dbt_bigquery.bigquery__load_csv_rows": {
            "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\seed.sql",
            "original_file_path": "macros\\materializations\\seed.sql",
            "name": "bigquery__load_csv_rows",
            "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8359914
        },
        "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {
            "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot.sql",
            "name": "bigquery__snapshot_hash_arguments",
            "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8379736
        },
        "macro.dbt_bigquery.bigquery__create_columns": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_columns",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot.sql",
            "name": "bigquery__create_columns",
            "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8379736
        },
        "macro.dbt_bigquery.bigquery__post_snapshot": {
            "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot.sql",
            "name": "bigquery__post_snapshot",
            "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8379736
        },
        "macro.dbt_bigquery.materialization_table_bigquery": {
            "unique_id": "macro.dbt_bigquery.materialization_table_bigquery",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\table.sql",
            "original_file_path": "macros\\materializations\\table.sql",
            "name": "materialization_table_bigquery",
            "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.841968
        },
        "macro.dbt_bigquery.bigquery__handle_existing_table": {
            "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\view.sql",
            "original_file_path": "macros\\materializations\\view.sql",
            "name": "bigquery__handle_existing_table",
            "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.842978
        },
        "macro.dbt_bigquery.materialization_view_bigquery": {
            "unique_id": "macro.dbt_bigquery.materialization_view_bigquery",
            "package_name": "dbt_bigquery",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\bigquery",
            "path": "macros\\materializations\\view.sql",
            "original_file_path": "macros\\materializations\\view.sql",
            "name": "materialization_view_bigquery",
            "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8442788
        },
        "macro.dbt.get_columns_in_relation": {
            "unique_id": "macro.dbt.get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "get_columns_in_relation",
            "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__get_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8475275
        },
        "macro.dbt.default__get_columns_in_relation": {
            "unique_id": "macro.dbt.default__get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "default__get_columns_in_relation",
            "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8475275
        },
        "macro.dbt.sql_convert_columns_in_relation": {
            "unique_id": "macro.dbt.sql_convert_columns_in_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "sql_convert_columns_in_relation",
            "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8485217
        },
        "macro.dbt.get_columns_in_query": {
            "unique_id": "macro.dbt.get_columns_in_query",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "get_columns_in_query",
            "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8485217
        },
        "macro.dbt.default__get_columns_in_query": {
            "unique_id": "macro.dbt.default__get_columns_in_query",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "default__get_columns_in_query",
            "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8495443
        },
        "macro.dbt.alter_column_type": {
            "unique_id": "macro.dbt.alter_column_type",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "alter_column_type",
            "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8495443
        },
        "macro.dbt.default__alter_column_type": {
            "unique_id": "macro.dbt.default__alter_column_type",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "default__alter_column_type",
            "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8515027
        },
        "macro.dbt.alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt.alter_relation_add_remove_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "alter_relation_add_remove_columns",
            "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_relation_add_remove_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8515027
        },
        "macro.dbt.default__alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "default__alter_relation_add_remove_columns",
            "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8525057
        },
        "macro.dbt.current_timestamp": {
            "unique_id": "macro.dbt.current_timestamp",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\freshness.sql",
            "original_file_path": "macros\\adapters\\freshness.sql",
            "name": "current_timestamp",
            "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8545
        },
        "macro.dbt.default__current_timestamp": {
            "unique_id": "macro.dbt.default__current_timestamp",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\freshness.sql",
            "original_file_path": "macros\\adapters\\freshness.sql",
            "name": "default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8545
        },
        "macro.dbt.collect_freshness": {
            "unique_id": "macro.dbt.collect_freshness",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\freshness.sql",
            "original_file_path": "macros\\adapters\\freshness.sql",
            "name": "collect_freshness",
            "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8545
        },
        "macro.dbt.default__collect_freshness": {
            "unique_id": "macro.dbt.default__collect_freshness",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\freshness.sql",
            "original_file_path": "macros\\adapters\\freshness.sql",
            "name": "default__collect_freshness",
            "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8555079
        },
        "macro.dbt.get_create_index_sql": {
            "unique_id": "macro.dbt.get_create_index_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "get_create_index_sql",
            "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8574848
        },
        "macro.dbt.default__get_create_index_sql": {
            "unique_id": "macro.dbt.default__get_create_index_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "default__get_create_index_sql",
            "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8574848
        },
        "macro.dbt.create_indexes": {
            "unique_id": "macro.dbt.create_indexes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "create_indexes",
            "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8574848
        },
        "macro.dbt.default__create_indexes": {
            "unique_id": "macro.dbt.default__create_indexes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "default__create_indexes",
            "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8584828
        },
        "macro.dbt.get_catalog": {
            "unique_id": "macro.dbt.get_catalog",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "get_catalog",
            "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__get_catalog"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.861475
        },
        "macro.dbt.default__get_catalog": {
            "unique_id": "macro.dbt.default__get_catalog",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__get_catalog",
            "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.862485
        },
        "macro.dbt.information_schema_name": {
            "unique_id": "macro.dbt.information_schema_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "information_schema_name",
            "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.862485
        },
        "macro.dbt.default__information_schema_name": {
            "unique_id": "macro.dbt.default__information_schema_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__information_schema_name",
            "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.862485
        },
        "macro.dbt.list_schemas": {
            "unique_id": "macro.dbt.list_schemas",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "list_schemas",
            "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__list_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8634834
        },
        "macro.dbt.default__list_schemas": {
            "unique_id": "macro.dbt.default__list_schemas",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__list_schemas",
            "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.information_schema_name",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8634834
        },
        "macro.dbt.check_schema_exists": {
            "unique_id": "macro.dbt.check_schema_exists",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "check_schema_exists",
            "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__check_schema_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8634834
        },
        "macro.dbt.default__check_schema_exists": {
            "unique_id": "macro.dbt.default__check_schema_exists",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__check_schema_exists",
            "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8644788
        },
        "macro.dbt.list_relations_without_caching": {
            "unique_id": "macro.dbt.list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "list_relations_without_caching",
            "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__list_relations_without_caching"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8644788
        },
        "macro.dbt.default__list_relations_without_caching": {
            "unique_id": "macro.dbt.default__list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__list_relations_without_caching",
            "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8644788
        },
        "macro.dbt.alter_column_comment": {
            "unique_id": "macro.dbt.alter_column_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "alter_column_comment",
            "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8664799
        },
        "macro.dbt.default__alter_column_comment": {
            "unique_id": "macro.dbt.default__alter_column_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "default__alter_column_comment",
            "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8674624
        },
        "macro.dbt.alter_relation_comment": {
            "unique_id": "macro.dbt.alter_relation_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "alter_relation_comment",
            "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_relation_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8674624
        },
        "macro.dbt.default__alter_relation_comment": {
            "unique_id": "macro.dbt.default__alter_relation_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "default__alter_relation_comment",
            "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8684638
        },
        "macro.dbt.persist_docs": {
            "unique_id": "macro.dbt.persist_docs",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "persist_docs",
            "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8684638
        },
        "macro.dbt.default__persist_docs": {
            "unique_id": "macro.dbt.default__persist_docs",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "default__persist_docs",
            "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8694468
        },
        "macro.dbt.make_temp_relation": {
            "unique_id": "macro.dbt.make_temp_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "make_temp_relation",
            "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8724394
        },
        "macro.dbt.default__make_temp_relation": {
            "unique_id": "macro.dbt.default__make_temp_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__make_temp_relation",
            "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8724394
        },
        "macro.dbt.drop_relation": {
            "unique_id": "macro.dbt.drop_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "drop_relation",
            "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8734431
        },
        "macro.dbt.default__drop_relation": {
            "unique_id": "macro.dbt.default__drop_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__drop_relation",
            "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8734431
        },
        "macro.dbt.truncate_relation": {
            "unique_id": "macro.dbt.truncate_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "truncate_relation",
            "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__truncate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8734431
        },
        "macro.dbt.default__truncate_relation": {
            "unique_id": "macro.dbt.default__truncate_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__truncate_relation",
            "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8744335
        },
        "macro.dbt.rename_relation": {
            "unique_id": "macro.dbt.rename_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "rename_relation",
            "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__rename_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8744335
        },
        "macro.dbt.default__rename_relation": {
            "unique_id": "macro.dbt.default__rename_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__rename_relation",
            "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.875749
        },
        "macro.dbt.get_or_create_relation": {
            "unique_id": "macro.dbt.get_or_create_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "get_or_create_relation",
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_or_create_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.875749
        },
        "macro.dbt.default__get_or_create_relation": {
            "unique_id": "macro.dbt.default__get_or_create_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__get_or_create_relation",
            "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8768225
        },
        "macro.dbt.load_relation": {
            "unique_id": "macro.dbt.load_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "load_relation",
            "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8768225
        },
        "macro.dbt.drop_relation_if_exists": {
            "unique_id": "macro.dbt.drop_relation_if_exists",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "drop_relation_if_exists",
            "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.87782
        },
        "macro.dbt.create_schema": {
            "unique_id": "macro.dbt.create_schema",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "create_schema",
            "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8788679
        },
        "macro.dbt.default__create_schema": {
            "unique_id": "macro.dbt.default__create_schema",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "default__create_schema",
            "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.88039
        },
        "macro.dbt.drop_schema": {
            "unique_id": "macro.dbt.drop_schema",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "drop_schema",
            "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__drop_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8813667
        },
        "macro.dbt.default__drop_schema": {
            "unique_id": "macro.dbt.default__drop_schema",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "default__drop_schema",
            "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8813667
        },
        "macro.dbt.convert_datetime": {
            "unique_id": "macro.dbt.convert_datetime",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "convert_datetime",
            "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.887246
        },
        "macro.dbt.dates_in_range": {
            "unique_id": "macro.dbt.dates_in_range",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "dates_in_range",
            "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.convert_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.89067
        },
        "macro.dbt.partition_range": {
            "unique_id": "macro.dbt.partition_range",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "partition_range",
            "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dates_in_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8916306
        },
        "macro.dbt.py_current_timestring": {
            "unique_id": "macro.dbt.py_current_timestring",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "py_current_timestring",
            "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8926218
        },
        "macro.dbt.statement": {
            "unique_id": "macro.dbt.statement",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\statement.sql",
            "original_file_path": "macros\\etc\\statement.sql",
            "name": "statement",
            "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8953118
        },
        "macro.dbt.noop_statement": {
            "unique_id": "macro.dbt.noop_statement",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\statement.sql",
            "original_file_path": "macros\\etc\\statement.sql",
            "name": "noop_statement",
            "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8963149
        },
        "macro.dbt.run_query": {
            "unique_id": "macro.dbt.run_query",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\statement.sql",
            "original_file_path": "macros\\etc\\statement.sql",
            "name": "run_query",
            "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8973053
        },
        "macro.dbt.default__test_accepted_values": {
            "unique_id": "macro.dbt.default__test_accepted_values",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\generic_test_sql\\accepted_values.sql",
            "original_file_path": "macros\\generic_test_sql\\accepted_values.sql",
            "name": "default__test_accepted_values",
            "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.8983285
        },
        "macro.dbt.default__test_not_null": {
            "unique_id": "macro.dbt.default__test_not_null",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\generic_test_sql\\not_null.sql",
            "original_file_path": "macros\\generic_test_sql\\not_null.sql",
            "name": "default__test_not_null",
            "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.900299
        },
        "macro.dbt.default__test_relationships": {
            "unique_id": "macro.dbt.default__test_relationships",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\generic_test_sql\\relationships.sql",
            "original_file_path": "macros\\generic_test_sql\\relationships.sql",
            "name": "default__test_relationships",
            "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.901291
        },
        "macro.dbt.default__test_unique": {
            "unique_id": "macro.dbt.default__test_unique",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\generic_test_sql\\unique.sql",
            "original_file_path": "macros\\generic_test_sql\\unique.sql",
            "name": "default__test_unique",
            "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9022975
        },
        "macro.dbt.generate_alias_name": {
            "unique_id": "macro.dbt.generate_alias_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_alias.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql",
            "name": "generate_alias_name",
            "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_alias_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9032989
        },
        "macro.dbt.default__generate_alias_name": {
            "unique_id": "macro.dbt.default__generate_alias_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_alias.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql",
            "name": "default__generate_alias_name",
            "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9042816
        },
        "macro.dbt.generate_database_name": {
            "unique_id": "macro.dbt.generate_database_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_database.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_database.sql",
            "name": "generate_database_name",
            "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9052806
        },
        "macro.dbt.default__generate_database_name": {
            "unique_id": "macro.dbt.default__generate_database_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_database.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_database.sql",
            "name": "default__generate_database_name",
            "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9062757
        },
        "macro.dbt.generate_schema_name": {
            "unique_id": "macro.dbt.generate_schema_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_schema.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql",
            "name": "generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9083645
        },
        "macro.dbt.default__generate_schema_name": {
            "unique_id": "macro.dbt.default__generate_schema_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_schema.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql",
            "name": "default__generate_schema_name",
            "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9094198
        },
        "macro.dbt.generate_schema_name_for_env": {
            "unique_id": "macro.dbt.generate_schema_name_for_env",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_schema.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql",
            "name": "generate_schema_name_for_env",
            "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9094198
        },
        "macro.dbt.set_sql_header": {
            "unique_id": "macro.dbt.set_sql_header",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\configs.sql",
            "original_file_path": "macros\\materializations\\configs.sql",
            "name": "set_sql_header",
            "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9114106
        },
        "macro.dbt.should_full_refresh": {
            "unique_id": "macro.dbt.should_full_refresh",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\configs.sql",
            "original_file_path": "macros\\materializations\\configs.sql",
            "name": "should_full_refresh",
            "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9114106
        },
        "macro.dbt.should_store_failures": {
            "unique_id": "macro.dbt.should_store_failures",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\configs.sql",
            "original_file_path": "macros\\materializations\\configs.sql",
            "name": "should_store_failures",
            "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9124095
        },
        "macro.dbt.run_hooks": {
            "unique_id": "macro.dbt.run_hooks",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "run_hooks",
            "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.915406
        },
        "macro.dbt.make_hook_config": {
            "unique_id": "macro.dbt.make_hook_config",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "make_hook_config",
            "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.915406
        },
        "macro.dbt.before_begin": {
            "unique_id": "macro.dbt.before_begin",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "before_begin",
            "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.915406
        },
        "macro.dbt.in_transaction": {
            "unique_id": "macro.dbt.in_transaction",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "in_transaction",
            "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9163957
        },
        "macro.dbt.after_commit": {
            "unique_id": "macro.dbt.after_commit",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "after_commit",
            "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9163957
        },
        "macro.dbt.get_quoted_csv": {
            "unique_id": "macro.dbt.get_quoted_csv",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "get_quoted_csv",
            "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9183912
        },
        "macro.dbt.diff_columns": {
            "unique_id": "macro.dbt.diff_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "diff_columns",
            "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9193914
        },
        "macro.dbt.diff_column_data_types": {
            "unique_id": "macro.dbt.diff_column_data_types",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "diff_column_data_types",
            "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9203944
        },
        "macro.dbt.materialization_incremental_default": {
            "unique_id": "macro.dbt.materialization_incremental_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\incremental.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql",
            "name": "materialization_incremental_default",
            "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                  schema=schema,\n                                                                  database=database) %}\n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.create_table_as",
                    "macro.dbt.run_query",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.get_delete_insert_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.928356
        },
        "macro.dbt.is_incremental": {
            "unique_id": "macro.dbt.is_incremental",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\is_incremental.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql",
            "name": "is_incremental",
            "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9323485
        },
        "macro.dbt.get_merge_sql": {
            "unique_id": "macro.dbt.get_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "get_merge_sql",
            "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9403203
        },
        "macro.dbt.default__get_merge_sql": {
            "unique_id": "macro.dbt.default__get_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "default__get_merge_sql",
            "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9433053
        },
        "macro.dbt.get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "get_delete_insert_merge_sql",
            "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9433053
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "default__get_delete_insert_merge_sql",
            "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9453006
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9453006
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "default__get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9462976
        },
        "macro.dbt.incremental_validate_on_schema_change": {
            "unique_id": "macro.dbt.incremental_validate_on_schema_change",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "name": "incremental_validate_on_schema_change",
            "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.954617
        },
        "macro.dbt.check_for_schema_changes": {
            "unique_id": "macro.dbt.check_for_schema_changes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "name": "check_for_schema_changes",
            "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.diff_columns",
                    "macro.dbt.diff_column_data_types"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9570441
        },
        "macro.dbt.sync_column_schemas": {
            "unique_id": "macro.dbt.sync_column_schemas",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "name": "sync_column_schemas",
            "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_relation_add_remove_columns",
                    "macro.dbt.alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.960039
        },
        "macro.dbt.process_schema_changes": {
            "unique_id": "macro.dbt.process_schema_changes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "name": "process_schema_changes",
            "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.check_for_schema_changes",
                    "macro.dbt.sync_column_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9610262
        },
        "macro.dbt.get_create_table_as_sql": {
            "unique_id": "macro.dbt.get_create_table_as_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "get_create_table_as_sql",
            "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.964018
        },
        "macro.dbt.default__get_create_table_as_sql": {
            "unique_id": "macro.dbt.default__get_create_table_as_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "default__get_create_table_as_sql",
            "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.964018
        },
        "macro.dbt.create_table_as": {
            "unique_id": "macro.dbt.create_table_as",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "create_table_as",
            "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9650276
        },
        "macro.dbt.default__create_table_as": {
            "unique_id": "macro.dbt.default__create_table_as",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "default__create_table_as",
            "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9650276
        },
        "macro.dbt.materialization_table_default": {
            "unique_id": "macro.dbt.materialization_table_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\table.sql",
            "original_file_path": "macros\\materializations\\models\\table\\table.sql",
            "name": "materialization_table_default",
            "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9728389
        },
        "macro.dbt.create_or_replace_view": {
            "unique_id": "macro.dbt.create_or_replace_view",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql",
            "name": "create_or_replace_view",
            "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9761338
        },
        "macro.dbt.get_create_view_as_sql": {
            "unique_id": "macro.dbt.get_create_view_as_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "get_create_view_as_sql",
            "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9791365
        },
        "macro.dbt.default__get_create_view_as_sql": {
            "unique_id": "macro.dbt.default__get_create_view_as_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "default__get_create_view_as_sql",
            "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9791365
        },
        "macro.dbt.create_view_as": {
            "unique_id": "macro.dbt.create_view_as",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "create_view_as",
            "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9801118
        },
        "macro.dbt.default__create_view_as": {
            "unique_id": "macro.dbt.default__create_view_as",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "default__create_view_as",
            "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9801118
        },
        "macro.dbt.handle_existing_table": {
            "unique_id": "macro.dbt.handle_existing_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\helpers.sql",
            "original_file_path": "macros\\materializations\\models\\view\\helpers.sql",
            "name": "handle_existing_table",
            "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__handle_existing_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.982629
        },
        "macro.dbt.default__handle_existing_table": {
            "unique_id": "macro.dbt.default__handle_existing_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\helpers.sql",
            "original_file_path": "macros\\materializations\\models\\view\\helpers.sql",
            "name": "default__handle_existing_table",
            "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9836788
        },
        "macro.dbt.materialization_view_default": {
            "unique_id": "macro.dbt.materialization_view_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\view.sql",
            "original_file_path": "macros\\materializations\\models\\view\\view.sql",
            "name": "materialization_view_default",
            "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.create_view_as",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305772.9933288
        },
        "macro.dbt.create_csv_table": {
            "unique_id": "macro.dbt.create_csv_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "create_csv_table",
            "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.00063
        },
        "macro.dbt.default__create_csv_table": {
            "unique_id": "macro.dbt.default__create_csv_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__create_csv_table",
            "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.001619
        },
        "macro.dbt.reset_csv_table": {
            "unique_id": "macro.dbt.reset_csv_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "reset_csv_table",
            "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__reset_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0026243
        },
        "macro.dbt.default__reset_csv_table": {
            "unique_id": "macro.dbt.default__reset_csv_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__reset_csv_table",
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0040243
        },
        "macro.dbt.get_binding_char": {
            "unique_id": "macro.dbt.get_binding_char",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "get_binding_char",
            "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0042112
        },
        "macro.dbt.default__get_binding_char": {
            "unique_id": "macro.dbt.default__get_binding_char",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__get_binding_char",
            "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0042112
        },
        "macro.dbt.get_batch_size": {
            "unique_id": "macro.dbt.get_batch_size",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "get_batch_size",
            "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_batch_size"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0047643
        },
        "macro.dbt.default__get_batch_size": {
            "unique_id": "macro.dbt.default__get_batch_size",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__get_batch_size",
            "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0047643
        },
        "macro.dbt.get_seed_column_quoted_csv": {
            "unique_id": "macro.dbt.get_seed_column_quoted_csv",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "get_seed_column_quoted_csv",
            "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0058005
        },
        "macro.dbt.load_csv_rows": {
            "unique_id": "macro.dbt.load_csv_rows",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "load_csv_rows",
            "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0070047
        },
        "macro.dbt.default__load_csv_rows": {
            "unique_id": "macro.dbt.default__load_csv_rows",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__load_csv_rows",
            "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0096645
        },
        "macro.dbt.materialization_seed_default": {
            "unique_id": "macro.dbt.materialization_seed_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\seed.sql",
            "original_file_path": "macros\\materializations\\seeds\\seed.sql",
            "name": "materialization_seed_default",
            "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_hooks",
                    "macro.dbt.reset_csv_table",
                    "macro.dbt.create_csv_table",
                    "macro.dbt.load_csv_rows",
                    "macro.dbt.noop_statement",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.01927
        },
        "macro.dbt.create_columns": {
            "unique_id": "macro.dbt.create_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "create_columns",
            "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.026199
        },
        "macro.dbt.default__create_columns": {
            "unique_id": "macro.dbt.default__create_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__create_columns",
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.027261
        },
        "macro.dbt.post_snapshot": {
            "unique_id": "macro.dbt.post_snapshot",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "post_snapshot",
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.027261
        },
        "macro.dbt.default__post_snapshot": {
            "unique_id": "macro.dbt.default__post_snapshot",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__post_snapshot",
            "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.027261
        },
        "macro.dbt.get_true_sql": {
            "unique_id": "macro.dbt.get_true_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "get_true_sql",
            "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_true_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.027261
        },
        "macro.dbt.default__get_true_sql": {
            "unique_id": "macro.dbt.default__get_true_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__get_true_sql",
            "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.027261
        },
        "macro.dbt.snapshot_staging_table": {
            "unique_id": "macro.dbt.snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "snapshot_staging_table",
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_staging_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0282574
        },
        "macro.dbt.default__snapshot_staging_table": {
            "unique_id": "macro.dbt.default__snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__snapshot_staging_table",
            "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0298376
        },
        "macro.dbt.build_snapshot_table": {
            "unique_id": "macro.dbt.build_snapshot_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "build_snapshot_table",
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__build_snapshot_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0302763
        },
        "macro.dbt.default__build_snapshot_table": {
            "unique_id": "macro.dbt.default__build_snapshot_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__build_snapshot_table",
            "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.030643
        },
        "macro.dbt.build_snapshot_staging_table": {
            "unique_id": "macro.dbt.build_snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0314002
        },
        "macro.dbt.materialization_snapshot_default": {
            "unique_id": "macro.dbt.materialization_snapshot_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql",
            "name": "materialization_snapshot_default",
            "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt.build_snapshot_staging_table",
                    "macro.dbt.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes",
                    "macro.dbt.post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.041692
        },
        "macro.dbt.snapshot_merge_sql": {
            "unique_id": "macro.dbt.snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "name": "snapshot_merge_sql",
            "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.044956
        },
        "macro.dbt.default__snapshot_merge_sql": {
            "unique_id": "macro.dbt.default__snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "name": "default__snapshot_merge_sql",
            "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.045957
        },
        "macro.dbt.strategy_dispatch": {
            "unique_id": "macro.dbt.strategy_dispatch",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "strategy_dispatch",
            "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0539923
        },
        "macro.dbt.snapshot_hash_arguments": {
            "unique_id": "macro.dbt.snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_hash_arguments",
            "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.054709
        },
        "macro.dbt.default__snapshot_hash_arguments": {
            "unique_id": "macro.dbt.default__snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "default__snapshot_hash_arguments",
            "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.05498
        },
        "macro.dbt.snapshot_get_time": {
            "unique_id": "macro.dbt.snapshot_get_time",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_get_time",
            "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0555634
        },
        "macro.dbt.default__snapshot_get_time": {
            "unique_id": "macro.dbt.default__snapshot_get_time",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "default__snapshot_get_time",
            "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0555634
        },
        "macro.dbt.snapshot_timestamp_strategy": {
            "unique_id": "macro.dbt.snapshot_timestamp_strategy",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_timestamp_strategy",
            "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0568562
        },
        "macro.dbt.snapshot_string_as_time": {
            "unique_id": "macro.dbt.snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_string_as_time",
            "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__snapshot_string_as_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0568562
        },
        "macro.dbt.default__snapshot_string_as_time": {
            "unique_id": "macro.dbt.default__snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "default__snapshot_string_as_time",
            "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0579014
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
            "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_check_all_get_existing_columns",
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0589013
        },
        "macro.dbt.snapshot_check_strategy": {
            "unique_id": "macro.dbt.snapshot_check_strategy",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_check_strategy",
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.snapshot_check_all_get_existing_columns",
                    "macro.dbt.get_true_sql",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0632756
        },
        "macro.dbt.get_test_sql": {
            "unique_id": "macro.dbt.get_test_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "name": "get_test_sql",
            "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0648289
        },
        "macro.dbt.default__get_test_sql": {
            "unique_id": "macro.dbt.default__get_test_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "name": "default__get_test_sql",
            "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0658798
        },
        "macro.dbt.materialization_test_default": {
            "unique_id": "macro.dbt.materialization_test_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\test.sql",
            "original_file_path": "macros\\materializations\\tests\\test.sql",
            "name": "materialization_test_default",
            "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0710132
        },
        "macro.dbt.get_where_subquery": {
            "unique_id": "macro.dbt.get_where_subquery",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\where_subquery.sql",
            "original_file_path": "macros\\materializations\\tests\\where_subquery.sql",
            "name": "get_where_subquery",
            "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_where_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0725987
        },
        "macro.dbt.default__get_where_subquery": {
            "unique_id": "macro.dbt.default__get_where_subquery",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\where_subquery.sql",
            "original_file_path": "macros\\materializations\\tests\\where_subquery.sql",
            "name": "default__get_where_subquery",
            "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0739062
        },
        "macro.dbt.test_unique": {
            "unique_id": "macro.dbt.test_unique",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "name": "test_unique",
            "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0749068
        },
        "macro.dbt.test_not_null": {
            "unique_id": "macro.dbt.test_not_null",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "name": "test_not_null",
            "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0759013
        },
        "macro.dbt.test_accepted_values": {
            "unique_id": "macro.dbt.test_accepted_values",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "name": "test_accepted_values",
            "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0759013
        },
        "macro.dbt.test_relationships": {
            "unique_id": "macro.dbt.test_relationships",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "name": "test_relationships",
            "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_relationships"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0768497
        },
        "macro.dbt_external_tables.create_external_table": {
            "unique_id": "macro.dbt_external_tables.create_external_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\common\\create_external_table.sql",
            "original_file_path": "macros\\common\\create_external_table.sql",
            "name": "create_external_table",
            "macro_sql": "{% macro create_external_table(source_node) %}\r\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.bigquery__create_external_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0778975
        },
        "macro.dbt_external_tables.default__create_external_table": {
            "unique_id": "macro.dbt_external_tables.default__create_external_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\common\\create_external_table.sql",
            "original_file_path": "macros\\common\\create_external_table.sql",
            "name": "default__create_external_table",
            "macro_sql": "{% macro default__create_external_table(source_node) %}\r\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0778975
        },
        "macro.dbt_external_tables.get_external_build_plan": {
            "unique_id": "macro.dbt_external_tables.get_external_build_plan",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\common\\get_external_build_plan.sql",
            "original_file_path": "macros\\common\\get_external_build_plan.sql",
            "name": "get_external_build_plan",
            "macro_sql": "{% macro get_external_build_plan(source_node) %}\r\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.bigquery__get_external_build_plan"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0788958
        },
        "macro.dbt_external_tables.default__get_external_build_plan": {
            "unique_id": "macro.dbt_external_tables.default__get_external_build_plan",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\common\\get_external_build_plan.sql",
            "original_file_path": "macros\\common\\get_external_build_plan.sql",
            "name": "default__get_external_build_plan",
            "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\r\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0788958
        },
        "macro.dbt_external_tables.refresh_external_table": {
            "unique_id": "macro.dbt_external_tables.refresh_external_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\common\\refresh_external_table.sql",
            "original_file_path": "macros\\common\\refresh_external_table.sql",
            "name": "refresh_external_table",
            "macro_sql": "{% macro refresh_external_table(source_node) %}\r\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.default__refresh_external_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0804238
        },
        "macro.dbt_external_tables.default__refresh_external_table": {
            "unique_id": "macro.dbt_external_tables.default__refresh_external_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\common\\refresh_external_table.sql",
            "original_file_path": "macros\\common\\refresh_external_table.sql",
            "name": "default__refresh_external_table",
            "macro_sql": "{% macro default__refresh_external_table(source_node) %}\r\n    {% do return([]) %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0804238
        },
        "macro.dbt_external_tables.stage_external_sources": {
            "unique_id": "macro.dbt_external_tables.stage_external_sources",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\common\\stage_external_sources.sql",
            "original_file_path": "macros\\common\\stage_external_sources.sql",
            "name": "stage_external_sources",
            "macro_sql": "{% macro stage_external_sources(select=none) %}\r\n\r\n    {% set sources_to_stage = [] %}\r\n    \r\n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\r\n    \r\n    {% for node in source_nodes %}\r\n        {% if node.external %}\r\n            \r\n            {% if select %}\r\n            \r\n                {% for src in select.split(' ') %}\r\n                \r\n                    {% if '.' in src %}\r\n                        {% set src_s = src.split('.') %}\r\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\r\n                            {% do sources_to_stage.append(node) %}\r\n                        {% endif %}\r\n                    {% else %}\r\n                        {% if src == node.source_name %}\r\n                            {% do sources_to_stage.append(node) %}\r\n                        {% endif %}\r\n                    {% endif %}\r\n                    \r\n                {% endfor %}\r\n                        \r\n            {% else %}\r\n            \r\n                {% do sources_to_stage.append(node) %}\r\n                \r\n            {% endif %}\r\n        {% endif %}\r\n        \r\n    {% endfor %}\r\n    \r\n    {% if sources_to_stage|length == 0 %}\r\n        {% do log('No external sources selected', info = true) %}\r\n    {% endif %}\r\n            \r\n    {% for node in sources_to_stage %}\r\n\r\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\r\n\r\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\r\n        \r\n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\r\n        \r\n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\r\n        {% set width = flags.PRINTER_WIDTH %}\r\n        \r\n        {% for q in run_queue %}\r\n        \r\n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\r\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\r\n        \r\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\r\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\r\n        \r\n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\r\n                {{ exit_txn }} {{ q }}\r\n            {% endcall %}\r\n            \r\n            {% set runner = load_result('runner') %}\r\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\r\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\r\n            \r\n        {% endfor %}\r\n        \r\n    {% endfor %}\r\n    \r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.get_external_build_plan",
                    "macro.dbt_external_tables.exit_transaction",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.087561
        },
        "macro.dbt_external_tables.dropif": {
            "unique_id": "macro.dbt_external_tables.dropif",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\common\\helpers\\dropif.sql",
            "original_file_path": "macros\\common\\helpers\\dropif.sql",
            "name": "dropif",
            "macro_sql": "{% macro dropif(node) %}\r\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.default__dropif"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0893304
        },
        "macro.dbt_external_tables.default__dropif": {
            "unique_id": "macro.dbt_external_tables.default__dropif",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\common\\helpers\\dropif.sql",
            "original_file_path": "macros\\common\\helpers\\dropif.sql",
            "name": "default__dropif",
            "macro_sql": "{% macro default__dropif() %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"Dropping external tables is not implemented for the default adapter\"\r\n    ) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0893304
        },
        "macro.dbt_external_tables.exit_transaction": {
            "unique_id": "macro.dbt_external_tables.exit_transaction",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\common\\helpers\\transaction.sql",
            "original_file_path": "macros\\common\\helpers\\transaction.sql",
            "name": "exit_transaction",
            "macro_sql": "{% macro exit_transaction() %}\r\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.default__exit_transaction"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0903947
        },
        "macro.dbt_external_tables.default__exit_transaction": {
            "unique_id": "macro.dbt_external_tables.default__exit_transaction",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\common\\helpers\\transaction.sql",
            "original_file_path": "macros\\common\\helpers\\transaction.sql",
            "name": "default__exit_transaction",
            "macro_sql": "{% macro default__exit_transaction() %}\r\n    {{ return('') }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0903947
        },
        "macro.dbt_external_tables.bigquery__create_external_table": {
            "unique_id": "macro.dbt_external_tables.bigquery__create_external_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\bigquery\\create_external_table.sql",
            "original_file_path": "macros\\plugins\\bigquery\\create_external_table.sql",
            "name": "bigquery__create_external_table",
            "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\r\n\r\n    {%- set columns = source_node.columns.values() -%}\r\n    {%- set external = source_node.external -%}\r\n    {%- set partitions = external.partitions -%}\r\n    {%- set options = external.options -%}\r\n    \r\n    {%- set uris = [] -%}\r\n    {%- if options is mapping and options.get('uris', none) -%}\r\n        {%- set uris = external.options.get('uris') -%}\r\n    {%- else -%}\r\n        {%- set uris = [external.location] -%}\r\n    {%- endif -%}\r\n\r\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\r\n        {%- if columns -%}(\r\n            {% for column in columns %}\r\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\r\n            {%- endfor -%}\r\n        )\r\n        {% endif %}\r\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\r\n        with partition columns {%- if partitions %} (\r\n            {%- for partition in partitions %}\r\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\r\n            {%- endfor -%}\r\n        ) {% endif -%}\r\n        {% endif %}\r\n        options (\r\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\r\n            {%- if options is mapping -%}\r\n            {%- for key, value in options.items() if key != 'uris' %}\r\n                {%- if value is string -%}\r\n                , {{key}} = '{{value}}'\r\n                {%- else -%}\r\n                , {{key}} = {{value}}\r\n                {%- endif -%}\r\n            {%- endfor -%}\r\n            {%- endif -%}\r\n        )\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0953686
        },
        "macro.dbt_external_tables.bigquery__get_external_build_plan": {
            "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\bigquery\\get_external_build_plan.sql",
            "original_file_path": "macros\\plugins\\bigquery\\get_external_build_plan.sql",
            "name": "bigquery__get_external_build_plan",
            "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\r\n\r\n    {% set build_plan = [] %}\r\n    \r\n    {% set old_relation = adapter.get_relation(\r\n        database = source_node.database,\r\n        schema = source_node.schema,\r\n        identifier = source_node.identifier\r\n    ) %}\r\n    \r\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\r\n\r\n    {% if create_or_replace %}\r\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\r\n    {% else %}\r\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\r\n    {% endif %}\r\n\r\n    {% do return(build_plan) %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.create_external_table",
                    "macro.dbt_external_tables.refresh_external_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.0977628
        },
        "macro.dbt_external_tables.redshift__create_external_table": {
            "unique_id": "macro.dbt_external_tables.redshift__create_external_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\redshift\\create_external_table.sql",
            "original_file_path": "macros\\plugins\\redshift\\create_external_table.sql",
            "name": "redshift__create_external_table",
            "macro_sql": "{% macro redshift__create_external_table(source_node) %}\r\n\r\n    {%- set columns = source_node.columns.values() -%}\r\n    {%- set external = source_node.external -%}\r\n    {%- set partitions = external.partitions -%}\r\n\r\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\r\n{# This assumes you have already created an external schema #}\r\n\r\n    create external table {{source(source_node.source_name, source_node.name)}} (\r\n        {% for column in columns %}\r\n            {{adapter.quote(column.name)}} {{column.data_type}}\r\n            {{- ',' if not loop.last -}}\r\n        {% endfor %}\r\n    )\r\n    {% if partitions -%} partitioned by (\r\n        {%- for partition in partitions -%}\r\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\r\n        {%- endfor -%}\r\n    ) {%- endif %}\r\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\r\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\r\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\r\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.100788
        },
        "macro.dbt_external_tables.redshift__get_external_build_plan": {
            "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\redshift\\get_external_build_plan.sql",
            "original_file_path": "macros\\plugins\\redshift\\get_external_build_plan.sql",
            "name": "redshift__get_external_build_plan",
            "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\r\n\r\n    {% set build_plan = [] %}\r\n    \r\n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\r\n    \r\n    {% if create_or_replace %}\r\n\r\n        {% set build_plan = [\r\n                dbt_external_tables.dropif(source_node),\r\n                dbt_external_tables.create_external_table(source_node)\r\n            ] + dbt_external_tables.refresh_external_table(source_node) \r\n        %}\r\n        \r\n    {% else %}\r\n    \r\n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\r\n        \r\n    {% endif %}\r\n    \r\n    {% do return(build_plan) %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.redshift_is_ext_tbl",
                    "macro.dbt_external_tables.dropif",
                    "macro.dbt_external_tables.create_external_table",
                    "macro.dbt_external_tables.refresh_external_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1035125
        },
        "macro.dbt_external_tables.redshift__refresh_external_table": {
            "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\redshift\\refresh_external_table.sql",
            "original_file_path": "macros\\plugins\\redshift\\refresh_external_table.sql",
            "name": "redshift__refresh_external_table",
            "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\r\n\r\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\r\n\r\n    {%- if partitions -%}\r\n    \r\n        {%- set part_len = partitions|length -%}\r\n    \r\n        {%- set get_partitions_sql -%}\r\n        \r\n        select * from\r\n        \r\n        {%- for partition in partitions %} (\r\n        \r\n            {%- set part_num = loop.index -%}\r\n            \r\n            {%- if partition.vals.macro -%}\r\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\r\n            {%- elif partition.vals is string -%}\r\n                {%- set vals = [partition.vals] -%}\r\n            {%- else -%}\r\n                {%- set vals = partition.vals -%}\r\n            {%- endif -%}\r\n        \r\n            {%- for val in vals %}\r\n            \r\n                select\r\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\r\n                    '\"{{ val }}\"' as val_{{ part_num }},\r\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\r\n                \r\n                {{ 'union all' if not loop.last else ') ' }}\r\n            \r\n            {%- endfor -%}\r\n            \r\n            {{ 'cross join' if not loop.last }}\r\n            \r\n        {%- endfor -%}\r\n        \r\n        {%- endset -%}\r\n        \r\n        {%- set finals = [] -%}\r\n        \r\n        {%- if execute -%}\r\n            {%- set results = run_query(get_partitions_sql) -%}\r\n            {%- for row in results -%}\r\n                \r\n                {%- set partition_parts = [] -%}\r\n                {%- set path_parts = [] -%}\r\n                \r\n                {%- for i in range(0, part_len) -%}\r\n                    {%- do partition_parts.append({\r\n                        'name': row[i * 3][1:-1],\r\n                        'value': row[i * 3 + 1][1:-1]\r\n                    }) -%}\r\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\r\n                {%- endfor -%}\r\n                \r\n                {%- set construct = {\r\n                    'partition_by': partition_parts,\r\n                    'path': path_parts | join('/')\r\n                }  -%}\r\n                \r\n                {% do finals.append(construct) %}\r\n            {%- endfor -%}\r\n        {%- endif -%}\r\n    \r\n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\r\n        {{ return(ddl) }}\r\n    \r\n    {% else %}\r\n    \r\n        {% do return([]) %}\r\n    \r\n    {% endif %}\r\n    \r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.render_from_context",
                    "macro.dbt.run_query",
                    "macro.dbt_external_tables.redshift_alter_table_add_partitions"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1104267
        },
        "macro.dbt_external_tables.redshift_alter_table_add_partitions": {
            "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\redshift\\helpers\\add_partitions.sql",
            "original_file_path": "macros\\plugins\\redshift\\helpers\\add_partitions.sql",
            "name": "redshift_alter_table_add_partitions",
            "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\r\n\r\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \r\n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\r\n\r\n  {% set ddl = [] %}\r\n  \r\n  {% if partitions|length > 0 %}\r\n  \r\n    {% set alter_table_add %}\r\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \r\n    {% endset %}\r\n  \r\n    {%- set alters -%}\r\n\r\n      {{ alter_table_add }}\r\n\r\n    {%- for partition in partitions -%}\r\n\r\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\r\n\r\n        ; {{ alter_table_add }}\r\n\r\n      {%- endif -%}\r\n\r\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\r\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\r\n\r\n    {% endfor -%}\r\n    \r\n    {%- endset -%}\r\n    \r\n    {% set ddl = ddl + alters.split(';') %}\r\n\r\n  {% else %}\r\n\r\n    {{ log(\"No partitions to be added\") }}\r\n\r\n  {% endif %}\r\n  \r\n  {% do return(ddl) %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1154587
        },
        "macro.dbt_external_tables.redshift__dropif": {
            "unique_id": "macro.dbt_external_tables.redshift__dropif",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\redshift\\helpers\\dropif.sql",
            "original_file_path": "macros\\plugins\\redshift\\helpers\\dropif.sql",
            "name": "redshift__dropif",
            "macro_sql": "{% macro redshift__dropif(node) %}\r\n    \r\n    {% set ddl %}\r\n        drop table if exists {{source(node.source_name, node.name)}} cascade\r\n    {% endset %}\r\n    \r\n    {{return(ddl)}}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1163092
        },
        "macro.dbt_external_tables.redshift_is_ext_tbl": {
            "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\redshift\\helpers\\is_ext_tbl.sql",
            "original_file_path": "macros\\plugins\\redshift\\helpers\\is_ext_tbl.sql",
            "name": "redshift_is_ext_tbl",
            "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\r\n\r\n    {% set existing_relation = load_relation(node) %}\r\n    \r\n    {#  external tables don't appear in information_schema.tables,\r\n        so dbt doesn't cache them #}\r\n    {% if existing_relation is none %}\r\n\r\n        {% set find_ext_tbl %}\r\n        \r\n            select count(*) from svv_external_tables\r\n            where schemaname = '{{node.schema}}'\r\n            and tablename = '{{node.identifier}}'\r\n        \r\n        {% endset %}\r\n        \r\n        {% if execute %}\r\n            {% set result = run_query(find_ext_tbl)[0][0] %}\r\n        {% else %}\r\n            {% set result = 0 %}\r\n        {% endif %}\r\n\r\n        {% set is_ext_tbl = (result > 0) %}\r\n        {% do return(is_ext_tbl) %}\r\n        \r\n    {% else %}\r\n    \r\n        {% do return(false) %}\r\n        \r\n    {% endif %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_relation",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1188488
        },
        "macro.dbt_external_tables.year_month_day": {
            "unique_id": "macro.dbt_external_tables.year_month_day",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\redshift\\helpers\\paths.sql",
            "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql",
            "name": "year_month_day",
            "macro_sql": "{% macro year_month_day(name, value) %}\r\n    {% set path = value.replace('-','/') %}\r\n    {{return(path)}}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1208293
        },
        "macro.dbt_external_tables.key_value": {
            "unique_id": "macro.dbt_external_tables.key_value",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\redshift\\helpers\\paths.sql",
            "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql",
            "name": "key_value",
            "macro_sql": "{% macro key_value(name, value) %}\r\n    {% set path = name ~ '=' ~ value %}\r\n    {{return(path)}}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1208293
        },
        "macro.dbt_external_tables.value_only": {
            "unique_id": "macro.dbt_external_tables.value_only",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\redshift\\helpers\\paths.sql",
            "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql",
            "name": "value_only",
            "macro_sql": "{% macro value_only(name, value) %}\r\n    {% set path = value %}\r\n    {{return(path)}}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1208293
        },
        "macro.dbt_external_tables.render_from_context": {
            "unique_id": "macro.dbt_external_tables.render_from_context",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\redshift\\helpers\\render_macro.sql",
            "original_file_path": "macros\\plugins\\redshift\\helpers\\render_macro.sql",
            "name": "render_from_context",
            "macro_sql": "{% macro render_from_context(name) -%}\r\n{% set original_name = name %}\r\n  {% if '.' in name %}\r\n    {% set package_name, name = name.split(\".\", 1) %}\r\n  {% else %}\r\n    {% set package_name = none %}\r\n  {% endif %}\r\n\r\n  {% if package_name is none %}\r\n    {% set package_context = context %}\r\n  {% elif package_name in context %}\r\n    {% set package_context = context[package_name] %}\r\n  {% else %}\r\n    {% set error_msg %}\r\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\r\n    {% endset %}\r\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\r\n  {% endif %}\r\n  \r\n    {{ return(package_context[name](*varargs, **kwargs)) }}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1243353
        },
        "macro.dbt_external_tables.redshift__exit_transaction": {
            "unique_id": "macro.dbt_external_tables.redshift__exit_transaction",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\redshift\\helpers\\transaction.sql",
            "original_file_path": "macros\\plugins\\redshift\\helpers\\transaction.sql",
            "name": "redshift__exit_transaction",
            "macro_sql": "{% macro redshift__exit_transaction() %}\r\n    {{ return('begin; commit;') }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1253972
        },
        "macro.dbt_external_tables.snowflake__create_external_table": {
            "unique_id": "macro.dbt_external_tables.snowflake__create_external_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\snowflake\\create_external_table.sql",
            "original_file_path": "macros\\plugins\\snowflake\\create_external_table.sql",
            "name": "snowflake__create_external_table",
            "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\r\n\r\n    {%- set columns = source_node.columns.values() -%}\r\n    {%- set external = source_node.external -%}\r\n    {%- set partitions = external.partitions -%}\r\n\r\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\r\n\r\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\r\n{# This assumes you have already created an external stage #}\r\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\r\n    {%- if columns or partitions -%}\r\n    (\r\n        {%- if partitions -%}{%- for partition in partitions %}\r\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\r\n        {%- endfor -%}{%- endif -%}\r\n        {%- for column in columns %}\r\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\r\n            {%- set col_expression -%}\r\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\r\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\r\n            {%- endset %}\r\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\r\n            {{- ',' if not loop.last -}}\r\n        {% endfor %}\r\n    )\r\n    {%- endif -%}\r\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\r\n    location = {{external.location}} {# stage #}\r\n    {% if external.auto_refresh in (true, false) -%}\r\n      auto_refresh = {{external.auto_refresh}}\r\n    {%- endif %}\r\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\r\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\r\n    file_format = {{external.file_format}}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.is_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1304424
        },
        "macro.dbt_external_tables.snowflake__get_external_build_plan": {
            "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\snowflake\\get_external_build_plan.sql",
            "original_file_path": "macros\\plugins\\snowflake\\get_external_build_plan.sql",
            "name": "snowflake__get_external_build_plan",
            "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\r\n\r\n    {% set build_plan = [] %}\r\n    \r\n    {% set old_relation = adapter.get_relation(\r\n        database = source_node.database,\r\n        schema = source_node.schema,\r\n        identifier = source_node.identifier\r\n    ) %}\r\n    \r\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\r\n\r\n    {% if source_node.external.get('snowpipe', none) is not none %}\r\n    \r\n        {% if create_or_replace %}\r\n            {% set build_plan = build_plan + [\r\n                dbt_external_tables.snowflake_create_empty_table(source_node),\r\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\r\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\r\n            ] %}\r\n        {% else %}\r\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\r\n        {% endif %}\r\n            \r\n    {% else %}\r\n    \r\n        {% if create_or_replace %}\r\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\r\n        {% else %}\r\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\r\n        {% endif %}\r\n        \r\n    {% endif %}\r\n\r\n    {% do return(build_plan) %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.snowflake_create_empty_table",
                    "macro.dbt_external_tables.snowflake_get_copy_sql",
                    "macro.dbt_external_tables.snowflake_create_snowpipe",
                    "macro.dbt_external_tables.snowflake_refresh_snowpipe",
                    "macro.dbt_external_tables.create_external_table",
                    "macro.dbt_external_tables.refresh_external_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1334481
        },
        "macro.dbt_external_tables.snowflake__refresh_external_table": {
            "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\snowflake\\refresh_external_table.sql",
            "original_file_path": "macros\\plugins\\snowflake\\refresh_external_table.sql",
            "name": "snowflake__refresh_external_table",
            "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\r\n\r\n    {% set external = source_node.external %}\r\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\r\n    \r\n    {% set auto_refresh = external.get('auto_refresh', false) %}\r\n    {% set partitions = external.get('partitions', none) %}\r\n    \r\n    {% set manual_refresh = (partitions and not auto_refresh) %}\r\n    \r\n    {% if manual_refresh %}\r\n\r\n        {% set ddl %}\r\n        begin;\r\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\r\n        commit;\r\n        {% endset %}\r\n        \r\n        {% do return([ddl]) %}\r\n    \r\n    {% else %}\r\n    \r\n        {% do return([]) %}\r\n    \r\n    {% endif %}\r\n    \r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1362882
        },
        "macro.dbt_external_tables.is_csv": {
            "unique_id": "macro.dbt_external_tables.is_csv",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\snowflake\\helpers\\is_csv.sql",
            "original_file_path": "macros\\plugins\\snowflake\\helpers\\is_csv.sql",
            "name": "is_csv",
            "macro_sql": "{% macro is_csv(file_format) %}\r\n\r\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\r\n\r\nImportant: The external table does not inherit the file format, if any, in the \r\nstage definition. You must explicitly specify any file format options for the \r\nexternal table using the FILE_FORMAT parameter.\r\n\r\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \r\nyou should only specify one or the other when creating an external table.\r\n\r\n#}\r\n\r\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\r\n\r\n    {% if 'type=' in ff_ltrimmed %}\r\n    \r\n        {% if 'type=csv' in ff_ltrimmed %}\r\n\r\n            {{return(true)}}\r\n\r\n        {% else %}\r\n\r\n            {{return(false)}}\r\n            \r\n        {% endif %}\r\n        \r\n    {% else %}\r\n    \r\n        {% set ff_standardized = ff_ltrimmed\r\n            | replace('(','') | replace(')','')\r\n            | replace('format_name=','') %}\r\n        {% set fqn = ff_standardized.split('.') %}\r\n        \r\n        {% if fqn | length == 3 %}\r\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\r\n        {% elif fqn | length == 2 %}\r\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\r\n        {% else %}\r\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\r\n        {% endif %}\r\n    \r\n        {% call statement('get_file_format', fetch_result = True) %}\r\n            show file formats in {{ff_database}}.{{ff_schema}}\r\n        {% endcall %}\r\n        \r\n        {% set ffs = load_result('get_file_format').table %}\r\n        \r\n        {% for ff in ffs %}\r\n            \r\n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\r\n            \r\n                {{return(true)}}\r\n            \r\n            {% endif %}\r\n        \r\n        {% endfor %}\r\n        \r\n        {{return(false)}}        \r\n    \r\n    {% endif %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1416988
        },
        "macro.dbt_external_tables.snowflake_create_empty_table": {
            "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\snowflake\\snowpipe\\create_empty_table.sql",
            "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\create_empty_table.sql",
            "name": "snowflake_create_empty_table",
            "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\r\n\r\n    {%- set columns = source_node.columns.values() %}\r\n\r\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\r\n        {% if columns|length == 0 %}\r\n            value variant,\r\n        {% else -%}\r\n        {%- for column in columns -%}\r\n            {{column.name}} {{column.data_type}},\r\n        {% endfor -%}\r\n        {% endif %}\r\n            metadata_filename varchar,\r\n            metadata_file_row_number bigint,\r\n            _dbt_copied_at timestamp\r\n    );\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1426945
        },
        "macro.dbt_external_tables.snowflake_create_snowpipe": {
            "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\snowflake\\snowpipe\\create_snowpipe.sql",
            "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\create_snowpipe.sql",
            "name": "snowflake_create_snowpipe",
            "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\r\n\r\n    {%- set external = source_node.external -%}\r\n    {%- set snowpipe = external.snowpipe -%}\r\n\r\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\r\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\r\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\r\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\r\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\r\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.snowflake_get_copy_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.145277
        },
        "macro.dbt_external_tables.snowflake_get_copy_sql": {
            "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\snowflake\\snowpipe\\get_copy_sql.sql",
            "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\get_copy_sql.sql",
            "name": "snowflake_get_copy_sql",
            "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\r\n{# This assumes you have already created an external stage #}\r\n\r\n    {%- set columns = source_node.columns.values() -%}\r\n    {%- set external = source_node.external -%}\r\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\r\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\r\n   \r\n    {%- if explicit_transaction -%} begin; {%- endif %}\r\n    \r\n    copy into {{source(source_node.source_name, source_node.name)}}\r\n    from ( \r\n        select\r\n        {% if columns|length == 0 %}\r\n            $1::variant as value,\r\n        {% else -%}\r\n        {%- for column in columns -%}\r\n            {%- set col_expression -%}\r\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\r\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\r\n                {%- endif -%}\r\n            {%- endset -%}\r\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\r\n        {% endfor -%}\r\n        {% endif %}\r\n            metadata$filename::varchar as metadata_filename,\r\n            metadata$file_row_number::bigint as metadata_file_row_number,\r\n            current_timestamp::timestamp as _dbt_copied_at\r\n        from {{external.location}} {# stage #}\r\n    )\r\n    file_format = {{external.file_format}}\r\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\r\n    {% if copy_options %} {{copy_options}} {% endif %};\r\n    \r\n    {% if explicit_transaction -%} commit; {%- endif -%}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.is_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.148244
        },
        "macro.dbt_external_tables.snowflake_refresh_snowpipe": {
            "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\snowflake\\snowpipe\\refresh_snowpipe.sql",
            "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\refresh_snowpipe.sql",
            "name": "snowflake_refresh_snowpipe",
            "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\r\n\r\n    {% set snowpipe = source_node.external.snowpipe %}\r\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\r\n    \r\n    {% if auto_ingest is true %}\r\n    \r\n        {% do return([]) %}\r\n    \r\n    {% else %}\r\n    \r\n        {% set ddl %}\r\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\r\n        {% endset %}\r\n        \r\n        {{ return([ddl]) }}\r\n    \r\n    {% endif %}\r\n    \r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.150748
        },
        "macro.dbt_external_tables.spark__create_external_table": {
            "unique_id": "macro.dbt_external_tables.spark__create_external_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\spark\\create_external_table.sql",
            "original_file_path": "macros\\plugins\\spark\\create_external_table.sql",
            "name": "spark__create_external_table",
            "macro_sql": "{% macro spark__create_external_table(source_node) %}\r\n\r\n    {%- set columns = source_node.columns.values() -%}\r\n    {%- set external = source_node.external -%}\r\n    {%- set partitions = external.partitions -%}\r\n    {%- set options = external.options -%}\r\n\r\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\r\n    create table {{source(source_node.source_name, source_node.name)}} \r\n    {%- if columns|length > 0 %} (\r\n        {% for column in columns %}\r\n            {{column.name}} {{column.data_type}}\r\n            {{- ',' if not loop.last -}}\r\n        {% endfor %}\r\n    ) {% endif -%}\r\n    {% if external.using %} using {{external.using}} {%- endif %}\r\n    {% if options -%} options (\r\n        {%- for key, value in options.items() -%}\r\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\r\n        {%- endfor -%}\r\n    ) {%- endif %}\r\n    {% if partitions -%} partitioned by (\r\n        {%- for partition in partitions -%}\r\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\r\n        {%- endfor -%}\r\n    ) {%- endif %}\r\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\r\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\r\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\r\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1548088
        },
        "macro.dbt_external_tables.spark__get_external_build_plan": {
            "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\spark\\get_external_build_plan.sql",
            "original_file_path": "macros\\plugins\\spark\\get_external_build_plan.sql",
            "name": "spark__get_external_build_plan",
            "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\r\n\r\n    {% set build_plan = [] %}\r\n\r\n    {% set old_relation = adapter.get_relation(\r\n        database = none,\r\n        schema = source_node.schema,\r\n        identifier = source_node.identifier\r\n    ) %}\r\n\r\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\r\n\r\n    {% if create_or_replace %}\r\n        {% set build_plan = build_plan + [\r\n            dbt_external_tables.dropif(source_node), \r\n            dbt_external_tables.create_external_table(source_node)\r\n        ] %}\r\n    {% else %}\r\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\r\n    {% endif %}\r\n\r\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\r\n    {% if recover_partitions|length > 0 %}\r\n    {% set build_plan = build_plan + [\r\n        recover_partitions\r\n    ] %}\r\n    {% endif %}\r\n\r\n    {% do return(build_plan) %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.dropif",
                    "macro.dbt_external_tables.create_external_table",
                    "macro.dbt_external_tables.refresh_external_table",
                    "macro.dbt_external_tables.spark__recover_partitions"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1578774
        },
        "macro.dbt_external_tables.spark__refresh_external_table": {
            "unique_id": "macro.dbt_external_tables.spark__refresh_external_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\spark\\refresh_external_table.sql",
            "original_file_path": "macros\\plugins\\spark\\refresh_external_table.sql",
            "name": "spark__refresh_external_table",
            "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\r\n    \r\n    {% set refresh %}\r\n        refresh table {{source(source_node.source_name, source_node.name)}}\r\n    {% endset %}\r\n    \r\n    {% do return([refresh]) %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1595519
        },
        "macro.dbt_external_tables.spark__dropif": {
            "unique_id": "macro.dbt_external_tables.spark__dropif",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\spark\\helpers\\dropif.sql",
            "original_file_path": "macros\\plugins\\spark\\helpers\\dropif.sql",
            "name": "spark__dropif",
            "macro_sql": "{% macro spark__dropif(node) %}\r\n    \r\n    {% set ddl %}\r\n        drop table if exists {{source(node.source_name, node.name)}}\r\n    {% endset %}\r\n    \r\n    {{return(ddl)}}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1618721
        },
        "macro.dbt_external_tables.spark__recover_partitions": {
            "unique_id": "macro.dbt_external_tables.spark__recover_partitions",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql",
            "original_file_path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql",
            "name": "spark__recover_partitions",
            "macro_sql": "{% macro spark__recover_partitions(source_node) %}\r\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\r\n\r\n    {% set ddl %}\r\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\r\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\r\n    {%- endif -%}\r\n    {% endset %}\r\n\r\n    {{return(ddl)}}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1637328
        },
        "macro.dbt_external_tables.sqlserver__create_external_table": {
            "unique_id": "macro.dbt_external_tables.sqlserver__create_external_table",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\sqlserver\\create_external_table.sql",
            "original_file_path": "macros\\plugins\\sqlserver\\create_external_table.sql",
            "name": "sqlserver__create_external_table",
            "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\r\n\r\n    {%- set columns = source_node.columns.values() -%}\r\n    {%- set external = source_node.external -%}\r\n\r\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\r\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\r\n\r\n    create external table {{source(source_node.source_name, source_node.name)}} (\r\n        {% for column in columns %}\r\n            {# TODO set nullity based on schema tests?? #}\r\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\r\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\r\n            {{- ',' if not loop.last -}}\r\n        {% endfor %}\r\n    )\r\n    WITH (\r\n        {# remove keys that are None (i.e. not defined for a given source) #}\r\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\r\n            {{key}} = \r\n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\r\n                    '{{value}}'\r\n                {% elif key in [\"data_source\",\"file_format\"] -%}\r\n                    [{{value}}]\r\n                {% else -%}\r\n                    {{value}}\r\n                {%- endif -%}\r\n            {{- ',' if not loop.last -}}\r\n            {%- endfor -%}\r\n    )\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1667018
        },
        "macro.dbt_external_tables.sqlserver__get_external_build_plan": {
            "unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\sqlserver\\get_external_build_plan.sql",
            "original_file_path": "macros\\plugins\\sqlserver\\get_external_build_plan.sql",
            "name": "sqlserver__get_external_build_plan",
            "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\r\n\r\n    {% set build_plan = [] %}\r\n\r\n    {% set old_relation = adapter.get_relation(\r\n        database = source_node.database,\r\n        schema = source_node.schema,\r\n        identifier = source_node.identifier\r\n    ) %}\r\n\r\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\r\n\r\n    {% if create_or_replace %}\r\n        {% set build_plan = build_plan + [ \r\n            dbt_external_tables.dropif(source_node), \r\n            dbt_external_tables.create_external_table(source_node)\r\n        ] %}\r\n    {% else %}\r\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\r\n    {% endif %}\r\n    {% do return(build_plan) %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_external_tables.dropif",
                    "macro.dbt_external_tables.create_external_table",
                    "macro.dbt_external_tables.refresh_external_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1696453
        },
        "macro.dbt_external_tables.sqlserver__dropif": {
            "unique_id": "macro.dbt_external_tables.sqlserver__dropif",
            "package_name": "dbt_external_tables",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_external_tables",
            "path": "macros\\plugins\\sqlserver\\helpers\\dropif.sql",
            "original_file_path": "macros\\plugins\\sqlserver\\helpers\\dropif.sql",
            "name": "sqlserver__dropif",
            "macro_sql": "{% macro sqlserver__dropif(node) %}\r\n    \r\n    {% set ddl %}\r\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\r\n        begin\r\n        drop external table {{source(node.source_name, node.name)}}\r\n        end\r\n    {% endset %}\r\n    \r\n    {{return(ddl)}}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.170919
        },
        "macro.dbt_utils._is_ephemeral": {
            "unique_id": "macro.dbt_utils._is_ephemeral",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\_is_ephemeral.sql",
            "original_file_path": "macros\\cross_db_utils\\_is_ephemeral.sql",
            "name": "_is_ephemeral",
            "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\r\n    {%- if obj.is_cte -%}\r\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\r\n        {% if obj.name.startswith(ephemeral_prefix) %}\r\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\r\n        {% else %}\r\n            {% set model_name = obj.name %}\r\n        {%- endif -%}\r\n        {% set error_message %}\r\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\r\n\r\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\r\n        {% endset %}\r\n        {%- do exceptions.raise_compiler_error(error_message) -%}\r\n    {%- endif -%}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1743214
        },
        "macro.dbt_utils._is_relation": {
            "unique_id": "macro.dbt_utils._is_relation",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\_is_relation.sql",
            "original_file_path": "macros\\cross_db_utils\\_is_relation.sql",
            "name": "_is_relation",
            "macro_sql": "{% macro _is_relation(obj, macro) %}\r\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\r\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\r\n    {%- endif -%}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.175424
        },
        "macro.dbt_utils.any_value": {
            "unique_id": "macro.dbt_utils.any_value",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\any_value.sql",
            "original_file_path": "macros\\cross_db_utils\\any_value.sql",
            "name": "any_value",
            "macro_sql": "{% macro any_value(expression) -%}\r\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1774633
        },
        "macro.dbt_utils.default__any_value": {
            "unique_id": "macro.dbt_utils.default__any_value",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\any_value.sql",
            "original_file_path": "macros\\cross_db_utils\\any_value.sql",
            "name": "default__any_value",
            "macro_sql": "{% macro default__any_value(expression) -%}\r\n    \r\n    any_value({{ expression }})\r\n    \r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1780005
        },
        "macro.dbt_utils.postgres__any_value": {
            "unique_id": "macro.dbt_utils.postgres__any_value",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\any_value.sql",
            "original_file_path": "macros\\cross_db_utils\\any_value.sql",
            "name": "postgres__any_value",
            "macro_sql": "{% macro postgres__any_value(expression) -%}\r\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\r\n    min({{ expression }})\r\n    \r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1780005
        },
        "macro.dbt_utils.array_append": {
            "unique_id": "macro.dbt_utils.array_append",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_append.sql",
            "original_file_path": "macros\\cross_db_utils\\array_append.sql",
            "name": "array_append",
            "macro_sql": "{% macro array_append(array, new_element) -%}\r\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1790643
        },
        "macro.dbt_utils.default__array_append": {
            "unique_id": "macro.dbt_utils.default__array_append",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_append.sql",
            "original_file_path": "macros\\cross_db_utils\\array_append.sql",
            "name": "default__array_append",
            "macro_sql": "{% macro default__array_append(array, new_element) -%}\r\n    array_append({{ array }}, {{ new_element }})\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1790643
        },
        "macro.dbt_utils.bigquery__array_append": {
            "unique_id": "macro.dbt_utils.bigquery__array_append",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_append.sql",
            "original_file_path": "macros\\cross_db_utils\\array_append.sql",
            "name": "bigquery__array_append",
            "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\r\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.array_concat",
                    "macro.dbt_utils.array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.180052
        },
        "macro.dbt_utils.redshift__array_append": {
            "unique_id": "macro.dbt_utils.redshift__array_append",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_append.sql",
            "original_file_path": "macros\\cross_db_utils\\array_append.sql",
            "name": "redshift__array_append",
            "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\r\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.array_concat",
                    "macro.dbt_utils.array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.180052
        },
        "macro.dbt_utils.array_concat": {
            "unique_id": "macro.dbt_utils.array_concat",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_concat.sql",
            "original_file_path": "macros\\cross_db_utils\\array_concat.sql",
            "name": "array_concat",
            "macro_sql": "{% macro array_concat(array_1, array_2) -%}\r\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__array_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1810453
        },
        "macro.dbt_utils.default__array_concat": {
            "unique_id": "macro.dbt_utils.default__array_concat",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_concat.sql",
            "original_file_path": "macros\\cross_db_utils\\array_concat.sql",
            "name": "default__array_concat",
            "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\r\n    array_cat({{ array_1 }}, {{ array_2 }})\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1820421
        },
        "macro.dbt_utils.bigquery__array_concat": {
            "unique_id": "macro.dbt_utils.bigquery__array_concat",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_concat.sql",
            "original_file_path": "macros\\cross_db_utils\\array_concat.sql",
            "name": "bigquery__array_concat",
            "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\r\n    array_concat({{ array_1 }}, {{ array_2 }})\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1820421
        },
        "macro.dbt_utils.redshift__array_concat": {
            "unique_id": "macro.dbt_utils.redshift__array_concat",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_concat.sql",
            "original_file_path": "macros\\cross_db_utils\\array_concat.sql",
            "name": "redshift__array_concat",
            "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\r\n    array_concat({{ array_1 }}, {{ array_2 }})\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1820421
        },
        "macro.dbt_utils.array_construct": {
            "unique_id": "macro.dbt_utils.array_construct",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_construct.sql",
            "original_file_path": "macros\\cross_db_utils\\array_construct.sql",
            "name": "array_construct",
            "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\r\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.183047
        },
        "macro.dbt_utils.default__array_construct": {
            "unique_id": "macro.dbt_utils.default__array_construct",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_construct.sql",
            "original_file_path": "macros\\cross_db_utils\\array_construct.sql",
            "name": "default__array_construct",
            "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\r\n    {% if inputs|length > 0 %}\r\n    array[ {{ inputs|join(' , ') }} ]\r\n    {% else %}\r\n    array[]::{{data_type}}[]\r\n    {% endif %}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1840448
        },
        "macro.dbt_utils.snowflake__array_construct": {
            "unique_id": "macro.dbt_utils.snowflake__array_construct",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_construct.sql",
            "original_file_path": "macros\\cross_db_utils\\array_construct.sql",
            "name": "snowflake__array_construct",
            "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\r\n    array_construct( {{ inputs|join(' , ') }} )\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1840448
        },
        "macro.dbt_utils.redshift__array_construct": {
            "unique_id": "macro.dbt_utils.redshift__array_construct",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_construct.sql",
            "original_file_path": "macros\\cross_db_utils\\array_construct.sql",
            "name": "redshift__array_construct",
            "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\r\n    array( {{ inputs|join(' , ') }} )\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1840448
        },
        "macro.dbt_utils.bigquery__array_construct": {
            "unique_id": "macro.dbt_utils.bigquery__array_construct",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\array_construct.sql",
            "original_file_path": "macros\\cross_db_utils\\array_construct.sql",
            "name": "bigquery__array_construct",
            "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\r\n    [ {{ inputs|join(' , ') }} ]\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1840448
        },
        "macro.dbt_utils.bool_or": {
            "unique_id": "macro.dbt_utils.bool_or",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\bool_or.sql",
            "original_file_path": "macros\\cross_db_utils\\bool_or.sql",
            "name": "bool_or",
            "macro_sql": "{% macro bool_or(expression) -%}\r\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1860132
        },
        "macro.dbt_utils.default__bool_or": {
            "unique_id": "macro.dbt_utils.default__bool_or",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\bool_or.sql",
            "original_file_path": "macros\\cross_db_utils\\bool_or.sql",
            "name": "default__bool_or",
            "macro_sql": "{% macro default__bool_or(expression) -%}\r\n    \r\n    bool_or({{ expression }})\r\n    \r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1860132
        },
        "macro.dbt_utils.snowflake__bool_or": {
            "unique_id": "macro.dbt_utils.snowflake__bool_or",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\bool_or.sql",
            "original_file_path": "macros\\cross_db_utils\\bool_or.sql",
            "name": "snowflake__bool_or",
            "macro_sql": "{% macro snowflake__bool_or(expression) -%}\r\n    \r\n    boolor_agg({{ expression }})\r\n    \r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1860132
        },
        "macro.dbt_utils.bigquery__bool_or": {
            "unique_id": "macro.dbt_utils.bigquery__bool_or",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\bool_or.sql",
            "original_file_path": "macros\\cross_db_utils\\bool_or.sql",
            "name": "bigquery__bool_or",
            "macro_sql": "{% macro bigquery__bool_or(expression) -%}\r\n    \r\n    logical_or({{ expression }})\r\n    \r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1860132
        },
        "macro.dbt_utils.cast_array_to_string": {
            "unique_id": "macro.dbt_utils.cast_array_to_string",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "name": "cast_array_to_string",
            "macro_sql": "{% macro cast_array_to_string(array) %}\r\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__cast_array_to_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.188981
        },
        "macro.dbt_utils.default__cast_array_to_string": {
            "unique_id": "macro.dbt_utils.default__cast_array_to_string",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "name": "default__cast_array_to_string",
            "macro_sql": "{% macro default__cast_array_to_string(array) %}\r\n    cast({{ array }} as {{ dbt_utils.type_string() }})\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.188981
        },
        "macro.dbt_utils.postgres__cast_array_to_string": {
            "unique_id": "macro.dbt_utils.postgres__cast_array_to_string",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "name": "postgres__cast_array_to_string",
            "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\r\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\r\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.188981
        },
        "macro.dbt_utils.redshift__cast_array_to_string": {
            "unique_id": "macro.dbt_utils.redshift__cast_array_to_string",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "name": "redshift__cast_array_to_string",
            "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\r\n    cast({{ array }} as {{ dbt_utils.type_string() }})\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.188981
        },
        "macro.dbt_utils.bigquery__cast_array_to_string": {
            "unique_id": "macro.dbt_utils.bigquery__cast_array_to_string",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql",
            "name": "bigquery__cast_array_to_string",
            "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\r\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1902826
        },
        "macro.dbt_utils.cast_bool_to_text": {
            "unique_id": "macro.dbt_utils.cast_bool_to_text",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "name": "cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\r\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1917894
        },
        "macro.dbt_utils.default__cast_bool_to_text": {
            "unique_id": "macro.dbt_utils.default__cast_bool_to_text",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "name": "default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\r\n    cast({{ field }} as {{ dbt_utils.type_string() }})\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1917894
        },
        "macro.dbt_utils.redshift__cast_bool_to_text": {
            "unique_id": "macro.dbt_utils.redshift__cast_bool_to_text",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "name": "redshift__cast_bool_to_text",
            "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\r\n    case\r\n        when {{ field }} is true then 'true'\r\n        when {{ field }} is false then 'false'\r\n    end::text\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1929188
        },
        "macro.dbt_utils.concat": {
            "unique_id": "macro.dbt_utils.concat",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\concat.sql",
            "original_file_path": "macros\\cross_db_utils\\concat.sql",
            "name": "concat",
            "macro_sql": "{% macro concat(fields) -%}\r\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1947377
        },
        "macro.dbt_utils.default__concat": {
            "unique_id": "macro.dbt_utils.default__concat",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\concat.sql",
            "original_file_path": "macros\\cross_db_utils\\concat.sql",
            "name": "default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\r\n    {{ fields|join(' || ') }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1951556
        },
        "macro.dbt_utils.current_timestamp": {
            "unique_id": "macro.dbt_utils.current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "current_timestamp",
            "macro_sql": "{% macro current_timestamp() -%}\r\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1961503
        },
        "macro.dbt_utils.default__current_timestamp": {
            "unique_id": "macro.dbt_utils.default__current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() %}\r\n    current_timestamp::{{dbt_utils.type_timestamp()}}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1961503
        },
        "macro.dbt_utils.redshift__current_timestamp": {
            "unique_id": "macro.dbt_utils.redshift__current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "redshift__current_timestamp",
            "macro_sql": "{% macro redshift__current_timestamp() %}\r\n    getdate()\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1971629
        },
        "macro.dbt_utils.bigquery__current_timestamp": {
            "unique_id": "macro.dbt_utils.bigquery__current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "bigquery__current_timestamp",
            "macro_sql": "{% macro bigquery__current_timestamp() %}\r\n    current_timestamp\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1971629
        },
        "macro.dbt_utils.current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "current_timestamp_in_utc",
            "macro_sql": "{% macro current_timestamp_in_utc() -%}\r\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__current_timestamp_in_utc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1971629
        },
        "macro.dbt_utils.default__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "default__current_timestamp_in_utc",
            "macro_sql": "{% macro default__current_timestamp_in_utc() %}\r\n    {{dbt_utils.current_timestamp()}}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1971629
        },
        "macro.dbt_utils.snowflake__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "snowflake__current_timestamp_in_utc",
            "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\r\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp",
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1971629
        },
        "macro.dbt_utils.postgres__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "postgres__current_timestamp_in_utc",
            "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\r\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.1971629
        },
        "macro.dbt_utils.redshift__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "redshift__current_timestamp_in_utc",
            "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\r\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__current_timestamp_in_utc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.198162
        },
        "macro.dbt_utils.type_string": {
            "unique_id": "macro.dbt_utils.type_string",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_string",
            "macro_sql": "\r\n\r\n{%- macro type_string() -%}\r\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.199434
        },
        "macro.dbt_utils.default__type_string": {
            "unique_id": "macro.dbt_utils.default__type_string",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_string",
            "macro_sql": "{% macro default__type_string() %}\r\n    string\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.199434
        },
        "macro.dbt_utils.redshift__type_string": {
            "unique_id": "macro.dbt_utils.redshift__type_string",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "redshift__type_string",
            "macro_sql": "\r\n\r\n{%- macro redshift__type_string() -%}\r\n    varchar\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.199434
        },
        "macro.dbt_utils.postgres__type_string": {
            "unique_id": "macro.dbt_utils.postgres__type_string",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "postgres__type_string",
            "macro_sql": "{% macro postgres__type_string() %}\r\n    varchar\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.199434
        },
        "macro.dbt_utils.snowflake__type_string": {
            "unique_id": "macro.dbt_utils.snowflake__type_string",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "snowflake__type_string",
            "macro_sql": "{% macro snowflake__type_string() %}\r\n    varchar\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2004404
        },
        "macro.dbt_utils.type_timestamp": {
            "unique_id": "macro.dbt_utils.type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_timestamp",
            "macro_sql": "\r\n\r\n{%- macro type_timestamp() -%}\r\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2004404
        },
        "macro.dbt_utils.default__type_timestamp": {
            "unique_id": "macro.dbt_utils.default__type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\r\n    timestamp\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2004404
        },
        "macro.dbt_utils.postgres__type_timestamp": {
            "unique_id": "macro.dbt_utils.postgres__type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "postgres__type_timestamp",
            "macro_sql": "{% macro postgres__type_timestamp() %}\r\n    timestamp without time zone\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2004404
        },
        "macro.dbt_utils.snowflake__type_timestamp": {
            "unique_id": "macro.dbt_utils.snowflake__type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "snowflake__type_timestamp",
            "macro_sql": "{% macro snowflake__type_timestamp() %}\r\n    timestamp_ntz\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2004404
        },
        "macro.dbt_utils.type_float": {
            "unique_id": "macro.dbt_utils.type_float",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_float",
            "macro_sql": "\r\n\r\n{%- macro type_float() -%}\r\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2014368
        },
        "macro.dbt_utils.default__type_float": {
            "unique_id": "macro.dbt_utils.default__type_float",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_float",
            "macro_sql": "{% macro default__type_float() %}\r\n    float\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2014368
        },
        "macro.dbt_utils.bigquery__type_float": {
            "unique_id": "macro.dbt_utils.bigquery__type_float",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "bigquery__type_float",
            "macro_sql": "{% macro bigquery__type_float() %}\r\n    float64\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2014368
        },
        "macro.dbt_utils.type_numeric": {
            "unique_id": "macro.dbt_utils.type_numeric",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_numeric",
            "macro_sql": "\r\n\r\n{%- macro type_numeric() -%}\r\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2021654
        },
        "macro.dbt_utils.default__type_numeric": {
            "unique_id": "macro.dbt_utils.default__type_numeric",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\r\n    numeric(28, 6)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.202456
        },
        "macro.dbt_utils.bigquery__type_numeric": {
            "unique_id": "macro.dbt_utils.bigquery__type_numeric",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "bigquery__type_numeric",
            "macro_sql": "{% macro bigquery__type_numeric() %}\r\n    numeric\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2025595
        },
        "macro.dbt_utils.type_bigint": {
            "unique_id": "macro.dbt_utils.type_bigint",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_bigint",
            "macro_sql": "\r\n\r\n{%- macro type_bigint() -%}\r\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2025595
        },
        "macro.dbt_utils.default__type_bigint": {
            "unique_id": "macro.dbt_utils.default__type_bigint",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\r\n    bigint\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2025595
        },
        "macro.dbt_utils.bigquery__type_bigint": {
            "unique_id": "macro.dbt_utils.bigquery__type_bigint",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "bigquery__type_bigint",
            "macro_sql": "{% macro bigquery__type_bigint() %}\r\n    int64\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2025595
        },
        "macro.dbt_utils.type_int": {
            "unique_id": "macro.dbt_utils.type_int",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_int",
            "macro_sql": "\r\n\r\n{%- macro type_int() -%}\r\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2025595
        },
        "macro.dbt_utils.default__type_int": {
            "unique_id": "macro.dbt_utils.default__type_int",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_int",
            "macro_sql": "{% macro default__type_int() %}\r\n    int\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2025595
        },
        "macro.dbt_utils.bigquery__type_int": {
            "unique_id": "macro.dbt_utils.bigquery__type_int",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "bigquery__type_int",
            "macro_sql": "{% macro bigquery__type_int() %}\r\n    int64\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2025595
        },
        "macro.dbt_utils.date_trunc": {
            "unique_id": "macro.dbt_utils.date_trunc",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\date_trunc.sql",
            "original_file_path": "macros\\cross_db_utils\\date_trunc.sql",
            "name": "date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\r\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2045898
        },
        "macro.dbt_utils.default__date_trunc": {
            "unique_id": "macro.dbt_utils.default__date_trunc",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\date_trunc.sql",
            "original_file_path": "macros\\cross_db_utils\\date_trunc.sql",
            "name": "default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\r\n    date_trunc('{{datepart}}', {{date}})\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2045898
        },
        "macro.dbt_utils.bigquery__date_trunc": {
            "unique_id": "macro.dbt_utils.bigquery__date_trunc",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\date_trunc.sql",
            "original_file_path": "macros\\cross_db_utils\\date_trunc.sql",
            "name": "bigquery__date_trunc",
            "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\r\n    timestamp_trunc(\r\n        cast({{date}} as timestamp),\r\n        {{datepart}}\r\n    )\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2051253
        },
        "macro.dbt_utils.dateadd": {
            "unique_id": "macro.dbt_utils.dateadd",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\r\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2067237
        },
        "macro.dbt_utils.default__dateadd": {
            "unique_id": "macro.dbt_utils.default__dateadd",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\r\n\r\n    dateadd(\r\n        {{ datepart }},\r\n        {{ interval }},\r\n        {{ from_date_or_timestamp }}\r\n        )\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2067237
        },
        "macro.dbt_utils.bigquery__dateadd": {
            "unique_id": "macro.dbt_utils.bigquery__dateadd",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "bigquery__dateadd",
            "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\r\n\r\n        datetime_add(\r\n            cast( {{ from_date_or_timestamp }} as datetime),\r\n        interval {{ interval }} {{ datepart }}\r\n        )\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2077367
        },
        "macro.dbt_utils.postgres__dateadd": {
            "unique_id": "macro.dbt_utils.postgres__dateadd",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "postgres__dateadd",
            "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\r\n\r\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2077367
        },
        "macro.dbt_utils.redshift__dateadd": {
            "unique_id": "macro.dbt_utils.redshift__dateadd",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "redshift__dateadd",
            "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\r\n\r\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2084966
        },
        "macro.dbt_utils.datediff": {
            "unique_id": "macro.dbt_utils.datediff",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\r\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2123983
        },
        "macro.dbt_utils.default__datediff": {
            "unique_id": "macro.dbt_utils.default__datediff",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\r\n\r\n    datediff(\r\n        {{ datepart }},\r\n        {{ first_date }},\r\n        {{ second_date }}\r\n        )\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2123983
        },
        "macro.dbt_utils.bigquery__datediff": {
            "unique_id": "macro.dbt_utils.bigquery__datediff",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "bigquery__datediff",
            "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\r\n\r\n    datetime_diff(\r\n        cast({{second_date}} as datetime),\r\n        cast({{first_date}} as datetime),\r\n        {{datepart}}\r\n    )\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2123983
        },
        "macro.dbt_utils.postgres__datediff": {
            "unique_id": "macro.dbt_utils.postgres__datediff",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "postgres__datediff",
            "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\r\n\r\n    {% if datepart == 'year' %}\r\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\r\n    {% elif datepart == 'quarter' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\r\n    {% elif datepart == 'month' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\r\n    {% elif datepart == 'day' %}\r\n        (({{second_date}})::date - ({{first_date}})::date)\r\n    {% elif datepart == 'week' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\r\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\r\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\r\n            else\r\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\r\n        end)\r\n    {% elif datepart == 'hour' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\r\n    {% elif datepart == 'minute' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\r\n    {% elif datepart == 'second' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\r\n    {% elif datepart == 'millisecond' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\r\n    {% elif datepart == 'microsecond' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\r\n    {% else %}\r\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\r\n    {% endif %}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2154346
        },
        "macro.dbt_utils.redshift__datediff": {
            "unique_id": "macro.dbt_utils.redshift__datediff",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "redshift__datediff",
            "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\r\n\r\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2154346
        },
        "macro.dbt_utils.escape_single_quotes": {
            "unique_id": "macro.dbt_utils.escape_single_quotes",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "name": "escape_single_quotes",
            "macro_sql": "{% macro escape_single_quotes(expression) %}\r\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.21644
        },
        "macro.dbt_utils.default__escape_single_quotes": {
            "unique_id": "macro.dbt_utils.default__escape_single_quotes",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "name": "default__escape_single_quotes",
            "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\r\n{{ expression | replace(\"'\",\"''\") }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.217425
        },
        "macro.dbt_utils.snowflake__escape_single_quotes": {
            "unique_id": "macro.dbt_utils.snowflake__escape_single_quotes",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "name": "snowflake__escape_single_quotes",
            "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\r\n{{ expression | replace(\"'\", \"\\\\'\") }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.217425
        },
        "macro.dbt_utils.bigquery__escape_single_quotes": {
            "unique_id": "macro.dbt_utils.bigquery__escape_single_quotes",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql",
            "name": "bigquery__escape_single_quotes",
            "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\r\n{{ expression | replace(\"'\", \"\\\\'\") }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.217425
        },
        "macro.dbt_utils.except": {
            "unique_id": "macro.dbt_utils.except",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\except.sql",
            "original_file_path": "macros\\cross_db_utils\\except.sql",
            "name": "except",
            "macro_sql": "{% macro except() %}\r\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2184427
        },
        "macro.dbt_utils.default__except": {
            "unique_id": "macro.dbt_utils.default__except",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\except.sql",
            "original_file_path": "macros\\cross_db_utils\\except.sql",
            "name": "default__except",
            "macro_sql": "{% macro default__except() %}\r\n\r\n    except\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2184427
        },
        "macro.dbt_utils.bigquery__except": {
            "unique_id": "macro.dbt_utils.bigquery__except",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\except.sql",
            "original_file_path": "macros\\cross_db_utils\\except.sql",
            "name": "bigquery__except",
            "macro_sql": "{% macro bigquery__except() %}\r\n\r\n    except distinct\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2184427
        },
        "macro.dbt_utils.hash": {
            "unique_id": "macro.dbt_utils.hash",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\hash.sql",
            "original_file_path": "macros\\cross_db_utils\\hash.sql",
            "name": "hash",
            "macro_sql": "{% macro hash(field) -%}\r\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.219421
        },
        "macro.dbt_utils.default__hash": {
            "unique_id": "macro.dbt_utils.default__hash",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\hash.sql",
            "original_file_path": "macros\\cross_db_utils\\hash.sql",
            "name": "default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\r\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2204213
        },
        "macro.dbt_utils.bigquery__hash": {
            "unique_id": "macro.dbt_utils.bigquery__hash",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\hash.sql",
            "original_file_path": "macros\\cross_db_utils\\hash.sql",
            "name": "bigquery__hash",
            "macro_sql": "{% macro bigquery__hash(field) -%}\r\n    to_hex({{dbt_utils.default__hash(field)}})\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2204213
        },
        "macro.dbt_utils.identifier": {
            "unique_id": "macro.dbt_utils.identifier",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\identifier.sql",
            "original_file_path": "macros\\cross_db_utils\\identifier.sql",
            "name": "identifier",
            "macro_sql": "{% macro identifier(value) %}\t\r\n  {%- set error_message = '\r\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\r\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\r\n    '.format(model.package_name, model.name) -%}\r\n  {%- do exceptions.warn(error_message) -%}\r\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__identifier"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2214344
        },
        "macro.dbt_utils.default__identifier": {
            "unique_id": "macro.dbt_utils.default__identifier",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\identifier.sql",
            "original_file_path": "macros\\cross_db_utils\\identifier.sql",
            "name": "default__identifier",
            "macro_sql": "{% macro default__identifier(value) -%}\t\r\n    \"{{ value }}\"\t\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2214344
        },
        "macro.dbt_utils.bigquery__identifier": {
            "unique_id": "macro.dbt_utils.bigquery__identifier",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\identifier.sql",
            "original_file_path": "macros\\cross_db_utils\\identifier.sql",
            "name": "bigquery__identifier",
            "macro_sql": "{% macro bigquery__identifier(value) -%}\t\r\n    `{{ value }}`\t\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2224107
        },
        "macro.dbt_utils.intersect": {
            "unique_id": "macro.dbt_utils.intersect",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\intersect.sql",
            "original_file_path": "macros\\cross_db_utils\\intersect.sql",
            "name": "intersect",
            "macro_sql": "{% macro intersect() %}\r\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.223423
        },
        "macro.dbt_utils.default__intersect": {
            "unique_id": "macro.dbt_utils.default__intersect",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\intersect.sql",
            "original_file_path": "macros\\cross_db_utils\\intersect.sql",
            "name": "default__intersect",
            "macro_sql": "{% macro default__intersect() %}\r\n\r\n    intersect\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.223423
        },
        "macro.dbt_utils.bigquery__intersect": {
            "unique_id": "macro.dbt_utils.bigquery__intersect",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\intersect.sql",
            "original_file_path": "macros\\cross_db_utils\\intersect.sql",
            "name": "bigquery__intersect",
            "macro_sql": "{% macro bigquery__intersect() %}\r\n\r\n    intersect distinct\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.223423
        },
        "macro.dbt_utils.last_day": {
            "unique_id": "macro.dbt_utils.last_day",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\r\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2244124
        },
        "macro.dbt_utils.default_last_day": {
            "unique_id": "macro.dbt_utils.default_last_day",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "default_last_day",
            "macro_sql": "\r\n\r\n\r\n{%- macro default_last_day(date, datepart) -%}\r\n    cast(\r\n        {{dbt_utils.dateadd('day', '-1',\r\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\r\n        )}}\r\n        as date)\r\n{%- endmacro -%}\r\n\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.225401
        },
        "macro.dbt_utils.default__last_day": {
            "unique_id": "macro.dbt_utils.default__last_day",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\r\n    {{dbt_utils.default_last_day(date, datepart)}}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.225401
        },
        "macro.dbt_utils.postgres__last_day": {
            "unique_id": "macro.dbt_utils.postgres__last_day",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "postgres__last_day",
            "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\r\n\r\n    {%- if datepart == 'quarter' -%}\r\n    -- postgres dateadd does not support quarter interval.\r\n    cast(\r\n        {{dbt_utils.dateadd('day', '-1',\r\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\r\n        )}}\r\n        as date)\r\n    {%- else -%}\r\n    {{dbt_utils.default_last_day(date, datepart)}}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2264028
        },
        "macro.dbt_utils.redshift__last_day": {
            "unique_id": "macro.dbt_utils.redshift__last_day",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "redshift__last_day",
            "macro_sql": "{% macro redshift__last_day(date, datepart) %}\r\n\r\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2264028
        },
        "macro.dbt_utils.length": {
            "unique_id": "macro.dbt_utils.length",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\length.sql",
            "original_file_path": "macros\\cross_db_utils\\length.sql",
            "name": "length",
            "macro_sql": "{% macro length(expression) -%}\r\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2274165
        },
        "macro.dbt_utils.default__length": {
            "unique_id": "macro.dbt_utils.default__length",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\length.sql",
            "original_file_path": "macros\\cross_db_utils\\length.sql",
            "name": "default__length",
            "macro_sql": "{% macro default__length(expression) %}\r\n    \r\n    length(\r\n        {{ expression }}\r\n    )\r\n    \r\n{%- endmacro -%}\r\n\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2274165
        },
        "macro.dbt_utils.redshift__length": {
            "unique_id": "macro.dbt_utils.redshift__length",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\length.sql",
            "original_file_path": "macros\\cross_db_utils\\length.sql",
            "name": "redshift__length",
            "macro_sql": "{% macro redshift__length(expression) %}\r\n\r\n    len(\r\n        {{ expression }}\r\n    )\r\n    \r\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2274165
        },
        "macro.dbt_utils.listagg": {
            "unique_id": "macro.dbt_utils.listagg",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\listagg.sql",
            "original_file_path": "macros\\cross_db_utils\\listagg.sql",
            "name": "listagg",
            "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\r\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2304013
        },
        "macro.dbt_utils.default__listagg": {
            "unique_id": "macro.dbt_utils.default__listagg",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\listagg.sql",
            "original_file_path": "macros\\cross_db_utils\\listagg.sql",
            "name": "default__listagg",
            "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\r\n\r\n    {% if limit_num -%}\r\n    array_to_string(\r\n        array_slice(\r\n            array_agg(\r\n                {{ measure }}\r\n            ){% if order_by_clause -%}\r\n            within group ({{ order_by_clause }})\r\n            {%- endif %}\r\n            ,0\r\n            ,{{ limit_num }}\r\n        ),\r\n        {{ delimiter_text }}\r\n        )\r\n    {%- else %}\r\n    listagg(\r\n        {{ measure }},\r\n        {{ delimiter_text }}\r\n        )\r\n        {% if order_by_clause -%}\r\n        within group ({{ order_by_clause }})\r\n        {%- endif %}\r\n    {%- endif %}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2313797
        },
        "macro.dbt_utils.bigquery__listagg": {
            "unique_id": "macro.dbt_utils.bigquery__listagg",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\listagg.sql",
            "original_file_path": "macros\\cross_db_utils\\listagg.sql",
            "name": "bigquery__listagg",
            "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\r\n\r\n    string_agg(\r\n        {{ measure }},\r\n        {{ delimiter_text }}\r\n        {% if order_by_clause -%}\r\n        {{ order_by_clause }}\r\n        {%- endif %}\r\n        {% if limit_num -%}\r\n        limit {{ limit_num }}\r\n        {%- endif %}\r\n        )\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2323766
        },
        "macro.dbt_utils.postgres__listagg": {
            "unique_id": "macro.dbt_utils.postgres__listagg",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\listagg.sql",
            "original_file_path": "macros\\cross_db_utils\\listagg.sql",
            "name": "postgres__listagg",
            "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\r\n    \r\n    {% if limit_num -%}\r\n    array_to_string(\r\n        (array_agg(\r\n            {{ measure }}\r\n            {% if order_by_clause -%}\r\n            {{ order_by_clause }}\r\n            {%- endif %}\r\n        ))[1:{{ limit_num }}],\r\n        {{ delimiter_text }}\r\n        )\r\n    {%- else %}\r\n    string_agg(\r\n        {{ measure }},\r\n        {{ delimiter_text }}\r\n        {% if order_by_clause -%}\r\n        {{ order_by_clause }}\r\n        {%- endif %}\r\n        )\r\n    {%- endif %}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2323766
        },
        "macro.dbt_utils.redshift__listagg": {
            "unique_id": "macro.dbt_utils.redshift__listagg",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\listagg.sql",
            "original_file_path": "macros\\cross_db_utils\\listagg.sql",
            "name": "redshift__listagg",
            "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\r\n\r\n    {% if limit_num -%}\r\n    {% set ns = namespace() %}\r\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\r\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \r\n    {%- for char in special_chars.split(',') -%}\r\n        {% set escape_char %}\\\\{{ char }}{% endset %}\r\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\r\n    {%- endfor -%}\r\n\r\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\r\n    regexp_substr(\r\n        listagg(\r\n            {{ measure }},\r\n            {{ delimiter_text }}\r\n            )\r\n            {% if order_by_clause -%}\r\n            within group ({{ order_by_clause }})\r\n            {%- endif %}\r\n        ,{{ regex }}\r\n        )\r\n    {%- else %}\r\n    listagg(\r\n        {{ measure }},\r\n        {{ delimiter_text }}\r\n        )\r\n        {% if order_by_clause -%}\r\n        within group ({{ order_by_clause }})\r\n        {%- endif %}\r\n    {%- endif %}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2343662
        },
        "macro.dbt_utils.string_literal": {
            "unique_id": "macro.dbt_utils.string_literal",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\literal.sql",
            "original_file_path": "macros\\cross_db_utils\\literal.sql",
            "name": "string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\r\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2360413
        },
        "macro.dbt_utils.default__string_literal": {
            "unique_id": "macro.dbt_utils.default__string_literal",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\literal.sql",
            "original_file_path": "macros\\cross_db_utils\\literal.sql",
            "name": "default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\r\n    '{{ value }}'\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2360413
        },
        "macro.dbt_utils.position": {
            "unique_id": "macro.dbt_utils.position",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\position.sql",
            "original_file_path": "macros\\cross_db_utils\\position.sql",
            "name": "position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\r\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2381055
        },
        "macro.dbt_utils.default__position": {
            "unique_id": "macro.dbt_utils.default__position",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\position.sql",
            "original_file_path": "macros\\cross_db_utils\\position.sql",
            "name": "default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\r\n\r\n    position(\r\n        {{ substring_text }} in {{ string_text }}\r\n    )\r\n    \r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2381055
        },
        "macro.dbt_utils.bigquery__position": {
            "unique_id": "macro.dbt_utils.bigquery__position",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\position.sql",
            "original_file_path": "macros\\cross_db_utils\\position.sql",
            "name": "bigquery__position",
            "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\r\n\r\n    strpos(\r\n        {{ string_text }},\r\n        {{ substring_text }}\r\n        \r\n    )\r\n    \r\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2381055
        },
        "macro.dbt_utils.replace": {
            "unique_id": "macro.dbt_utils.replace",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\replace.sql",
            "original_file_path": "macros\\cross_db_utils\\replace.sql",
            "name": "replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\r\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2391107
        },
        "macro.dbt_utils.default__replace": {
            "unique_id": "macro.dbt_utils.default__replace",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\replace.sql",
            "original_file_path": "macros\\cross_db_utils\\replace.sql",
            "name": "default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\r\n\r\n    replace(\r\n        {{ field }},\r\n        {{ old_chars }},\r\n        {{ new_chars }}\r\n    )\r\n    \r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.240099
        },
        "macro.dbt_utils.right": {
            "unique_id": "macro.dbt_utils.right",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\right.sql",
            "original_file_path": "macros\\cross_db_utils\\right.sql",
            "name": "right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\r\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2410934
        },
        "macro.dbt_utils.default__right": {
            "unique_id": "macro.dbt_utils.default__right",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\right.sql",
            "original_file_path": "macros\\cross_db_utils\\right.sql",
            "name": "default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\r\n\r\n    right(\r\n        {{ string_text }},\r\n        {{ length_expression }}\r\n    )\r\n    \r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2410934
        },
        "macro.dbt_utils.bigquery__right": {
            "unique_id": "macro.dbt_utils.bigquery__right",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\right.sql",
            "original_file_path": "macros\\cross_db_utils\\right.sql",
            "name": "bigquery__right",
            "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\r\n\r\n    case when {{ length_expression }} = 0 \r\n        then ''\r\n    else \r\n        substr(\r\n            {{ string_text }},\r\n            -1 * ({{ length_expression }})\r\n        )\r\n    end\r\n\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2410934
        },
        "macro.dbt_utils.snowflake__right": {
            "unique_id": "macro.dbt_utils.snowflake__right",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\right.sql",
            "original_file_path": "macros\\cross_db_utils\\right.sql",
            "name": "snowflake__right",
            "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\r\n\r\n    case when {{ length_expression }} = 0 \r\n        then ''\r\n    else \r\n        right(\r\n            {{ string_text }},\r\n            {{ length_expression }}\r\n        )\r\n    end\r\n\r\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.242092
        },
        "macro.dbt_utils.safe_cast": {
            "unique_id": "macro.dbt_utils.safe_cast",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\safe_cast.sql",
            "original_file_path": "macros\\cross_db_utils\\safe_cast.sql",
            "name": "safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\r\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2430913
        },
        "macro.dbt_utils.default__safe_cast": {
            "unique_id": "macro.dbt_utils.default__safe_cast",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\safe_cast.sql",
            "original_file_path": "macros\\cross_db_utils\\safe_cast.sql",
            "name": "default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\r\n    {# most databases don't support this function yet\r\n    so we just need to use cast #}\r\n    cast({{field}} as {{type}})\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2430913
        },
        "macro.dbt_utils.snowflake__safe_cast": {
            "unique_id": "macro.dbt_utils.snowflake__safe_cast",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\safe_cast.sql",
            "original_file_path": "macros\\cross_db_utils\\safe_cast.sql",
            "name": "snowflake__safe_cast",
            "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\r\n    try_cast({{field}} as {{type}})\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2430913
        },
        "macro.dbt_utils.bigquery__safe_cast": {
            "unique_id": "macro.dbt_utils.bigquery__safe_cast",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\safe_cast.sql",
            "original_file_path": "macros\\cross_db_utils\\safe_cast.sql",
            "name": "bigquery__safe_cast",
            "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\r\n    safe_cast({{field}} as {{type}})\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2440856
        },
        "macro.dbt_utils.split_part": {
            "unique_id": "macro.dbt_utils.split_part",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\r\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.246075
        },
        "macro.dbt_utils.default__split_part": {
            "unique_id": "macro.dbt_utils.default__split_part",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\r\n\r\n    split_part(\r\n        {{ string_text }},\r\n        {{ delimiter_text }},\r\n        {{ part_number }}\r\n        )\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.246075
        },
        "macro.dbt_utils._split_part_negative": {
            "unique_id": "macro.dbt_utils._split_part_negative",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "_split_part_negative",
            "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\r\n\r\n    split_part(\r\n        {{ string_text }},\r\n        {{ delimiter_text }},\r\n          length({{ string_text }}) \r\n          - length(\r\n              replace({{ string_text }},  {{ delimiter_text }}, '')\r\n          ) + 2 {{ part_number }}\r\n        )\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.247072
        },
        "macro.dbt_utils.postgres__split_part": {
            "unique_id": "macro.dbt_utils.postgres__split_part",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "postgres__split_part",
            "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\r\n\r\n  {% if part_number >= 0 %}\r\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\r\n  {% else %}\r\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\r\n  {% endif %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__split_part",
                    "macro.dbt_utils._split_part_negative"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.247072
        },
        "macro.dbt_utils.redshift__split_part": {
            "unique_id": "macro.dbt_utils.redshift__split_part",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "redshift__split_part",
            "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\r\n\r\n  {% if part_number >= 0 %}\r\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\r\n  {% else %}\r\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\r\n  {% endif %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__split_part",
                    "macro.dbt_utils._split_part_negative"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2480729
        },
        "macro.dbt_utils.bigquery__split_part": {
            "unique_id": "macro.dbt_utils.bigquery__split_part",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "bigquery__split_part",
            "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\r\n\r\n  {% if part_number >= 0 %}\r\n    split(\r\n        {{ string_text }},\r\n        {{ delimiter_text }}\r\n        )[safe_offset({{ part_number - 1 }})]\r\n  {% else %}\r\n    split(\r\n        {{ string_text }},\r\n        {{ delimiter_text }}\r\n        )[safe_offset(\r\n          length({{ string_text }}) \r\n          - length(\r\n              replace({{ string_text }},  {{ delimiter_text }}, '')\r\n          ) + 1\r\n        )]\r\n  {% endif %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2480729
        },
        "macro.dbt_utils.width_bucket": {
            "unique_id": "macro.dbt_utils.width_bucket",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\width_bucket.sql",
            "original_file_path": "macros\\cross_db_utils\\width_bucket.sql",
            "name": "width_bucket",
            "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\r\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__width_bucket"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2510579
        },
        "macro.dbt_utils.default__width_bucket": {
            "unique_id": "macro.dbt_utils.default__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\width_bucket.sql",
            "original_file_path": "macros\\cross_db_utils\\width_bucket.sql",
            "name": "default__width_bucket",
            "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\r\n\r\n    {% set bin_size -%}\r\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\r\n    {%- endset %}\r\n    (\r\n        -- to break ties when the amount is eaxtly at the bucket egde\r\n        case\r\n            when\r\n                mod(\r\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\r\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\r\n                ) = 0\r\n            then 1\r\n            else 0\r\n        end\r\n    ) +\r\n      -- Anything over max_value goes the N+1 bucket\r\n    least(\r\n        ceil(\r\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\r\n        ),\r\n        {{ num_buckets }} + 1\r\n    )\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2520669
        },
        "macro.dbt_utils.redshift__width_bucket": {
            "unique_id": "macro.dbt_utils.redshift__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\width_bucket.sql",
            "original_file_path": "macros\\cross_db_utils\\width_bucket.sql",
            "name": "redshift__width_bucket",
            "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\r\n\r\n    {% set bin_size -%}\r\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\r\n    {%- endset %}\r\n    (\r\n        -- to break ties when the amount is exactly at the bucket edge\r\n        case\r\n            when\r\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\r\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\r\n                 = 0\r\n            then 1\r\n            else 0\r\n        end\r\n    ) +\r\n      -- Anything over max_value goes the N+1 bucket\r\n    least(\r\n        ceil(\r\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\r\n        ),\r\n        {{ num_buckets }} + 1\r\n    )\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2520669
        },
        "macro.dbt_utils.snowflake__width_bucket": {
            "unique_id": "macro.dbt_utils.snowflake__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\width_bucket.sql",
            "original_file_path": "macros\\cross_db_utils\\width_bucket.sql",
            "name": "snowflake__width_bucket",
            "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\r\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2530532
        },
        "macro.dbt_utils.test_accepted_range": {
            "unique_id": "macro.dbt_utils.test_accepted_range",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\accepted_range.sql",
            "original_file_path": "macros\\generic_tests\\accepted_range.sql",
            "name": "test_accepted_range",
            "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\r\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_accepted_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2540615
        },
        "macro.dbt_utils.default__test_accepted_range": {
            "unique_id": "macro.dbt_utils.default__test_accepted_range",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\accepted_range.sql",
            "original_file_path": "macros\\generic_tests\\accepted_range.sql",
            "name": "default__test_accepted_range",
            "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\r\n\r\nwith meet_condition as(\r\n  select *\r\n  from {{ model }}\r\n),\r\n\r\nvalidation_errors as (\r\n  select *\r\n  from meet_condition\r\n  where\r\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\r\n    1 = 2\r\n\r\n  {%- if min_value is not none %}\r\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\r\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\r\n  {%- endif %}\r\n\r\n  {%- if max_value is not none %}\r\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\r\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\r\n  {%- endif %}\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.255048
        },
        "macro.dbt_utils.test_at_least_one": {
            "unique_id": "macro.dbt_utils.test_at_least_one",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\at_least_one.sql",
            "original_file_path": "macros\\generic_tests\\at_least_one.sql",
            "name": "test_at_least_one",
            "macro_sql": "{% test at_least_one(model, column_name) %}\r\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_at_least_one"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.256062
        },
        "macro.dbt_utils.default__test_at_least_one": {
            "unique_id": "macro.dbt_utils.default__test_at_least_one",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\at_least_one.sql",
            "original_file_path": "macros\\generic_tests\\at_least_one.sql",
            "name": "default__test_at_least_one",
            "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\r\n\r\nselect *\r\nfrom (\r\n    select\r\n        {# In TSQL, subquery aggregate columns need aliases #}\r\n        {# thus: a filler col name, 'filler_column' #}\r\n      count({{ column_name }}) as filler_column\r\n\r\n    from {{ model }}\r\n\r\n    having count({{ column_name }}) = 0\r\n\r\n) validation_errors\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.256062
        },
        "macro.dbt_utils.test_cardinality_equality": {
            "unique_id": "macro.dbt_utils.test_cardinality_equality",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\cardinality_equality.sql",
            "original_file_path": "macros\\generic_tests\\cardinality_equality.sql",
            "name": "test_cardinality_equality",
            "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\r\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_cardinality_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2580543
        },
        "macro.dbt_utils.default__test_cardinality_equality": {
            "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\cardinality_equality.sql",
            "original_file_path": "macros\\generic_tests\\cardinality_equality.sql",
            "name": "default__test_cardinality_equality",
            "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\r\n\r\n{# T-SQL does not let you use numbers as aliases for columns #}\r\n{# Thus, no \"GROUP BY 1\" #}\r\n\r\nwith table_a as (\r\nselect\r\n  {{ column_name }},\r\n  count(*) as num_rows\r\nfrom {{ model }}\r\ngroup by {{ column_name }}\r\n),\r\n\r\ntable_b as (\r\nselect\r\n  {{ field }},\r\n  count(*) as num_rows\r\nfrom {{ to }}\r\ngroup by {{ field }}\r\n),\r\n\r\nexcept_a as (\r\n  select *\r\n  from table_a\r\n  {{ dbt_utils.except() }}\r\n  select *\r\n  from table_b\r\n),\r\n\r\nexcept_b as (\r\n  select *\r\n  from table_b\r\n  {{ dbt_utils.except() }}\r\n  select *\r\n  from table_a\r\n),\r\n\r\nunioned as (\r\n  select *\r\n  from except_a\r\n  union all\r\n  select *\r\n  from except_b\r\n)\r\n\r\nselect *\r\nfrom unioned\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.259045
        },
        "macro.dbt_utils.test_equal_rowcount": {
            "unique_id": "macro.dbt_utils.test_equal_rowcount",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\equal_rowcount.sql",
            "original_file_path": "macros\\generic_tests\\equal_rowcount.sql",
            "name": "test_equal_rowcount",
            "macro_sql": "{% test equal_rowcount(model, compare_model) %}\r\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equal_rowcount"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2600312
        },
        "macro.dbt_utils.default__test_equal_rowcount": {
            "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\equal_rowcount.sql",
            "original_file_path": "macros\\generic_tests\\equal_rowcount.sql",
            "name": "default__test_equal_rowcount",
            "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\r\n\r\n{#-- Needs to be set at parse time, before we return '' below --#}\r\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\r\n\r\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n{%- if not execute -%}\r\n    {{ return('') }}\r\n{% endif %}\r\n\r\nwith a as (\r\n\r\n    select count(*) as count_a from {{ model }}\r\n\r\n),\r\nb as (\r\n\r\n    select count(*) as count_b from {{ compare_model }}\r\n\r\n),\r\nfinal as (\r\n\r\n    select\r\n        count_a,\r\n        count_b,\r\n        abs(count_a - count_b) as diff_count\r\n    from a\r\n    cross join b\r\n\r\n)\r\n\r\nselect * from final\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2600312
        },
        "macro.dbt_utils.test_equality": {
            "unique_id": "macro.dbt_utils.test_equality",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\equality.sql",
            "original_file_path": "macros\\generic_tests\\equality.sql",
            "name": "test_equality",
            "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\r\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.262023
        },
        "macro.dbt_utils.default__test_equality": {
            "unique_id": "macro.dbt_utils.default__test_equality",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\equality.sql",
            "original_file_path": "macros\\generic_tests\\equality.sql",
            "name": "default__test_equality",
            "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\r\n\r\n{% set set_diff %}\r\n    count(*) + coalesce(abs(\r\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\r\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\r\n    ), 0)\r\n{% endset %}\r\n\r\n{#-- Needs to be set at parse time, before we return '' below --#}\r\n{{ config(fail_calc = set_diff) }}\r\n\r\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n{%- if not execute -%}\r\n    {{ return('') }}\r\n{% endif %}\r\n\r\n-- setup\r\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\r\n\r\n{#-\r\nIf the compare_cols arg is provided, we can run this test without querying the\r\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\r\n-#}\r\n\r\n{%- if not compare_columns -%}\r\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\r\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\r\n{%- endif -%}\r\n\r\n{% set compare_cols_csv = compare_columns | join(', ') %}\r\n\r\nwith a as (\r\n\r\n    select * from {{ model }}\r\n\r\n),\r\n\r\nb as (\r\n\r\n    select * from {{ compare_model }}\r\n\r\n),\r\n\r\na_minus_b as (\r\n\r\n    select {{compare_cols_csv}} from a\r\n    {{ dbt_utils.except() }}\r\n    select {{compare_cols_csv}} from b\r\n\r\n),\r\n\r\nb_minus_a as (\r\n\r\n    select {{compare_cols_csv}} from b\r\n    {{ dbt_utils.except() }}\r\n    select {{compare_cols_csv}} from a\r\n\r\n),\r\n\r\nunioned as (\r\n\r\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\r\n    union all\r\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\r\n\r\n)\r\n\r\nselect * from unioned\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2630217
        },
        "macro.dbt_utils.test_expression_is_true": {
            "unique_id": "macro.dbt_utils.test_expression_is_true",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\expression_is_true.sql",
            "original_file_path": "macros\\generic_tests\\expression_is_true.sql",
            "name": "test_expression_is_true",
            "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\r\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\r\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\r\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2647934
        },
        "macro.dbt_utils.default__test_expression_is_true": {
            "unique_id": "macro.dbt_utils.default__test_expression_is_true",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\expression_is_true.sql",
            "original_file_path": "macros\\generic_tests\\expression_is_true.sql",
            "name": "default__test_expression_is_true",
            "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\r\n\r\nwith meet_condition as (\r\n    select * from {{ model }} where {{ condition }}\r\n)\r\n\r\nselect\r\n    *\r\nfrom meet_condition\r\n{% if column_name is none %}\r\nwhere not({{ expression }})\r\n{%- else %}\r\nwhere not({{ column_name }} {{ expression }})\r\n{%- endif %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2660925
        },
        "macro.dbt_utils.test_fewer_rows_than": {
            "unique_id": "macro.dbt_utils.test_fewer_rows_than",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\fewer_rows_than.sql",
            "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql",
            "name": "test_fewer_rows_than",
            "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\r\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_fewer_rows_than"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2670994
        },
        "macro.dbt_utils.default__test_fewer_rows_than": {
            "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\fewer_rows_than.sql",
            "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql",
            "name": "default__test_fewer_rows_than",
            "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\r\n\r\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\r\n\r\nwith a as (\r\n\r\n    select count(*) as count_our_model from {{ model }}\r\n\r\n),\r\nb as (\r\n\r\n    select count(*) as count_comparison_model from {{ compare_model }}\r\n\r\n),\r\ncounts as (\r\n\r\n    select\r\n        count_our_model,\r\n        count_comparison_model\r\n    from a\r\n    cross join b\r\n\r\n),\r\nfinal as (\r\n\r\n    select *,\r\n        case\r\n            -- fail the test if we have more rows than the reference model and return the row count delta\r\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\r\n            -- fail the test if they are the same number\r\n            when count_our_model = count_comparison_model then 1\r\n            -- pass the test if the delta is positive (i.e. return the number 0)\r\n            else 0\r\n    end as row_count_delta\r\n    from counts\r\n\r\n)\r\n\r\nselect * from final\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2670994
        },
        "macro.dbt_utils.test_mutually_exclusive_ranges": {
            "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "name": "test_mutually_exclusive_ranges",
            "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\r\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_mutually_exclusive_ranges"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.271074
        },
        "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
            "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "name": "default__test_mutually_exclusive_ranges",
            "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\r\n{% if gaps == 'not_allowed' %}\r\n    {% set allow_gaps_operator='=' %}\r\n    {% set allow_gaps_operator_in_words='equal_to' %}\r\n{% elif gaps == 'allowed' %}\r\n    {% set allow_gaps_operator='<=' %}\r\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\r\n{% elif gaps == 'required' %}\r\n    {% set allow_gaps_operator='<' %}\r\n    {% set allow_gaps_operator_in_words='less_than' %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n{% if not zero_length_range_allowed %}\r\n    {% set allow_zero_length_operator='<' %}\r\n    {% set allow_zero_length_operator_in_words='less_than' %}\r\n{% elif zero_length_range_allowed %}\r\n    {% set allow_zero_length_operator='<=' %}\r\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\r\n\r\nwith window_functions as (\r\n\r\n    select\r\n        {% if partition_by %}\r\n        {{ partition_by }} as partition_by_col,\r\n        {% endif %}\r\n        {{ lower_bound_column }} as lower_bound,\r\n        {{ upper_bound_column }} as upper_bound,\r\n\r\n        lead({{ lower_bound_column }}) over (\r\n            {{ partition_clause }}\r\n            order by {{ lower_bound_column }}\r\n        ) as next_lower_bound,\r\n\r\n        row_number() over (\r\n            {{ partition_clause }}\r\n            order by {{ lower_bound_column }} desc\r\n        ) = 1 as is_last_record\r\n\r\n    from {{ model }}\r\n\r\n),\r\n\r\ncalc as (\r\n    -- We want to return records where one of our assumptions fails, so we'll use\r\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\r\n    select\r\n        *,\r\n\r\n        -- For each record: lower_bound should be < upper_bound.\r\n        -- Coalesce it to return an error on the null case (implicit assumption\r\n        -- these columns are not_null)\r\n        coalesce(\r\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\r\n            false\r\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\r\n\r\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\r\n        -- Coalesce it to handle null cases for the last record.\r\n        coalesce(\r\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\r\n            is_last_record,\r\n            false\r\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\r\n\r\n    from window_functions\r\n\r\n),\r\n\r\nvalidation_errors as (\r\n\r\n    select\r\n        *\r\n    from calc\r\n\r\n    where not(\r\n        -- THE FOLLOWING SHOULD BE TRUE --\r\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\r\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\r\n    )\r\n)\r\n\r\nselect * from validation_errors\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2740664
        },
        "macro.dbt_utils.test_not_accepted_values": {
            "unique_id": "macro.dbt_utils.test_not_accepted_values",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\not_accepted_values.sql",
            "original_file_path": "macros\\generic_tests\\not_accepted_values.sql",
            "name": "test_not_accepted_values",
            "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\r\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.27537
        },
        "macro.dbt_utils.default__test_not_accepted_values": {
            "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\not_accepted_values.sql",
            "original_file_path": "macros\\generic_tests\\not_accepted_values.sql",
            "name": "default__test_not_accepted_values",
            "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\r\nwith all_values as (\r\n\r\n    select distinct\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n\r\n),\r\n\r\nvalidation_errors as (\r\n\r\n    select\r\n        value_field\r\n\r\n    from all_values\r\n    where value_field in (\r\n        {% for value in values -%}\r\n            {% if quote -%}\r\n            '{{ value }}'\r\n            {%- else -%}\r\n            {{ value }}\r\n            {%- endif -%}\r\n            {%- if not loop.last -%},{%- endif %}\r\n        {%- endfor %}\r\n        )\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2764254
        },
        "macro.dbt_utils.test_not_constant": {
            "unique_id": "macro.dbt_utils.test_not_constant",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\not_constant.sql",
            "original_file_path": "macros\\generic_tests\\not_constant.sql",
            "name": "test_not_constant",
            "macro_sql": "{% test not_constant(model, column_name) %}\r\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_constant"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2774181
        },
        "macro.dbt_utils.default__test_not_constant": {
            "unique_id": "macro.dbt_utils.default__test_not_constant",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\not_constant.sql",
            "original_file_path": "macros\\generic_tests\\not_constant.sql",
            "name": "default__test_not_constant",
            "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\r\n\r\n\r\nselect\r\n    {# In TSQL, subquery aggregate columns need aliases #}\r\n    {# thus: a filler col name, 'filler_column' #}\r\n    count(distinct {{ column_name }}) as filler_column\r\n\r\nfrom {{ model }}\r\n\r\nhaving count(distinct {{ column_name }}) = 1\r\n\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2774181
        },
        "macro.dbt_utils.test_not_null_proportion": {
            "unique_id": "macro.dbt_utils.test_not_null_proportion",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\not_null_proportion.sql",
            "original_file_path": "macros\\generic_tests\\not_null_proportion.sql",
            "name": "test_not_null_proportion",
            "macro_sql": "{% macro test_not_null_proportion(model) %}\r\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_proportion"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2794104
        },
        "macro.dbt_utils.default__test_not_null_proportion": {
            "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\not_null_proportion.sql",
            "original_file_path": "macros\\generic_tests\\not_null_proportion.sql",
            "name": "default__test_not_null_proportion",
            "macro_sql": "{% macro default__test_not_null_proportion(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\r\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\r\n\r\nwith validation as (\r\n  select\r\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\r\n  from {{ model }}\r\n),\r\nvalidation_errors as (\r\n  select\r\n    not_null_proportion\r\n  from validation\r\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\r\n)\r\nselect\r\n  *\r\nfrom validation_errors\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2804077
        },
        "macro.dbt_utils.test_recency": {
            "unique_id": "macro.dbt_utils.test_recency",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\recency.sql",
            "original_file_path": "macros\\generic_tests\\recency.sql",
            "name": "test_recency",
            "macro_sql": "{% test recency(model, field, datepart, interval) %}\r\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_recency"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2824306
        },
        "macro.dbt_utils.default__test_recency": {
            "unique_id": "macro.dbt_utils.default__test_recency",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\recency.sql",
            "original_file_path": "macros\\generic_tests\\recency.sql",
            "name": "default__test_recency",
            "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\r\n\r\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\r\n\r\nwith recency as (\r\n\r\n    select max({{field}}) as most_recent\r\n    from {{ model }}\r\n\r\n)\r\n\r\nselect\r\n\r\n    most_recent,\r\n    {{ threshold }} as threshold\r\n\r\nfrom recency\r\nwhere most_recent < {{ threshold }}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2824306
        },
        "macro.dbt_utils.test_relationships_where": {
            "unique_id": "macro.dbt_utils.test_relationships_where",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\relationships_where.sql",
            "original_file_path": "macros\\generic_tests\\relationships_where.sql",
            "name": "test_relationships_where",
            "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\r\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_relationships_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2844238
        },
        "macro.dbt_utils.default__test_relationships_where": {
            "unique_id": "macro.dbt_utils.default__test_relationships_where",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\relationships_where.sql",
            "original_file_path": "macros\\generic_tests\\relationships_where.sql",
            "name": "default__test_relationships_where",
            "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\r\n\r\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\r\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\r\n\r\nwith left_table as (\r\n\r\n  select\r\n    {{column_name}} as id\r\n\r\n  from {{model}}\r\n\r\n  where {{column_name}} is not null\r\n    and {{from_condition}}\r\n\r\n),\r\n\r\nright_table as (\r\n\r\n  select\r\n    {{field}} as id\r\n\r\n  from {{to}}\r\n\r\n  where {{field}} is not null\r\n    and {{to_condition}}\r\n\r\n),\r\n\r\nexceptions as (\r\n\r\n  select\r\n    left_table.id,\r\n    right_table.id as right_id\r\n\r\n  from left_table\r\n\r\n  left join right_table\r\n         on left_table.id = right_table.id\r\n\r\n  where right_table.id is null\r\n\r\n)\r\n\r\nselect * from exceptions\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2844238
        },
        "macro.dbt_utils.test_sequential_values": {
            "unique_id": "macro.dbt_utils.test_sequential_values",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\sequential_values.sql",
            "original_file_path": "macros\\generic_tests\\sequential_values.sql",
            "name": "test_sequential_values",
            "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\r\n\r\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\r\n\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_sequential_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2868447
        },
        "macro.dbt_utils.default__test_sequential_values": {
            "unique_id": "macro.dbt_utils.default__test_sequential_values",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\sequential_values.sql",
            "original_file_path": "macros\\generic_tests\\sequential_values.sql",
            "name": "default__test_sequential_values",
            "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\r\n\r\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\r\n\r\nwith windowed as (\r\n\r\n    select\r\n        {{ column_name }},\r\n        lag({{ column_name }}) over (\r\n            order by {{ column_name }}\r\n        ) as {{ previous_column_name }}\r\n    from {{ model }}\r\n),\r\n\r\nvalidation_errors as (\r\n    select\r\n        *\r\n    from windowed\r\n    {% if datepart %}\r\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\r\n    {% else %}\r\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\r\n    {% endif %}\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.slugify",
                    "macro.dbt_utils.type_timestamp",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.287703
        },
        "macro.dbt_utils.test_not_null_where": {
            "unique_id": "macro.dbt_utils.test_not_null_where",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\test_not_null_where.sql",
            "original_file_path": "macros\\generic_tests\\test_not_null_where.sql",
            "name": "test_not_null_where",
            "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.289126
        },
        "macro.dbt_utils.default__test_not_null_where": {
            "unique_id": "macro.dbt_utils.default__test_not_null_where",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\test_not_null_where.sql",
            "original_file_path": "macros\\generic_tests\\test_not_null_where.sql",
            "name": "default__test_not_null_where",
            "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2902687
        },
        "macro.dbt_utils.test_unique_where": {
            "unique_id": "macro.dbt_utils.test_unique_where",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\test_unique_where.sql",
            "original_file_path": "macros\\generic_tests\\test_unique_where.sql",
            "name": "test_unique_where",
            "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2919493
        },
        "macro.dbt_utils.default__test_unique_where": {
            "unique_id": "macro.dbt_utils.default__test_unique_where",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\test_unique_where.sql",
            "original_file_path": "macros\\generic_tests\\test_unique_where.sql",
            "name": "default__test_unique_where",
            "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2919493
        },
        "macro.dbt_utils.test_unique_combination_of_columns": {
            "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "name": "test_unique_combination_of_columns",
            "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\r\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_combination_of_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2940025
        },
        "macro.dbt_utils.default__test_unique_combination_of_columns": {
            "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "name": "default__test_unique_combination_of_columns",
            "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\r\n\r\n{% if not quote_columns %}\r\n    {%- set column_list=combination_of_columns %}\r\n{% elif quote_columns %}\r\n    {%- set column_list=[] %}\r\n        {% for column in combination_of_columns -%}\r\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\r\n        {%- endfor %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{%- set columns_csv=column_list | join(', ') %}\r\n\r\n\r\nwith validation_errors as (\r\n\r\n    select\r\n        {{ columns_csv }}\r\n    from {{ model }}\r\n    group by {{ columns_csv }}\r\n    having count(*) > 1\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.294999
        },
        "macro.dbt_utils.log_info": {
            "unique_id": "macro.dbt_utils.log_info",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\log_info.sql",
            "original_file_path": "macros\\jinja_helpers\\log_info.sql",
            "name": "log_info",
            "macro_sql": "{% macro log_info(message) %}\r\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__log_info"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2985
        },
        "macro.dbt_utils.default__log_info": {
            "unique_id": "macro.dbt_utils.default__log_info",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\log_info.sql",
            "original_file_path": "macros\\jinja_helpers\\log_info.sql",
            "name": "default__log_info",
            "macro_sql": "{% macro default__log_info(message) %}\r\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.2985
        },
        "macro.dbt_utils.pretty_log_format": {
            "unique_id": "macro.dbt_utils.pretty_log_format",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "name": "pretty_log_format",
            "macro_sql": "{% macro pretty_log_format(message) %}\r\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3020418
        },
        "macro.dbt_utils.default__pretty_log_format": {
            "unique_id": "macro.dbt_utils.default__pretty_log_format",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "name": "default__pretty_log_format",
            "macro_sql": "{% macro default__pretty_log_format(message) %}\r\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3020418
        },
        "macro.dbt_utils.pretty_time": {
            "unique_id": "macro.dbt_utils.pretty_time",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_time.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_time.sql",
            "name": "pretty_time",
            "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\r\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3056107
        },
        "macro.dbt_utils.default__pretty_time": {
            "unique_id": "macro.dbt_utils.default__pretty_time",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_time.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_time.sql",
            "name": "default__pretty_time",
            "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\r\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3056107
        },
        "macro.dbt_utils.slugify": {
            "unique_id": "macro.dbt_utils.slugify",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\jinja_helpers\\slugify.sql",
            "original_file_path": "macros\\jinja_helpers\\slugify.sql",
            "name": "slugify",
            "macro_sql": "{% macro slugify(string) %}\r\n\r\n{#- Lower case the string -#}\r\n{% set string = string | lower %}\r\n{#- Replace spaces and dashes with underscores -#}\r\n{% set string = modules.re.sub('[ -]+', '_', string) %}\r\n{#- Only take letters, numbers, and underscores -#}\r\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\r\n\r\n{{ return(string) }}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3077302
        },
        "macro.dbt_utils.get_period_boundaries": {
            "unique_id": "macro.dbt_utils.get_period_boundaries",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "get_period_boundaries",
            "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\r\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_period_boundaries"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3147545
        },
        "macro.dbt_utils.default__get_period_boundaries": {
            "unique_id": "macro.dbt_utils.default__get_period_boundaries",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "default__get_period_boundaries",
            "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n  {% call statement('period_boundaries', fetch_result=True) -%}\r\n    with data as (\r\n      select\r\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\r\n          coalesce(\r\n            {{dbt_utils.dateadd('millisecond',\r\n                                -1,\r\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\r\n            {{dbt_utils.current_timestamp()}}\r\n          ) as stop_timestamp\r\n      from \"{{target_schema}}\".\"{{target_table}}\"\r\n    )\r\n\r\n    select\r\n      start_timestamp,\r\n      stop_timestamp,\r\n      {{dbt_utils.datediff('start_timestamp',\r\n                           'stop_timestamp',\r\n                           period)}}  + 1 as num_periods\r\n    from data\r\n  {%- endcall %}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.current_timestamp",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3157525
        },
        "macro.dbt_utils.get_period_sql": {
            "unique_id": "macro.dbt_utils.get_period_sql",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "get_period_sql",
            "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_period_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3157525
        },
        "macro.dbt_utils.default__get_period_sql": {
            "unique_id": "macro.dbt_utils.default__get_period_sql",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "default__get_period_sql",
            "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n  {%- set period_filter -%}\r\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\r\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\r\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\r\n  {%- endset -%}\r\n\r\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n  select\r\n    {{target_cols_csv}}\r\n  from (\r\n    {{filtered_sql}}\r\n  )\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3167474
        },
        "macro.dbt_utils.materialization_insert_by_period_default": {
            "unique_id": "macro.dbt_utils.materialization_insert_by_period_default",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "materialization_insert_by_period_default",
            "macro_sql": "{% materialization insert_by_period, default -%}\r\n  {%- set timestamp_field = config.require('timestamp_field') -%}\r\n  {%- set start_date = config.require('start_date') -%}\r\n  {%- set stop_date = config.get('stop_date') or '' -%}\r\n  {%- set period = config.get('period') or 'week' -%}\r\n\r\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\r\n    {%- set error_message -%}\r\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\r\n    {%- endset -%}\r\n    {{ exceptions.raise_compiler_error(error_message) }}\r\n  {%- endif -%}\r\n\r\n  {%- set identifier = model['name'] -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\r\n\r\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\r\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\r\n\r\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\r\n\r\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\r\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\r\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\r\n\r\n  -- setup\r\n  {% if old_relation is none -%}\r\n    -- noop\r\n  {%- elif should_truncate -%}\r\n    {{adapter.truncate_relation(old_relation)}}\r\n  {%- elif should_drop -%}\r\n    {{adapter.drop_relation(old_relation)}}\r\n    {%- set old_relation = none -%}\r\n  {%- endif %}\r\n\r\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\r\n\r\n  -- `begin` happens here, so `commit` after it to finish the transaction\r\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\r\n  {% call statement() -%}\r\n    begin; -- make extra sure we've closed out the transaction\r\n    commit;\r\n  {%- endcall %}\r\n\r\n  -- build model\r\n  {% if force_create or old_relation is none -%}\r\n    {# Create an empty target table -#}\r\n    {% call statement('main') -%}\r\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\r\n      {{create_table_as(False, target_relation, empty_sql)}}\r\n    {%- endcall %}\r\n  {%- endif %}\r\n\r\n  {% set _ = dbt_utils.get_period_boundaries(schema,\r\n                                              identifier,\r\n                                              timestamp_field,\r\n                                              start_date,\r\n                                              stop_date,\r\n                                              period) %}\r\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\r\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\r\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\r\n\r\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\r\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\r\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\r\n\r\n  -- commit each period as a separate transaction\r\n  {% for i in range(num_periods) -%}\r\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\r\n    {{ dbt_utils.log_info(msg) }}\r\n\r\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\r\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\r\n                                               schema=schema, type='table') -%}\r\n    {% call statement() -%}\r\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\r\n                                                       sql,\r\n                                                       timestamp_field,\r\n                                                       period,\r\n                                                       start_timestamp,\r\n                                                       stop_timestamp,\r\n                                                       i) %}\r\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\r\n    {%- endcall %}\r\n\r\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\r\n                                         to_relation=target_relation)}}\r\n    {%- set name = 'main-' ~ i -%}\r\n    {% call statement(name, fetch_result=True) -%}\r\n      insert into {{target_relation}} ({{target_cols_csv}})\r\n      (\r\n          select\r\n              {{target_cols_csv}}\r\n          from {{tmp_relation.include(schema=False)}}\r\n      );\r\n    {%- endcall %}\r\n    {% set result = load_result('main-' ~ i) %}\r\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n        {% set rows_inserted = result['response']['rows_affected'] %}\r\n    {% else %} {# older versions #}\r\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n    {% endif %}\r\n    \r\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\r\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\r\n\r\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\r\n    {{ dbt_utils.log_info(msg) }}\r\n\r\n  {%- endfor %}\r\n\r\n  {% call statement() -%}\r\n    begin;\r\n  {%- endcall %}\r\n\r\n  {{run_hooks(post_hooks, inside_transaction=True)}}\r\n\r\n  {% call statement() -%}\r\n    commit;\r\n  {%- endcall %}\r\n\r\n  {{run_hooks(post_hooks, inside_transaction=False)}}\r\n\r\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\r\n\r\n  {% call noop_statement('main', status_string) -%}\r\n    -- no-op\r\n  {%- endcall %}\r\n\r\n  -- Return the relations created in this materialization\r\n  {{ return({'relations': [target_relation]}) }}  \r\n\r\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt_utils.get_period_boundaries",
                    "macro.dbt_utils.log_info",
                    "macro.dbt_utils.get_period_sql",
                    "macro.dbt.noop_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3247228
        },
        "macro.dbt_utils.get_intervals_between": {
            "unique_id": "macro.dbt_utils.get_intervals_between",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\r\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3307042
        },
        "macro.dbt_utils.default__get_intervals_between": {
            "unique_id": "macro.dbt_utils.default__get_intervals_between",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\r\n    {%- call statement('get_intervals_between', fetch_result=True) %}\r\n\r\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set value_list = load_result('get_intervals_between') -%}\r\n\r\n    {%- if value_list and value_list['data'] -%}\r\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\r\n        {{ return(values[0]) }}\r\n    {%- else -%}\r\n        {{ return(1) }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3316963
        },
        "macro.dbt_utils.date_spine": {
            "unique_id": "macro.dbt_utils.date_spine",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\r\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3316963
        },
        "macro.dbt_utils.default__date_spine": {
            "unique_id": "macro.dbt_utils.default__date_spine",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\r\n\r\n\r\n{# call as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n) #}\r\n\r\n\r\nwith rawdata as (\r\n\r\n    {{dbt_utils.generate_series(\r\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\r\n    )}}\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        {{\r\n            dbt_utils.dateadd(\r\n                datepart,\r\n                \"row_number() over (order by 1) - 1\",\r\n                start_date\r\n            )\r\n        }}\r\n    ) as date_{{datepart}}\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_{{datepart}} <= {{ end_date }}\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_series",
                    "macro.dbt_utils.get_intervals_between",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3326936
        },
        "macro.dbt_utils.deduplicate": {
            "unique_id": "macro.dbt_utils.deduplicate",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "deduplicate",
            "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\r\n\r\n    {%- set error_message_group_by -%}\r\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\r\nUse `partition_by` instead.\r\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\r\n    {%- endset -%}\r\n\r\n    {% if kwargs.get('group_by') %}\r\n    {%- do exceptions.warn(error_message_group_by) -%}\r\n    {%- endif -%}\r\n\r\n    {%- set error_message_order_by -%}\r\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\r\nSupply a non-null value for `order_by` instead.\r\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\r\n    {%- endset -%}\r\n\r\n    {% if not order_by %}\r\n    {%- do exceptions.warn(error_message_order_by) -%}\r\n    {%- endif -%}\r\n\r\n    {%- set error_message_alias -%}\r\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\r\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\r\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\r\n    {%- endset -%}\r\n\r\n    {% if relation_alias %}\r\n    {%- do exceptions.warn(error_message_alias) -%}\r\n    {%- endif -%}\r\n\r\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\r\n    {% set relation = relation_alias or relation %}\r\n    {% set order_by = order_by or \"'1'\" %}\r\n\r\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3379393
        },
        "macro.dbt_utils.default__deduplicate": {
            "unique_id": "macro.dbt_utils.default__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "default__deduplicate",
            "macro_sql": "\r\n\r\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    with row_numbered as (\r\n        select\r\n            _inner.*,\r\n            row_number() over (\r\n                partition by {{ partition_by }}\r\n                order by {{ order_by }}\r\n            ) as rn\r\n        from {{ relation }} as _inner\r\n    )\r\n\r\n    select\r\n        distinct data.*\r\n    from {{ relation }} as data\r\n    {#\r\n    -- Not all DBs will support natural joins but the ones that do include:\r\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\r\n    -- Apache Spark, SingleStore, Vertica\r\n    -- Those that do not appear to support natural joins include:\r\n    -- SQLServer, Trino, Presto, Rockset, Athena\r\n    #}\r\n    natural join row_numbered\r\n    where row_numbered.rn = 1\r\n\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3389559
        },
        "macro.dbt_utils.redshift__deduplicate": {
            "unique_id": "macro.dbt_utils.redshift__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "redshift__deduplicate",
            "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3389559
        },
        "macro.dbt_utils.postgres__deduplicate": {
            "unique_id": "macro.dbt_utils.postgres__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "postgres__deduplicate",
            "macro_sql": "\r\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    select\r\n        distinct on ({{ partition_by }}) *\r\n    from {{ relation }}\r\n    order by {{ partition_by }}{{ ',' ~ order_by }}\r\n\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3389559
        },
        "macro.dbt_utils.snowflake__deduplicate": {
            "unique_id": "macro.dbt_utils.snowflake__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "snowflake__deduplicate",
            "macro_sql": "\r\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    select *\r\n    from {{ relation }}\r\n    qualify\r\n        row_number() over (\r\n            partition by {{ partition_by }}\r\n            order by {{ order_by }}\r\n        ) = 1\r\n\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.33993
        },
        "macro.dbt_utils.bigquery__deduplicate": {
            "unique_id": "macro.dbt_utils.bigquery__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "bigquery__deduplicate",
            "macro_sql": "\r\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    select unique.*\r\n    from (\r\n        select\r\n            array_agg (\r\n                original\r\n                order by {{ order_by }}\r\n                limit 1\r\n            )[offset(0)] unique\r\n        from {{ relation }} original\r\n        group by {{ partition_by }}\r\n    )\r\n\r\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.33993
        },
        "macro.dbt_utils.get_powers_of_two": {
            "unique_id": "macro.dbt_utils.get_powers_of_two",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\r\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3429465
        },
        "macro.dbt_utils.default__get_powers_of_two": {
            "unique_id": "macro.dbt_utils.default__get_powers_of_two",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\r\n\r\n    {% if upper_bound <= 0 %}\r\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\r\n    {% endif %}\r\n\r\n    {% for _ in range(1, 100) %}\r\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\r\n    {% endfor %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3429465
        },
        "macro.dbt_utils.generate_series": {
            "unique_id": "macro.dbt_utils.generate_series",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\r\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3439474
        },
        "macro.dbt_utils.default__generate_series": {
            "unique_id": "macro.dbt_utils.default__generate_series",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\r\n\r\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    {% for i in range(n) %}\r\n    p{{i}}.generated_number * power(2, {{i}})\r\n    {% if not loop.last %} + {% endif %}\r\n    {% endfor %}\r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    {% for i in range(n) %}\r\n    p as p{{i}}\r\n    {% if not loop.last %} cross join {% endif %}\r\n    {% endfor %}\r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= {{upper_bound}}\r\n    order by generated_number\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3439474
        },
        "macro.dbt_utils.get_column_values": {
            "unique_id": "macro.dbt_utils.get_column_values",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_column_values.sql",
            "original_file_path": "macros\\sql\\get_column_values.sql",
            "name": "get_column_values",
            "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\r\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_column_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3478122
        },
        "macro.dbt_utils.default__get_column_values": {
            "unique_id": "macro.dbt_utils.default__get_column_values",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_column_values.sql",
            "original_file_path": "macros\\sql\\get_column_values.sql",
            "name": "default__get_column_values",
            "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% set default = [] if not default %}\r\n        {{ return(default) }}\r\n    {% endif %}\r\n\r\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\r\n\r\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\r\n    {# TODO: Change the method signature in a future 0.x.0 release #}\r\n    {%- set target_relation = table -%}\r\n\r\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\r\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\r\n\r\n    {%- call statement('get_column_values', fetch_result=true) %}\r\n\r\n        {%- if not relation_exists and default is none -%}\r\n\r\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\r\n\r\n        {%- elif not relation_exists and default is not none -%}\r\n\r\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\r\n\r\n          {{ return(default) }}\r\n\r\n        {%- else -%}\r\n\r\n\r\n            select\r\n                {{ column }} as value\r\n\r\n            from {{ target_relation }}\r\n\r\n            {% if where is not none %}\r\n            where {{ where }}\r\n            {% endif %}\r\n\r\n            group by {{ column }}\r\n            order by {{ order_by }}\r\n\r\n            {% if max_records is not none %}\r\n            limit {{ max_records }}\r\n            {% endif %}\r\n\r\n        {% endif %}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set value_list = load_result('get_column_values') -%}\r\n\r\n    {%- if value_list and value_list['data'] -%}\r\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\r\n        {{ return(values) }}\r\n    {%- else -%}\r\n        {{ return(default) }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.load_relation",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3508043
        },
        "macro.dbt_utils.get_filtered_columns_in_relation": {
            "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "name": "get_filtered_columns_in_relation",
            "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\r\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3529887
        },
        "macro.dbt_utils.default__get_filtered_columns_in_relation": {
            "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "name": "default__get_filtered_columns_in_relation",
            "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\r\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\r\n\r\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {{ return('') }}\r\n    {% endif %}\r\n\r\n    {%- set include_cols = [] %}\r\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\r\n    {%- set except = except | map(\"lower\") | list %}\r\n    {%- for col in cols -%}\r\n        {%- if col.column|lower not in except -%}\r\n            {% do include_cols.append(col.column) %}\r\n        {%- endif %}\r\n    {%- endfor %}\r\n\r\n    {{ return(include_cols) }}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3550332
        },
        "macro.dbt_utils.get_query_results_as_dict": {
            "unique_id": "macro.dbt_utils.get_query_results_as_dict",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_query_results_as_dict.sql",
            "original_file_path": "macros\\sql\\get_query_results_as_dict.sql",
            "name": "get_query_results_as_dict",
            "macro_sql": "{% macro get_query_results_as_dict(query) %}\r\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_query_results_as_dict"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3578146
        },
        "macro.dbt_utils.default__get_query_results_as_dict": {
            "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_query_results_as_dict.sql",
            "original_file_path": "macros\\sql\\get_query_results_as_dict.sql",
            "name": "default__get_query_results_as_dict",
            "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\r\n\r\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\r\n\r\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\r\n\r\n        {{ query }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {% set sql_results={} %}\r\n\r\n    {%- if execute -%}\r\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\r\n        {% for column_name, column in sql_results_table.items() %}\r\n            {% do sql_results.update({column_name: column.values()}) %}\r\n        {% endfor %}\r\n    {%- endif -%}\r\n\r\n    {{ return(sql_results) }}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3588252
        },
        "macro.dbt_utils.get_relations_by_pattern": {
            "unique_id": "macro.dbt_utils.get_relations_by_pattern",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_pattern.sql",
            "original_file_path": "macros\\sql\\get_relations_by_pattern.sql",
            "name": "get_relations_by_pattern",
            "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_pattern"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3625317
        },
        "macro.dbt_utils.default__get_relations_by_pattern": {
            "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_pattern.sql",
            "original_file_path": "macros\\sql\\get_relations_by_pattern.sql",
            "name": "default__get_relations_by_pattern",
            "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n    {%- call statement('get_tables', fetch_result=True) %}\r\n\r\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set table_list = load_result('get_tables') -%}\r\n\r\n    {%- if table_list and table_list['table'] -%}\r\n        {%- set tbl_relations = [] -%}\r\n        {%- for row in table_list['table'] -%}\r\n            {%- set tbl_relation = api.Relation.create(\r\n                database=database,\r\n                schema=row.table_schema,\r\n                identifier=row.table_name,\r\n                type=row.table_type\r\n            ) -%}\r\n            {%- do tbl_relations.append(tbl_relation) -%}\r\n        {%- endfor -%}\r\n\r\n        {{ return(tbl_relations) }}\r\n    {%- else -%}\r\n        {{ return([]) }}\r\n    {%- endif -%}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3635237
        },
        "macro.dbt_utils.get_relations_by_prefix": {
            "unique_id": "macro.dbt_utils.get_relations_by_prefix",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_prefix.sql",
            "original_file_path": "macros\\sql\\get_relations_by_prefix.sql",
            "name": "get_relations_by_prefix",
            "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_prefix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3669357
        },
        "macro.dbt_utils.default__get_relations_by_prefix": {
            "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_prefix.sql",
            "original_file_path": "macros\\sql\\get_relations_by_prefix.sql",
            "name": "default__get_relations_by_prefix",
            "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\r\n\r\n    {%- call statement('get_tables', fetch_result=True) %}\r\n\r\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set table_list = load_result('get_tables') -%}\r\n\r\n    {%- if table_list and table_list['table'] -%}\r\n        {%- set tbl_relations = [] -%}\r\n        {%- for row in table_list['table'] -%}\r\n            {%- set tbl_relation = api.Relation.create(\r\n                database=database,\r\n                schema=row.table_schema,\r\n                identifier=row.table_name,\r\n                type=row.table_type\r\n            ) -%}\r\n            {%- do tbl_relations.append(tbl_relation) -%}\r\n        {%- endfor -%}\r\n\r\n        {{ return(tbl_relations) }}\r\n    {%- else -%}\r\n        {{ return([]) }}\r\n    {%- endif -%}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3679104
        },
        "macro.dbt_utils.get_table_types_sql": {
            "unique_id": "macro.dbt_utils.get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "name": "get_table_types_sql",
            "macro_sql": "{%- macro get_table_types_sql() -%}\r\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3710358
        },
        "macro.dbt_utils.default__get_table_types_sql": {
            "unique_id": "macro.dbt_utils.default__get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "name": "default__get_table_types_sql",
            "macro_sql": "{% macro default__get_table_types_sql() %}\r\n            case table_type\r\n                when 'BASE TABLE' then 'table'\r\n                when 'EXTERNAL TABLE' then 'external'\r\n                when 'MATERIALIZED VIEW' then 'materializedview'\r\n                else lower(table_type)\r\n            end as \"table_type\"\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3710358
        },
        "macro.dbt_utils.postgres__get_table_types_sql": {
            "unique_id": "macro.dbt_utils.postgres__get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "name": "postgres__get_table_types_sql",
            "macro_sql": "{% macro postgres__get_table_types_sql() %}\r\n            case table_type\r\n                when 'BASE TABLE' then 'table'\r\n                when 'FOREIGN' then 'external'\r\n                when 'MATERIALIZED VIEW' then 'materializedview'\r\n                else lower(table_type)\r\n            end as \"table_type\"\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3710358
        },
        "macro.dbt_utils.bigquery__get_table_types_sql": {
            "unique_id": "macro.dbt_utils.bigquery__get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "name": "bigquery__get_table_types_sql",
            "macro_sql": "{% macro bigquery__get_table_types_sql() %}\r\n            case table_type\r\n                when 'BASE TABLE' then 'table'\r\n                when 'EXTERNAL TABLE' then 'external'\r\n                when 'MATERIALIZED VIEW' then 'materializedview'\r\n                else lower(table_type)\r\n            end as `table_type`\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3710358
        },
        "macro.dbt_utils.get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "get_tables_by_pattern_sql",
            "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\r\n        (schema_pattern, table_pattern, exclude, database)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3765397
        },
        "macro.dbt_utils.default__get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "default__get_tables_by_pattern_sql",
            "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n        select distinct\r\n            table_schema as \"table_schema\",\r\n            table_name as \"table_name\",\r\n            {{ dbt_utils.get_table_types_sql() }}\r\n        from {{ database }}.information_schema.tables\r\n        where table_schema ilike '{{ schema_pattern }}'\r\n        and table_name ilike '{{ table_pattern }}'\r\n        and table_name not ilike '{{ exclude }}'\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3765397
        },
        "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "bigquery__get_tables_by_pattern_sql",
            "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n    {% if '%' in schema_pattern %}\r\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\r\n    {% else %}\r\n        {% set schemata=[schema_pattern] %}\r\n    {% endif %}\r\n\r\n    {% set sql %}\r\n        {% for schema in schemata %}\r\n            select distinct\r\n                table_schema,\r\n                table_name,\r\n                {{ dbt_utils.get_table_types_sql() }}\r\n\r\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\r\n            where lower(table_name) like lower ('{{ table_pattern }}')\r\n                and lower(table_name) not like lower ('{{ exclude }}')\r\n\r\n            {% if not loop.last %} union all {% endif %}\r\n\r\n        {% endfor %}\r\n    {% endset %}\r\n\r\n    {{ return(sql) }}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._bigquery__get_matching_schemata",
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3785326
        },
        "macro.dbt_utils._bigquery__get_matching_schemata": {
            "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "_bigquery__get_matching_schemata",
            "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\r\n    {% if execute %}\r\n\r\n        {% set sql %}\r\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\r\n        where lower(schema_name) like lower('{{ schema_pattern }}')\r\n        {% endset %}\r\n\r\n        {% set results=run_query(sql) %}\r\n\r\n        {% set schemata=results.columns['schema_name'].values() %}\r\n\r\n        {{ return(schemata) }}\r\n\r\n    {% else %}\r\n\r\n        {{ return([]) }}\r\n\r\n    {% endif %}\r\n\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.380526
        },
        "macro.dbt_utils.get_tables_by_prefix_sql": {
            "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "name": "get_tables_by_prefix_sql",
            "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3851511
        },
        "macro.dbt_utils.default__get_tables_by_prefix_sql": {
            "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "name": "default__get_tables_by_prefix_sql",
            "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\r\n\r\n    {{ dbt_utils.get_tables_by_pattern_sql(\r\n        schema_pattern = schema,\r\n        table_pattern = prefix ~ '%',\r\n        exclude = exclude,\r\n        database = database\r\n    ) }}\r\n    \r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3861473
        },
        "macro.dbt_utils.group_by": {
            "unique_id": "macro.dbt_utils.group_by",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\groupby.sql",
            "original_file_path": "macros\\sql\\groupby.sql",
            "name": "group_by",
            "macro_sql": "{%- macro group_by(n) -%}\r\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__group_by"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3922787
        },
        "macro.dbt_utils.default__group_by": {
            "unique_id": "macro.dbt_utils.default__group_by",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\groupby.sql",
            "original_file_path": "macros\\sql\\groupby.sql",
            "name": "default__group_by",
            "macro_sql": "\r\n\r\n{%- macro default__group_by(n) -%}\r\n\r\n  group by {% for i in range(1, n + 1) -%}\r\n      {{ i }}{{ ',' if not loop.last }}   \r\n   {%- endfor -%}\r\n\r\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3933055
        },
        "macro.dbt_utils.degrees_to_radians": {
            "unique_id": "macro.dbt_utils.degrees_to_radians",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "degrees_to_radians",
            "macro_sql": "{% macro degrees_to_radians(degrees) -%}\r\n    acos(-1) * {{degrees}} / 180\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3986776
        },
        "macro.dbt_utils.haversine_distance": {
            "unique_id": "macro.dbt_utils.haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "haversine_distance",
            "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\r\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__haversine_distance"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.3996742
        },
        "macro.dbt_utils.default__haversine_distance": {
            "unique_id": "macro.dbt_utils.default__haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "default__haversine_distance",
            "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\r\n{%- if unit == 'mi' %}\r\n    {% set conversion_rate = 1 %}\r\n{% elif unit == 'km' %}\r\n    {% set conversion_rate = 1.60934 %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\r\n{% endif %}\r\n\r\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\r\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\r\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4006708
        },
        "macro.dbt_utils.bigquery__haversine_distance": {
            "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "bigquery__haversine_distance",
            "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\r\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\r\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\r\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\r\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\r\n{%- if unit == 'mi' %}\r\n    {% set conversion_rate = 1 %}\r\n{% elif unit == 'km' %}\r\n    {% set conversion_rate = 1.60934 %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\r\n{% endif %}\r\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\r\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\r\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.degrees_to_radians"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4026637
        },
        "macro.dbt_utils.nullcheck": {
            "unique_id": "macro.dbt_utils.nullcheck",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\nullcheck.sql",
            "original_file_path": "macros\\sql\\nullcheck.sql",
            "name": "nullcheck",
            "macro_sql": "{% macro nullcheck(cols) %}\r\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.405788
        },
        "macro.dbt_utils.default__nullcheck": {
            "unique_id": "macro.dbt_utils.default__nullcheck",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\nullcheck.sql",
            "original_file_path": "macros\\sql\\nullcheck.sql",
            "name": "default__nullcheck",
            "macro_sql": "{% macro default__nullcheck(cols) %}\r\n{%- for col in cols %}\r\n\r\n    {% if col.is_string() -%}\r\n\r\n    nullif({{col.name}},'') as {{col.name}}\r\n\r\n    {%- else -%}\r\n\r\n    {{col.name}}\r\n\r\n    {%- endif -%}\r\n\r\n{%- if not loop.last -%} , {%- endif -%}\r\n\r\n{%- endfor -%}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4072351
        },
        "macro.dbt_utils.nullcheck_table": {
            "unique_id": "macro.dbt_utils.nullcheck_table",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\nullcheck_table.sql",
            "original_file_path": "macros\\sql\\nullcheck_table.sql",
            "name": "nullcheck_table",
            "macro_sql": "{% macro nullcheck_table(relation) %}\r\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4097707
        },
        "macro.dbt_utils.default__nullcheck_table": {
            "unique_id": "macro.dbt_utils.default__nullcheck_table",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\nullcheck_table.sql",
            "original_file_path": "macros\\sql\\nullcheck_table.sql",
            "name": "default__nullcheck_table",
            "macro_sql": "{% macro default__nullcheck_table(relation) %}\r\n\r\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\r\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\r\n  {% set cols = adapter.get_columns_in_relation(relation) %}\r\n\r\n  select {{ dbt_utils.nullcheck(cols) }}\r\n  from {{relation}}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4110413
        },
        "macro.dbt_utils.pivot": {
            "unique_id": "macro.dbt_utils.pivot",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\pivot.sql",
            "original_file_path": "macros\\sql\\pivot.sql",
            "name": "pivot",
            "macro_sql": "{% macro pivot(column,\r\n               values,\r\n               alias=True,\r\n               agg='sum',\r\n               cmp='=',\r\n               prefix='',\r\n               suffix='',\r\n               then_value=1,\r\n               else_value=0,\r\n               quote_identifiers=True,\r\n               distinct=False) %}\r\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.415573
        },
        "macro.dbt_utils.default__pivot": {
            "unique_id": "macro.dbt_utils.default__pivot",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\pivot.sql",
            "original_file_path": "macros\\sql\\pivot.sql",
            "name": "default__pivot",
            "macro_sql": "{% macro default__pivot(column,\r\n               values,\r\n               alias=True,\r\n               agg='sum',\r\n               cmp='=',\r\n               prefix='',\r\n               suffix='',\r\n               then_value=1,\r\n               else_value=0,\r\n               quote_identifiers=True,\r\n               distinct=False) %}\r\n  {% for value in values %}\r\n    {{ agg }}(\r\n      {% if distinct %} distinct {% endif %}\r\n      case\r\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\r\n        then {{ then_value }}\r\n      else {{ else_value }}\r\n      end\r\n    )\r\n    {% if alias %}\r\n      {% if quote_identifiers %}\r\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\r\n      {% else %}\r\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\r\n      {% endif %}\r\n    {% endif %}\r\n    {% if not loop.last %},{% endif %}\r\n  {% endfor %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.escape_single_quotes",
                    "macro.dbt_utils.slugify"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4165728
        },
        "macro.dbt_utils.safe_add": {
            "unique_id": "macro.dbt_utils.safe_add",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\safe_add.sql",
            "original_file_path": "macros\\sql\\safe_add.sql",
            "name": "safe_add",
            "macro_sql": "{%- macro safe_add() -%}\r\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\r\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\r\n    {% set frustrating_jinja_feature = varargs %}\r\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_add"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4214413
        },
        "macro.dbt_utils.default__safe_add": {
            "unique_id": "macro.dbt_utils.default__safe_add",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\safe_add.sql",
            "original_file_path": "macros\\sql\\safe_add.sql",
            "name": "default__safe_add",
            "macro_sql": "\r\n\r\n{%- macro default__safe_add() -%}\r\n\r\n{% set fields = [] %}\r\n\r\n{%- for field in varargs -%}\r\n\r\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\r\n\r\n{%- endfor -%}\r\n\r\n{{ fields|join(' +\\n  ') }}\r\n\r\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4224403
        },
        "macro.dbt_utils.star": {
            "unique_id": "macro.dbt_utils.star",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\star.sql",
            "original_file_path": "macros\\sql\\star.sql",
            "name": "star",
            "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__star"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4271789
        },
        "macro.dbt_utils.default__star": {
            "unique_id": "macro.dbt_utils.default__star",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\star.sql",
            "original_file_path": "macros\\sql\\star.sql",
            "name": "default__star",
            "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {{ return('*') }}\r\n    {% endif %}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n      {{- return('*') -}}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4291716
        },
        "macro.dbt_utils.surrogate_key": {
            "unique_id": "macro.dbt_utils.surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\surrogate_key.sql",
            "original_file_path": "macros\\sql\\surrogate_key.sql",
            "name": "surrogate_key",
            "macro_sql": "{%- macro surrogate_key(field_list) -%}\r\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\r\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\r\n    {% set frustrating_jinja_feature = varargs %}\r\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4336905
        },
        "macro.dbt_utils.default__surrogate_key": {
            "unique_id": "macro.dbt_utils.default__surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\surrogate_key.sql",
            "original_file_path": "macros\\sql\\surrogate_key.sql",
            "name": "default__surrogate_key",
            "macro_sql": "\r\n\r\n{%- macro default__surrogate_key(field_list) -%}\r\n\r\n{%- if varargs|length >= 1 or field_list is string %}\r\n\r\n{%- set error_message = '\r\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\r\nmultiple string arguments. Support for multiple string arguments will be \\\r\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\r\n'.format(model.package_name, model.name) -%}\r\n\r\n{%- do exceptions.warn(error_message) -%}\r\n\r\n{# first argument is not included in varargs, so add first element to field_list_xf #}\r\n{%- set field_list_xf = [field_list] -%}\r\n\r\n{%- for field in varargs %}\r\n{%- set _ = field_list_xf.append(field) -%}\r\n{%- endfor -%}\r\n\r\n{%- else -%}\r\n\r\n{# if using list, just set field_list_xf as field_list #}\r\n{%- set field_list_xf = field_list -%}\r\n\r\n{%- endif -%}\r\n\r\n\r\n{%- set fields = [] -%}\r\n\r\n{%- for field in field_list_xf -%}\r\n\r\n    {%- set _ = fields.append(\r\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\r\n    ) -%}\r\n\r\n    {%- if not loop.last %}\r\n        {%- set _ = fields.append(\"'-'\") -%}\r\n    {%- endif -%}\r\n\r\n{%- endfor -%}\r\n\r\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\r\n\r\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.hash",
                    "macro.dbt_utils.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.435681
        },
        "macro.dbt_utils.union_relations": {
            "unique_id": "macro.dbt_utils.union_relations",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\union.sql",
            "original_file_path": "macros\\sql\\union.sql",
            "name": "union_relations",
            "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\r\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__union_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4404073
        },
        "macro.dbt_utils.default__union_relations": {
            "unique_id": "macro.dbt_utils.default__union_relations",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\union.sql",
            "original_file_path": "macros\\sql\\union.sql",
            "name": "default__union_relations",
            "macro_sql": "\r\n\r\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\r\n\r\n    {%- if exclude and include -%}\r\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\r\n    {%- endif -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\r\n    {%- if not execute %}\r\n        {{ return('') }}\r\n    {% endif -%}\r\n\r\n    {%- set column_override = column_override if column_override is not none else {} -%}\r\n\r\n    {%- set relation_columns = {} -%}\r\n    {%- set column_superset = {} -%}\r\n\r\n    {%- for relation in relations -%}\r\n\r\n        {%- do relation_columns.update({relation: []}) -%}\r\n\r\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\r\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\r\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\r\n        {%- for col in cols -%}\r\n\r\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\r\n        {%- if exclude and col.column in exclude -%}\r\n\r\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\r\n        {%- elif include and col.column not in include -%}\r\n\r\n        {#- Otherwise add the column to the column superset -#}\r\n        {%- else -%}\r\n\r\n            {#- update the list of columns in this relation -#}\r\n            {%- do relation_columns[relation].append(col.column) -%}\r\n\r\n            {%- if col.column in column_superset -%}\r\n\r\n                {%- set stored = column_superset[col.column] -%}\r\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\r\n\r\n                    {%- do column_superset.update({col.column: col}) -%}\r\n\r\n                {%- endif %}\r\n\r\n            {%- else -%}\r\n\r\n                {%- do column_superset.update({col.column: col}) -%}\r\n\r\n            {%- endif -%}\r\n\r\n        {%- endif -%}\r\n\r\n        {%- endfor -%}\r\n    {%- endfor -%}\r\n\r\n    {%- set ordered_column_names = column_superset.keys() -%}\r\n    {%- set dbt_command = flags.WHICH -%}\r\n\r\n\r\n    {% if dbt_command in ['run', 'build'] %}\r\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\r\n        {%- set relations_string -%}\r\n            {%- for relation in relations -%}\r\n                {{ relation.name }}\r\n            {%- if not loop.last %}, {% endif -%}\r\n            {%- endfor -%}\r\n        {%- endset -%}\r\n\r\n        {%- set error_message -%}\r\n            There were no columns found to union for relations {{ relations_string }}\r\n        {%- endset -%}\r\n\r\n        {{ exceptions.raise_compiler_error(error_message) }}\r\n    {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {%- for relation in relations %}\r\n\r\n        (\r\n            select\r\n\r\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\r\n                {% for col_name in ordered_column_names -%}\r\n\r\n                    {%- set col = column_superset[col_name] %}\r\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\r\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\r\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\r\n\r\n                {%- endfor %}\r\n\r\n            from {{ relation }}\r\n\r\n            {% if where -%}\r\n            where {{ where }}\r\n            {%- endif %}\r\n        )\r\n\r\n        {% if not loop.last -%}\r\n            union all\r\n        {% endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.string_literal",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.445395
        },
        "macro.dbt_utils.unpivot": {
            "unique_id": "macro.dbt_utils.unpivot",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\unpivot.sql",
            "original_file_path": "macros\\sql\\unpivot.sql",
            "name": "unpivot",
            "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\r\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__unpivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.45021
        },
        "macro.dbt_utils.default__unpivot": {
            "unique_id": "macro.dbt_utils.default__unpivot",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\sql\\unpivot.sql",
            "original_file_path": "macros\\sql\\unpivot.sql",
            "name": "default__unpivot",
            "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\r\n\r\n    {% if table %}\r\n        {%- set error_message = '\r\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\r\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\r\n            The {}.{} model triggered this warning. \\\r\n            '.format(model.package_name, model.name) -%}\r\n        {%- do exceptions.warn(error_message) -%}\r\n    {% endif %}\r\n\r\n    {% if relation and table %}\r\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\r\n    {% elif not relation and table %}\r\n        {% set relation=table %}\r\n    {% elif not relation and not table %}\r\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\r\n    {% endif %}\r\n\r\n  {%- set exclude = exclude if exclude is not none else [] %}\r\n  {%- set remove = remove if remove is not none else [] %}\r\n\r\n  {%- set include_cols = [] %}\r\n\r\n  {%- set table_columns = {} %}\r\n\r\n  {%- do table_columns.update({relation: []}) %}\r\n\r\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\r\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\r\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\r\n\r\n  {%- for col in cols -%}\r\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\r\n      {% do include_cols.append(col) %}\r\n    {%- endif %}\r\n  {%- endfor %}\r\n\r\n\r\n  {%- for col in include_cols -%}\r\n    select\r\n      {%- for exclude_col in exclude %}\r\n        {{ exclude_col }},\r\n      {%- endfor %}\r\n\r\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\r\n      cast(  {% if col.data_type == 'boolean' %}\r\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\r\n             {% else %}\r\n           {{ col.column }}\r\n             {% endif %}\r\n           as {{ cast_to }}) as {{ value_name }}\r\n\r\n    from {{ relation }}\r\n\r\n    {% if not loop.last -%}\r\n      union all\r\n    {% endif -%}\r\n  {%- endfor -%}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4532032
        },
        "macro.dbt_utils.get_url_host": {
            "unique_id": "macro.dbt_utils.get_url_host",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\web\\get_url_host.sql",
            "original_file_path": "macros\\web\\get_url_host.sql",
            "name": "get_url_host",
            "macro_sql": "{% macro get_url_host(field) -%}\r\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_host"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4563107
        },
        "macro.dbt_utils.default__get_url_host": {
            "unique_id": "macro.dbt_utils.default__get_url_host",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\web\\get_url_host.sql",
            "original_file_path": "macros\\web\\get_url_host.sql",
            "name": "default__get_url_host",
            "macro_sql": "{% macro default__get_url_host(field) -%}\r\n\r\n{%- set parsed =\r\n    dbt_utils.split_part(\r\n        dbt_utils.split_part(\r\n            dbt_utils.replace(\r\n                dbt_utils.replace(\r\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\r\n                    ), \"'http://'\", \"''\"\r\n                ), \"'https://'\", \"''\"\r\n            ), \"'/'\", 1\r\n        ), \"'?'\", 1\r\n    )\r\n\r\n-%}\r\n\r\n\r\n    {{ dbt_utils.safe_cast(\r\n        parsed,\r\n        dbt_utils.type_string()\r\n        )}}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.split_part",
                    "macro.dbt_utils.replace",
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4583607
        },
        "macro.dbt_utils.get_url_parameter": {
            "unique_id": "macro.dbt_utils.get_url_parameter",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\web\\get_url_parameter.sql",
            "original_file_path": "macros\\web\\get_url_parameter.sql",
            "name": "get_url_parameter",
            "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\r\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_parameter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4610014
        },
        "macro.dbt_utils.default__get_url_parameter": {
            "unique_id": "macro.dbt_utils.default__get_url_parameter",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\web\\get_url_parameter.sql",
            "original_file_path": "macros\\web\\get_url_parameter.sql",
            "name": "default__get_url_parameter",
            "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\r\n\r\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\r\n\r\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\r\n\r\nnullif({{ split }},'')\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.462055
        },
        "macro.dbt_utils.get_url_path": {
            "unique_id": "macro.dbt_utils.get_url_path",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\web\\get_url_path.sql",
            "original_file_path": "macros\\web\\get_url_path.sql",
            "name": "get_url_path",
            "macro_sql": "{% macro get_url_path(field) -%}\r\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_path"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4666848
        },
        "macro.dbt_utils.default__get_url_path": {
            "unique_id": "macro.dbt_utils.default__get_url_path",
            "package_name": "dbt_utils",
            "root_path": "H:\\My Drive\\dbt\\dbt_datanl_prod\\dbt_packages\\dbt_utils",
            "path": "macros\\web\\get_url_path.sql",
            "original_file_path": "macros\\web\\get_url_path.sql",
            "name": "default__get_url_path",
            "macro_sql": "{% macro default__get_url_path(field) -%}\r\n\r\n    {%- set stripped_url = \r\n        dbt_utils.replace(\r\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\r\n    -%}\r\n\r\n    {%- set first_slash_pos -%}\r\n        coalesce(\r\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\r\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\r\n            )\r\n    {%- endset -%}\r\n\r\n    {%- set parsed_path =\r\n        dbt_utils.split_part(\r\n            dbt_utils.right(\r\n                stripped_url, \r\n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\r\n                ), \r\n            \"'?'\", 1\r\n            )\r\n    -%}\r\n\r\n    {{ dbt_utils.safe_cast(\r\n        parsed_path,\r\n        dbt_utils.type_string()\r\n    )}}\r\n    \r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt_utils.position",
                    "macro.dbt_utils.split_part",
                    "macro.dbt_utils.right",
                    "macro.dbt_utils.length",
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1660305773.4676785
        }
    },
    "docs": {
        "dbt.__overview__": {
            "unique_id": "dbt.__overview__",
            "package_name": "dbt",
            "root_path": "C:\\Users\\mmahda21\\Anaconda3\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "overview.md",
            "original_file_path": "docs\\overview.md",
            "name": "__overview__",
            "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
        }
    },
    "exposures": {},
    "metrics": {},
    "selectors": {},
    "disabled": {},
    "parent_map": {
        "model.dbt_datanl_prod.fct_crc_tickets": [
            "model.dbt_datanl_prod.zendesk_tickets"
        ],
        "model.dbt_datanl_prod.zendesk_customf": [
            "source.dbt_datanl_prod.zendesk.src_zendesk_customf"
        ],
        "model.dbt_datanl_prod.zendesk_tickets": [
            "source.dbt_datanl_prod.zendesk.src_zendesk_tickets"
        ],
        "test.dbt_datanl_prod.unique_zendesk_tickets_ticket_id.033781ea12": [
            "model.dbt_datanl_prod.zendesk_tickets"
        ],
        "test.dbt_datanl_prod.not_null_zendesk_tickets_ticket_id.3e2640a89b": [
            "model.dbt_datanl_prod.zendesk_tickets"
        ],
        "test.dbt_datanl_prod.unique_zendesk_customf_id.36444af5c9": [
            "model.dbt_datanl_prod.zendesk_customf"
        ],
        "test.dbt_datanl_prod.not_null_zendesk_customf_id.0077092197": [
            "model.dbt_datanl_prod.zendesk_customf"
        ],
        "model.dbt_datanl_prod.stg_f_delivery_header_2021": [
            "source.dbt_datanl_prod.redshift.src_f_delivery_header_2021"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_sustainable_current": [
            "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_current"
        ],
        "model.dbt_datanl_prod.stg_physical_stock_snapshot": [
            "source.dbt_datanl_prod.redshift.src_physical_stock_snapshot"
        ],
        "model.dbt_datanl_prod.stg_d_week": [
            "source.dbt_datanl_prod.redshift.src_d_week"
        ],
        "model.dbt_datanl_prod.stg_d_business_unit": [
            "source.dbt_datanl_prod.redshift.src_d_business_unit"
        ],
        "model.dbt_datanl_prod.stg_d_return_reason": [
            "source.dbt_datanl_prod.redshift.src_d_return_reason"
        ],
        "model.dbt_datanl_prod.stg_weight_dimension_finish_product": [
            "source.dbt_datanl_prod.redshift.src_weight_dimension_finish_product"
        ],
        "model.dbt_datanl_prod.stg_d_sku": [
            "source.dbt_datanl_prod.redshift.src_d_sku"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_header_2021": [
            "source.dbt_datanl_prod.redshift.src_f_transaction_header_2021"
        ],
        "model.dbt_datanl_prod.stg_d_mkp_product": [
            "source.dbt_datanl_prod.redshift.src_d_mkp_product"
        ],
        "model.dbt_datanl_prod.stg_d_sport_dpt": [
            "source.dbt_datanl_prod.redshift.src_d_sport_dpt"
        ],
        "model.dbt_datanl_prod.stg_opv_review__review": [
            "source.dbt_datanl_prod.redshift.src_opv_review__review"
        ],
        "model.dbt_datanl_prod.stg_lib_web_order_status": [
            "source.dbt_datanl_prod.redshift.src_lib_web_order_status"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_detail_2020": [
            "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2020"
        ],
        "model.dbt_datanl_prod.stg_f_delivery_detail_2019": [
            "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2019"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_header_current": [
            "source.dbt_datanl_prod.redshift.src_f_transaction_header_current"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_sustainable_2021": [
            "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2021"
        ],
        "model.dbt_datanl_prod.stg_zsd_oms_ordtrkhi": [
            "source.dbt_datanl_prod.redshift.src_zsd_oms_ordtrkhi"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_sustainable_2019": [
            "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2019"
        ],
        "model.dbt_datanl_prod.stg_d_shipping_type": [
            "source.dbt_datanl_prod.redshift.src_d_shipping_type"
        ],
        "model.dbt_datanl_prod.stg_f_supply_vc4r_retbox": [
            "source.dbt_datanl_prod.redshift.src_f_supply_vc4r_retbox"
        ],
        "model.dbt_datanl_prod.stg_d_merchandise_hierarchy": [
            "source.dbt_datanl_prod.redshift.src_d_merchandise_hierarchy"
        ],
        "model.dbt_datanl_prod.stg_d_family": [
            "source.dbt_datanl_prod.redshift.src_d_family"
        ],
        "model.dbt_datanl_prod.stg_f_delivery_detail_2020": [
            "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2020"
        ],
        "model.dbt_datanl_prod.stg_d_label": [
            "source.dbt_datanl_prod.redshift.src_d_label"
        ],
        "model.dbt_datanl_prod.stg_f_delivery_header_current": [
            "source.dbt_datanl_prod.redshift.src_f_delivery_header_current"
        ],
        "model.dbt_datanl_prod.stg_opv_user__author": [
            "source.dbt_datanl_prod.redshift.src_opv_user__author"
        ],
        "model.dbt_datanl_prod.stg_needs_car_autoflow": [
            "source.dbt_datanl_prod.redshift.src_needs_car_autoflow"
        ],
        "model.dbt_datanl_prod.stg_f_delivery_detail_2021": [
            "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2021"
        ],
        "model.dbt_datanl_prod.stg_f_delivery_header_2020": [
            "source.dbt_datanl_prod.redshift.src_f_delivery_header_2020"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_header_2019": [
            "source.dbt_datanl_prod.redshift.src_f_transaction_header_2019"
        ],
        "model.dbt_datanl_prod.stg_d_customers": [
            "source.dbt_datanl_prod.redshift.src_d_customers"
        ],
        "model.dbt_datanl_prod.stg_f_mkp_transaction_detail": [
            "source.dbt_datanl_prod.redshift.src_f_mkp_transaction_detail"
        ],
        "model.dbt_datanl_prod.stg_d_department": [
            "source.dbt_datanl_prod.redshift.src_d_department"
        ],
        "model.dbt_datanl_prod.stg_d_freight_method": [
            "source.dbt_datanl_prod.redshift.src_d_freight_method"
        ],
        "model.dbt_datanl_prod.stg_d_reallocated_digital_type": [
            "source.dbt_datanl_prod.redshift.src_d_reallocated_digital_type"
        ],
        "model.dbt_datanl_prod.stg_d_customer_channel_type": [
            "source.dbt_datanl_prod.redshift.src_d_customer_channel_type"
        ],
        "model.dbt_datanl_prod.stg_d_touchpoint_channel_type": [
            "source.dbt_datanl_prod.redshift.src_d_touchpoint_channel_type"
        ],
        "model.dbt_datanl_prod.stg_f_delivery_detail_current": [
            "source.dbt_datanl_prod.redshift.src_f_delivery_detail_current"
        ],
        "model.dbt_datanl_prod.stg_d_product_nature": [
            "source.dbt_datanl_prod.redshift.src_d_product_nature"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_detail_2021": [
            "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2021"
        ],
        "model.dbt_datanl_prod.stg_d_return_type": [
            "source.dbt_datanl_prod.redshift.src_d_return_type"
        ],
        "model.dbt_datanl_prod.stg_opv_customer__personal_data": [
            "source.dbt_datanl_prod.redshift.src_opv_customer__personal_data"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_header_2020": [
            "source.dbt_datanl_prod.redshift.src_f_transaction_header_2020"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_sustainable_2020": [
            "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2020"
        ],
        "model.dbt_datanl_prod.stg_f_availability_rate": [
            "source.dbt_datanl_prod.redshift.src_f_availability_rate"
        ],
        "model.dbt_datanl_prod.stg_d_delivery_type": [
            "source.dbt_datanl_prod.redshift.src_d_delivery_type"
        ],
        "model.dbt_datanl_prod.stg_f_delivery_header_2019": [
            "source.dbt_datanl_prod.redshift.src_f_delivery_header_2019"
        ],
        "model.dbt_datanl_prod.stg_d_day": [
            "source.dbt_datanl_prod.redshift.src_d_day"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_detail_2019": [
            "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2019"
        ],
        "model.dbt_datanl_prod.stg_d_model": [
            "source.dbt_datanl_prod.redshift.src_d_model"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_detail_current": [
            "source.dbt_datanl_prod.redshift.src_f_transaction_detail_current"
        ],
        "model.dbt_datanl_prod.stg_f_postnl_year": [
            "source.dbt_datanl_prod.redshift.src_f_postnl_year"
        ],
        "model.dbt_datanl_prod.fct_products": [
            "model.dbt_datanl_prod.fct_transaction_detail_last_four_years",
            "model.dbt_datanl_prod.stg_d_sku",
            "model.dbt_datanl_prod.stg_d_sport_dpt"
        ],
        "model.dbt_datanl_prod.dim_return_type": [
            "model.dbt_datanl_prod.stg_d_return_type"
        ],
        "model.dbt_datanl_prod.fct_transaction_sustainable_last_four_years ": [
            "model.dbt_datanl_prod.stg_f_transaction_sustainable_2019",
            "model.dbt_datanl_prod.stg_f_transaction_sustainable_2020",
            "model.dbt_datanl_prod.stg_f_transaction_sustainable_2021",
            "model.dbt_datanl_prod.stg_f_transaction_sustainable_current"
        ],
        "model.dbt_datanl_prod.fct_transaction_sustainable_last_two_years": [
            "model.dbt_datanl_prod.stg_f_transaction_sustainable_2021",
            "model.dbt_datanl_prod.stg_f_transaction_sustainable_current"
        ],
        "model.dbt_datanl_prod.fct_retbox": [
            "model.dbt_datanl_prod.stg_f_supply_vc4r_retbox"
        ],
        "model.dbt_datanl_prod.dim_business_unit_receiver": [
            "model.dbt_datanl_prod.fct_delivery_detail_last_four_years",
            "model.dbt_datanl_prod.stg_d_business_unit"
        ],
        "model.dbt_datanl_prod.dim_business_unit_sender": [
            "model.dbt_datanl_prod.fct_delivery_detail_last_four_years",
            "model.dbt_datanl_prod.stg_d_business_unit"
        ],
        "model.dbt_datanl_prod.dim_business_unit_stock_origin": [
            "model.dbt_datanl_prod.fct_delivery_detail_last_four_years",
            "model.dbt_datanl_prod.stg_d_business_unit"
        ],
        "model.dbt_datanl_prod.fct_delivery_detail_last_four_years": [
            "model.dbt_datanl_prod.stg_f_delivery_detail_2019",
            "model.dbt_datanl_prod.stg_f_delivery_detail_2020",
            "model.dbt_datanl_prod.stg_f_delivery_detail_2021",
            "model.dbt_datanl_prod.stg_f_delivery_detail_current"
        ],
        "model.dbt_datanl_prod.dim_business_unit": [
            "model.dbt_datanl_prod.fct_transaction_detail_last_four_years",
            "model.dbt_datanl_prod.stg_d_business_unit"
        ],
        "model.dbt_datanl_prod.fct_transaction_detail_last_four_years": [
            "model.dbt_datanl_prod.stg_f_transaction_detail_2019",
            "model.dbt_datanl_prod.stg_f_transaction_detail_2020",
            "model.dbt_datanl_prod.stg_f_transaction_detail_2021",
            "model.dbt_datanl_prod.stg_f_transaction_detail_current"
        ],
        "model.dbt_datanl_prod.fct_transaction_detail_last_two_years": [
            "model.dbt_datanl_prod.stg_f_transaction_detail_2021",
            "model.dbt_datanl_prod.stg_f_transaction_detail_current"
        ],
        "model.dbt_datanl_prod.dim_return_reason": [
            "model.dbt_datanl_prod.stg_d_return_reason"
        ],
        "model.dbt_datanl_prod.dim_calendar": [
            "model.dbt_datanl_prod.stg_d_day"
        ],
        "model.dbt_datanl_prod.fct_delivery_header_last_two_years": [
            "model.dbt_datanl_prod.stg_f_delivery_header_2021",
            "model.dbt_datanl_prod.stg_f_delivery_header_current"
        ],
        "model.dbt_datanl_prod.fct_delivery_detail_last_two_years": [
            "model.dbt_datanl_prod.stg_f_delivery_detail_2021",
            "model.dbt_datanl_prod.stg_f_delivery_detail_current"
        ],
        "test.dbt_datanl_prod.unique_stg_d_sku_sku_idr_sku.a81c1c9976": [
            "model.dbt_datanl_prod.stg_d_sku"
        ],
        "test.dbt_datanl_prod.not_null_stg_d_sku_sku_idr_sku.dba62eec8a": [
            "model.dbt_datanl_prod.stg_d_sku"
        ],
        "model.dbt_datanl_prod.fct_PRO_Helped_Orders": [
            "source.dbt_datanl_prod.Datamart_Promise.src_PRO_Helped_Orders"
        ],
        "model.dbt_datanl_prod.fct_Sustainability_Awareness_Scores": [
            "source.dbt_datanl_prod.Datamart_Sustainability.src_Sustainability_Awareness_Scores"
        ],
        "model.dbt_datanl_prod.fct_CO2_Extraction": [
            "source.dbt_datanl_prod.Datamart_Promise.src_CO2_Extraction"
        ],
        "model.dbt_datanl_prod.fct_transactions": [
            "model.dbt_datanl_prod.fct_PRO_Helped_Orders",
            "model.dbt_datanl_prod.fct_delivery_detail_last_two_years",
            "model.dbt_datanl_prod.fct_delivery_detail_last_two_years",
            "model.dbt_datanl_prod.fct_retbox",
            "model.dbt_datanl_prod.fct_transaction_detail_last_two_years",
            "model.dbt_datanl_prod.fct_transaction_sustainable_last_two_years",
            "model.dbt_datanl_prod.stg_d_sku"
        ],
        "model.dbt_datanl_prod.fct_sustainable_awareness_scores": [
            "model.dbt_datanl_prod.fct_Sustainability_Awareness_Scores",
            "model.dbt_datanl_prod.fct_Sustainability_Awareness_Scores",
            "model.dbt_datanl_prod.stg_d_business_unit"
        ],
        "source.dbt_datanl_prod.Datamart_Promise.src_CO2_Extraction": [],
        "source.dbt_datanl_prod.Datamart_Promise.src_PRO_Helped_Orders": [],
        "source.dbt_datanl_prod.Datamart_Sustainability.src_Sustainability_Awareness_Scores": [],
        "source.dbt_datanl_prod.redshift.src_d_business_unit": [],
        "source.dbt_datanl_prod.redshift.src_d_customer_channel_type": [],
        "source.dbt_datanl_prod.redshift.src_d_customers": [],
        "source.dbt_datanl_prod.redshift.src_d_day": [],
        "source.dbt_datanl_prod.redshift.src_d_delivery_type": [],
        "source.dbt_datanl_prod.redshift.src_d_department": [],
        "source.dbt_datanl_prod.redshift.src_d_family": [],
        "source.dbt_datanl_prod.redshift.src_d_freight_method": [],
        "source.dbt_datanl_prod.redshift.src_d_label": [],
        "source.dbt_datanl_prod.redshift.src_d_merchandise_hierarchy": [],
        "source.dbt_datanl_prod.redshift.src_d_mkp_product": [],
        "source.dbt_datanl_prod.redshift.src_d_model": [],
        "source.dbt_datanl_prod.redshift.src_d_product_nature": [],
        "source.dbt_datanl_prod.redshift.src_d_reallocated_digital_type": [],
        "source.dbt_datanl_prod.redshift.src_logical_stock_snapshot": [],
        "source.dbt_datanl_prod.redshift.src_d_return_reason": [],
        "source.dbt_datanl_prod.redshift.src_d_return_type": [],
        "source.dbt_datanl_prod.redshift.src_d_shipping_type": [],
        "source.dbt_datanl_prod.redshift.src_d_sku": [],
        "source.dbt_datanl_prod.redshift.src_d_sport_dpt": [],
        "source.dbt_datanl_prod.redshift.src_d_touchpoint_channel_type": [],
        "source.dbt_datanl_prod.redshift.src_d_week": [],
        "source.dbt_datanl_prod.redshift.src_f_availability_rate": [],
        "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2019": [],
        "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2020": [],
        "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2021": [],
        "source.dbt_datanl_prod.redshift.src_f_delivery_detail_current": [],
        "source.dbt_datanl_prod.redshift.src_f_delivery_header_2019": [],
        "source.dbt_datanl_prod.redshift.src_f_delivery_header_2020": [],
        "source.dbt_datanl_prod.redshift.src_f_delivery_header_2021": [],
        "source.dbt_datanl_prod.redshift.src_f_delivery_header_current": [],
        "source.dbt_datanl_prod.redshift.src_f_mkp_transaction_detail": [],
        "source.dbt_datanl_prod.redshift.src_f_postnl_year": [],
        "source.dbt_datanl_prod.redshift.src_f_supply_vc4r_retbox": [],
        "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2019": [],
        "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2020": [],
        "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2021": [],
        "source.dbt_datanl_prod.redshift.src_f_transaction_detail_current": [],
        "source.dbt_datanl_prod.redshift.src_f_transaction_header_2019": [],
        "source.dbt_datanl_prod.redshift.src_f_transaction_header_2020": [],
        "source.dbt_datanl_prod.redshift.src_f_transaction_header_2021": [],
        "source.dbt_datanl_prod.redshift.src_f_transaction_header_current": [],
        "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2019": [],
        "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2020": [],
        "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2021": [],
        "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_current": [],
        "source.dbt_datanl_prod.redshift.src_lib_web_order_status": [],
        "source.dbt_datanl_prod.redshift.src_needs_car_autoflow": [],
        "source.dbt_datanl_prod.redshift.src_opv_customer__personal_data": [],
        "source.dbt_datanl_prod.redshift.src_opv_review__review": [],
        "source.dbt_datanl_prod.redshift.src_opv_user__author": [],
        "source.dbt_datanl_prod.redshift.src_physical_stock_snapshot": [],
        "source.dbt_datanl_prod.redshift.src_weight_dimension_finish_product": [],
        "source.dbt_datanl_prod.redshift.src_zsd_oms_ordtrkhi": [],
        "source.dbt_datanl_prod.zendesk.src_zendesk_tickets": [],
        "source.dbt_datanl_prod.zendesk.src_zendesk_customf": []
    },
    "child_map": {
        "model.dbt_datanl_prod.fct_crc_tickets": [],
        "model.dbt_datanl_prod.zendesk_customf": [
            "test.dbt_datanl_prod.not_null_zendesk_customf_id.0077092197",
            "test.dbt_datanl_prod.unique_zendesk_customf_id.36444af5c9"
        ],
        "model.dbt_datanl_prod.zendesk_tickets": [
            "model.dbt_datanl_prod.fct_crc_tickets",
            "test.dbt_datanl_prod.not_null_zendesk_tickets_ticket_id.3e2640a89b",
            "test.dbt_datanl_prod.unique_zendesk_tickets_ticket_id.033781ea12"
        ],
        "test.dbt_datanl_prod.unique_zendesk_tickets_ticket_id.033781ea12": [],
        "test.dbt_datanl_prod.not_null_zendesk_tickets_ticket_id.3e2640a89b": [],
        "test.dbt_datanl_prod.unique_zendesk_customf_id.36444af5c9": [],
        "test.dbt_datanl_prod.not_null_zendesk_customf_id.0077092197": [],
        "model.dbt_datanl_prod.stg_f_delivery_header_2021": [
            "model.dbt_datanl_prod.fct_delivery_header_last_two_years"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_sustainable_current": [
            "model.dbt_datanl_prod.fct_transaction_sustainable_last_four_years ",
            "model.dbt_datanl_prod.fct_transaction_sustainable_last_two_years"
        ],
        "model.dbt_datanl_prod.stg_physical_stock_snapshot": [],
        "model.dbt_datanl_prod.stg_d_week": [],
        "model.dbt_datanl_prod.stg_d_business_unit": [
            "model.dbt_datanl_prod.dim_business_unit",
            "model.dbt_datanl_prod.dim_business_unit_receiver",
            "model.dbt_datanl_prod.dim_business_unit_sender",
            "model.dbt_datanl_prod.dim_business_unit_stock_origin",
            "model.dbt_datanl_prod.fct_sustainable_awareness_scores"
        ],
        "model.dbt_datanl_prod.stg_d_return_reason": [
            "model.dbt_datanl_prod.dim_return_reason"
        ],
        "model.dbt_datanl_prod.stg_weight_dimension_finish_product": [],
        "model.dbt_datanl_prod.stg_d_sku": [
            "model.dbt_datanl_prod.fct_products",
            "model.dbt_datanl_prod.fct_transactions",
            "test.dbt_datanl_prod.not_null_stg_d_sku_sku_idr_sku.dba62eec8a",
            "test.dbt_datanl_prod.unique_stg_d_sku_sku_idr_sku.a81c1c9976"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_header_2021": [],
        "model.dbt_datanl_prod.stg_d_mkp_product": [],
        "model.dbt_datanl_prod.stg_d_sport_dpt": [
            "model.dbt_datanl_prod.fct_products"
        ],
        "model.dbt_datanl_prod.stg_opv_review__review": [],
        "model.dbt_datanl_prod.stg_lib_web_order_status": [],
        "model.dbt_datanl_prod.stg_f_transaction_detail_2020": [
            "model.dbt_datanl_prod.fct_transaction_detail_last_four_years"
        ],
        "model.dbt_datanl_prod.stg_f_delivery_detail_2019": [
            "model.dbt_datanl_prod.fct_delivery_detail_last_four_years"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_header_current": [],
        "model.dbt_datanl_prod.stg_f_transaction_sustainable_2021": [
            "model.dbt_datanl_prod.fct_transaction_sustainable_last_four_years ",
            "model.dbt_datanl_prod.fct_transaction_sustainable_last_two_years"
        ],
        "model.dbt_datanl_prod.stg_zsd_oms_ordtrkhi": [],
        "model.dbt_datanl_prod.stg_f_transaction_sustainable_2019": [
            "model.dbt_datanl_prod.fct_transaction_sustainable_last_four_years "
        ],
        "model.dbt_datanl_prod.stg_d_shipping_type": [],
        "model.dbt_datanl_prod.stg_f_supply_vc4r_retbox": [
            "model.dbt_datanl_prod.fct_retbox"
        ],
        "model.dbt_datanl_prod.stg_d_merchandise_hierarchy": [],
        "model.dbt_datanl_prod.stg_d_family": [],
        "model.dbt_datanl_prod.stg_f_delivery_detail_2020": [
            "model.dbt_datanl_prod.fct_delivery_detail_last_four_years"
        ],
        "model.dbt_datanl_prod.stg_d_label": [],
        "model.dbt_datanl_prod.stg_f_delivery_header_current": [
            "model.dbt_datanl_prod.fct_delivery_header_last_two_years"
        ],
        "model.dbt_datanl_prod.stg_opv_user__author": [],
        "model.dbt_datanl_prod.stg_needs_car_autoflow": [],
        "model.dbt_datanl_prod.stg_f_delivery_detail_2021": [
            "model.dbt_datanl_prod.fct_delivery_detail_last_four_years",
            "model.dbt_datanl_prod.fct_delivery_detail_last_two_years"
        ],
        "model.dbt_datanl_prod.stg_f_delivery_header_2020": [],
        "model.dbt_datanl_prod.stg_f_transaction_header_2019": [],
        "model.dbt_datanl_prod.stg_d_customers": [],
        "model.dbt_datanl_prod.stg_f_mkp_transaction_detail": [],
        "model.dbt_datanl_prod.stg_d_department": [],
        "model.dbt_datanl_prod.stg_d_freight_method": [],
        "model.dbt_datanl_prod.stg_d_reallocated_digital_type": [],
        "model.dbt_datanl_prod.stg_d_customer_channel_type": [],
        "model.dbt_datanl_prod.stg_d_touchpoint_channel_type": [],
        "model.dbt_datanl_prod.stg_f_delivery_detail_current": [
            "model.dbt_datanl_prod.fct_delivery_detail_last_four_years",
            "model.dbt_datanl_prod.fct_delivery_detail_last_two_years"
        ],
        "model.dbt_datanl_prod.stg_d_product_nature": [],
        "model.dbt_datanl_prod.stg_f_transaction_detail_2021": [
            "model.dbt_datanl_prod.fct_transaction_detail_last_four_years",
            "model.dbt_datanl_prod.fct_transaction_detail_last_two_years"
        ],
        "model.dbt_datanl_prod.stg_d_return_type": [
            "model.dbt_datanl_prod.dim_return_type"
        ],
        "model.dbt_datanl_prod.stg_opv_customer__personal_data": [],
        "model.dbt_datanl_prod.stg_f_transaction_header_2020": [],
        "model.dbt_datanl_prod.stg_f_transaction_sustainable_2020": [
            "model.dbt_datanl_prod.fct_transaction_sustainable_last_four_years "
        ],
        "model.dbt_datanl_prod.stg_f_availability_rate": [],
        "model.dbt_datanl_prod.stg_d_delivery_type": [],
        "model.dbt_datanl_prod.stg_f_delivery_header_2019": [],
        "model.dbt_datanl_prod.stg_d_day": [
            "model.dbt_datanl_prod.dim_calendar"
        ],
        "model.dbt_datanl_prod.stg_f_transaction_detail_2019": [
            "model.dbt_datanl_prod.fct_transaction_detail_last_four_years"
        ],
        "model.dbt_datanl_prod.stg_d_model": [],
        "model.dbt_datanl_prod.stg_f_transaction_detail_current": [
            "model.dbt_datanl_prod.fct_transaction_detail_last_four_years",
            "model.dbt_datanl_prod.fct_transaction_detail_last_two_years"
        ],
        "model.dbt_datanl_prod.stg_f_postnl_year": [],
        "model.dbt_datanl_prod.fct_products": [],
        "model.dbt_datanl_prod.dim_return_type": [],
        "model.dbt_datanl_prod.fct_transaction_sustainable_last_four_years ": [],
        "model.dbt_datanl_prod.fct_transaction_sustainable_last_two_years": [
            "model.dbt_datanl_prod.fct_transactions"
        ],
        "model.dbt_datanl_prod.fct_retbox": [
            "model.dbt_datanl_prod.fct_transactions"
        ],
        "model.dbt_datanl_prod.dim_business_unit_receiver": [],
        "model.dbt_datanl_prod.dim_business_unit_sender": [],
        "model.dbt_datanl_prod.dim_business_unit_stock_origin": [],
        "model.dbt_datanl_prod.fct_delivery_detail_last_four_years": [
            "model.dbt_datanl_prod.dim_business_unit_receiver",
            "model.dbt_datanl_prod.dim_business_unit_sender",
            "model.dbt_datanl_prod.dim_business_unit_stock_origin"
        ],
        "model.dbt_datanl_prod.dim_business_unit": [],
        "model.dbt_datanl_prod.fct_transaction_detail_last_four_years": [
            "model.dbt_datanl_prod.dim_business_unit",
            "model.dbt_datanl_prod.fct_products"
        ],
        "model.dbt_datanl_prod.fct_transaction_detail_last_two_years": [
            "model.dbt_datanl_prod.fct_transactions"
        ],
        "model.dbt_datanl_prod.dim_return_reason": [],
        "model.dbt_datanl_prod.dim_calendar": [],
        "model.dbt_datanl_prod.fct_delivery_header_last_two_years": [],
        "model.dbt_datanl_prod.fct_delivery_detail_last_two_years": [
            "model.dbt_datanl_prod.fct_transactions",
            "model.dbt_datanl_prod.fct_transactions"
        ],
        "test.dbt_datanl_prod.unique_stg_d_sku_sku_idr_sku.a81c1c9976": [],
        "test.dbt_datanl_prod.not_null_stg_d_sku_sku_idr_sku.dba62eec8a": [],
        "model.dbt_datanl_prod.fct_PRO_Helped_Orders": [
            "model.dbt_datanl_prod.fct_transactions"
        ],
        "model.dbt_datanl_prod.fct_Sustainability_Awareness_Scores": [
            "model.dbt_datanl_prod.fct_sustainable_awareness_scores",
            "model.dbt_datanl_prod.fct_sustainable_awareness_scores"
        ],
        "model.dbt_datanl_prod.fct_CO2_Extraction": [],
        "model.dbt_datanl_prod.fct_transactions": [],
        "model.dbt_datanl_prod.fct_sustainable_awareness_scores": [],
        "source.dbt_datanl_prod.Datamart_Promise.src_CO2_Extraction": [
            "model.dbt_datanl_prod.fct_CO2_Extraction"
        ],
        "source.dbt_datanl_prod.Datamart_Promise.src_PRO_Helped_Orders": [
            "model.dbt_datanl_prod.fct_PRO_Helped_Orders"
        ],
        "source.dbt_datanl_prod.Datamart_Sustainability.src_Sustainability_Awareness_Scores": [
            "model.dbt_datanl_prod.fct_Sustainability_Awareness_Scores"
        ],
        "source.dbt_datanl_prod.redshift.src_d_business_unit": [
            "model.dbt_datanl_prod.stg_d_business_unit"
        ],
        "source.dbt_datanl_prod.redshift.src_d_customer_channel_type": [
            "model.dbt_datanl_prod.stg_d_customer_channel_type"
        ],
        "source.dbt_datanl_prod.redshift.src_d_customers": [
            "model.dbt_datanl_prod.stg_d_customers"
        ],
        "source.dbt_datanl_prod.redshift.src_d_day": [
            "model.dbt_datanl_prod.stg_d_day"
        ],
        "source.dbt_datanl_prod.redshift.src_d_delivery_type": [
            "model.dbt_datanl_prod.stg_d_delivery_type"
        ],
        "source.dbt_datanl_prod.redshift.src_d_department": [
            "model.dbt_datanl_prod.stg_d_department"
        ],
        "source.dbt_datanl_prod.redshift.src_d_family": [
            "model.dbt_datanl_prod.stg_d_family"
        ],
        "source.dbt_datanl_prod.redshift.src_d_freight_method": [
            "model.dbt_datanl_prod.stg_d_freight_method"
        ],
        "source.dbt_datanl_prod.redshift.src_d_label": [
            "model.dbt_datanl_prod.stg_d_label"
        ],
        "source.dbt_datanl_prod.redshift.src_d_merchandise_hierarchy": [
            "model.dbt_datanl_prod.stg_d_merchandise_hierarchy"
        ],
        "source.dbt_datanl_prod.redshift.src_d_mkp_product": [
            "model.dbt_datanl_prod.stg_d_mkp_product"
        ],
        "source.dbt_datanl_prod.redshift.src_d_model": [
            "model.dbt_datanl_prod.stg_d_model"
        ],
        "source.dbt_datanl_prod.redshift.src_d_product_nature": [
            "model.dbt_datanl_prod.stg_d_product_nature"
        ],
        "source.dbt_datanl_prod.redshift.src_d_reallocated_digital_type": [
            "model.dbt_datanl_prod.stg_d_reallocated_digital_type"
        ],
        "source.dbt_datanl_prod.redshift.src_logical_stock_snapshot": [],
        "source.dbt_datanl_prod.redshift.src_d_return_reason": [
            "model.dbt_datanl_prod.stg_d_return_reason"
        ],
        "source.dbt_datanl_prod.redshift.src_d_return_type": [
            "model.dbt_datanl_prod.stg_d_return_type"
        ],
        "source.dbt_datanl_prod.redshift.src_d_shipping_type": [
            "model.dbt_datanl_prod.stg_d_shipping_type"
        ],
        "source.dbt_datanl_prod.redshift.src_d_sku": [
            "model.dbt_datanl_prod.stg_d_sku"
        ],
        "source.dbt_datanl_prod.redshift.src_d_sport_dpt": [
            "model.dbt_datanl_prod.stg_d_sport_dpt"
        ],
        "source.dbt_datanl_prod.redshift.src_d_touchpoint_channel_type": [
            "model.dbt_datanl_prod.stg_d_touchpoint_channel_type"
        ],
        "source.dbt_datanl_prod.redshift.src_d_week": [
            "model.dbt_datanl_prod.stg_d_week"
        ],
        "source.dbt_datanl_prod.redshift.src_f_availability_rate": [
            "model.dbt_datanl_prod.stg_f_availability_rate"
        ],
        "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2019": [
            "model.dbt_datanl_prod.stg_f_delivery_detail_2019"
        ],
        "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2020": [
            "model.dbt_datanl_prod.stg_f_delivery_detail_2020"
        ],
        "source.dbt_datanl_prod.redshift.src_f_delivery_detail_2021": [
            "model.dbt_datanl_prod.stg_f_delivery_detail_2021"
        ],
        "source.dbt_datanl_prod.redshift.src_f_delivery_detail_current": [
            "model.dbt_datanl_prod.stg_f_delivery_detail_current"
        ],
        "source.dbt_datanl_prod.redshift.src_f_delivery_header_2019": [
            "model.dbt_datanl_prod.stg_f_delivery_header_2019"
        ],
        "source.dbt_datanl_prod.redshift.src_f_delivery_header_2020": [
            "model.dbt_datanl_prod.stg_f_delivery_header_2020"
        ],
        "source.dbt_datanl_prod.redshift.src_f_delivery_header_2021": [
            "model.dbt_datanl_prod.stg_f_delivery_header_2021"
        ],
        "source.dbt_datanl_prod.redshift.src_f_delivery_header_current": [
            "model.dbt_datanl_prod.stg_f_delivery_header_current"
        ],
        "source.dbt_datanl_prod.redshift.src_f_mkp_transaction_detail": [
            "model.dbt_datanl_prod.stg_f_mkp_transaction_detail"
        ],
        "source.dbt_datanl_prod.redshift.src_f_postnl_year": [
            "model.dbt_datanl_prod.stg_f_postnl_year"
        ],
        "source.dbt_datanl_prod.redshift.src_f_supply_vc4r_retbox": [
            "model.dbt_datanl_prod.stg_f_supply_vc4r_retbox"
        ],
        "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2019": [
            "model.dbt_datanl_prod.stg_f_transaction_detail_2019"
        ],
        "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2020": [
            "model.dbt_datanl_prod.stg_f_transaction_detail_2020"
        ],
        "source.dbt_datanl_prod.redshift.src_f_transaction_detail_2021": [
            "model.dbt_datanl_prod.stg_f_transaction_detail_2021"
        ],
        "source.dbt_datanl_prod.redshift.src_f_transaction_detail_current": [
            "model.dbt_datanl_prod.stg_f_transaction_detail_current"
        ],
        "source.dbt_datanl_prod.redshift.src_f_transaction_header_2019": [
            "model.dbt_datanl_prod.stg_f_transaction_header_2019"
        ],
        "source.dbt_datanl_prod.redshift.src_f_transaction_header_2020": [
            "model.dbt_datanl_prod.stg_f_transaction_header_2020"
        ],
        "source.dbt_datanl_prod.redshift.src_f_transaction_header_2021": [
            "model.dbt_datanl_prod.stg_f_transaction_header_2021"
        ],
        "source.dbt_datanl_prod.redshift.src_f_transaction_header_current": [
            "model.dbt_datanl_prod.stg_f_transaction_header_current"
        ],
        "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2019": [
            "model.dbt_datanl_prod.stg_f_transaction_sustainable_2019"
        ],
        "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2020": [
            "model.dbt_datanl_prod.stg_f_transaction_sustainable_2020"
        ],
        "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_2021": [
            "model.dbt_datanl_prod.stg_f_transaction_sustainable_2021"
        ],
        "source.dbt_datanl_prod.redshift.src_f_transaction_sustainable_current": [
            "model.dbt_datanl_prod.stg_f_transaction_sustainable_current"
        ],
        "source.dbt_datanl_prod.redshift.src_lib_web_order_status": [
            "model.dbt_datanl_prod.stg_lib_web_order_status"
        ],
        "source.dbt_datanl_prod.redshift.src_needs_car_autoflow": [
            "model.dbt_datanl_prod.stg_needs_car_autoflow"
        ],
        "source.dbt_datanl_prod.redshift.src_opv_customer__personal_data": [
            "model.dbt_datanl_prod.stg_opv_customer__personal_data"
        ],
        "source.dbt_datanl_prod.redshift.src_opv_review__review": [
            "model.dbt_datanl_prod.stg_opv_review__review"
        ],
        "source.dbt_datanl_prod.redshift.src_opv_user__author": [
            "model.dbt_datanl_prod.stg_opv_user__author"
        ],
        "source.dbt_datanl_prod.redshift.src_physical_stock_snapshot": [
            "model.dbt_datanl_prod.stg_physical_stock_snapshot"
        ],
        "source.dbt_datanl_prod.redshift.src_weight_dimension_finish_product": [
            "model.dbt_datanl_prod.stg_weight_dimension_finish_product"
        ],
        "source.dbt_datanl_prod.redshift.src_zsd_oms_ordtrkhi": [
            "model.dbt_datanl_prod.stg_zsd_oms_ordtrkhi"
        ],
        "source.dbt_datanl_prod.zendesk.src_zendesk_tickets": [
            "model.dbt_datanl_prod.zendesk_tickets"
        ],
        "source.dbt_datanl_prod.zendesk.src_zendesk_customf": [
            "model.dbt_datanl_prod.zendesk_customf"
        ]
    }
}
